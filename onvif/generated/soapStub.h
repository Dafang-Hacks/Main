/* soapStub.h
   Generated by gSOAP 2.8.17r from /root/source/onvif/generated/onvif.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_WSA_200408
#define SOAP_NAMESPACE_OF_wsdd	"http://schemas.xmlsoap.org/ws/2005/04/discovery"
#define SOAP_WSA_2005
#define SOAP_NAMESPACE_OF_tptz	"http://www.onvif.org/ver20/ptz/wsdl"
#define SOAP_NAMESPACE_OF_tt	"http://www.onvif.org/ver10/schema"
#define SOAP_NAMESPACE_OF_wsnt	"http://docs.oasis-open.org/wsn/b-2"
#define SOAP_NAMESPACE_OF_wsrfbf	"http://docs.oasis-open.org/wsrf/bf-2"
#define SOAP_NAMESPACE_OF_wstop	"http://docs.oasis-open.org/wsn/t-1"
#define SOAP_NAMESPACE_OF_tdn	"http://www.onvif.org/ver10/network/wsdl"
#define SOAP_NAMESPACE_OF_tmd	"http://www.onvif.org/ver10/deviceIO/wsdl"
#define SOAP_NAMESPACE_OF_tev	"http://www.onvif.org/ver10/events/wsdl"
#define SOAP_NAMESPACE_OF_empty	""
#define SOAP_NAMESPACE_OF_wsrfrw	"http://docs.oasis-open.org/wsrf/rw-2"
#define SOAP_NAMESPACE_OF_wsrfr	"http://docs.oasis-open.org/wsrf/r-2"
#define SOAP_NAMESPACE_OF_trv	"http://www.onvif.org/ver10/receiver/wsdl"
#define SOAP_NAMESPACE_OF_trt	"http://www.onvif.org/ver10/media/wsdl"
#define SOAP_NAMESPACE_OF_tse	"http://www.onvif.org/ver10/search/wsdl"
#define SOAP_NAMESPACE_OF_tds	"http://www.onvif.org/ver10/device/wsdl"
#define SOAP_NAMESPACE_OF_timg	"http://www.onvif.org/ver20/imaging/wsdl"
#define SOAP_NAMESPACE_OF_ns1	"http://www.onvif.org/ver10/pacs"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20817
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_wsa__RelationshipTypeValues
#define SOAP_TYPE_wsa__RelationshipTypeValues (18)
/* wsa:RelationshipTypeValues */
enum wsa__RelationshipTypeValues { wsa__Reply = 0 };
typedef enum wsa__RelationshipTypeValues wsa__RelationshipTypeValues;
#endif

#ifndef SOAP_TYPE_wsa__FaultSubcodeValues
#define SOAP_TYPE_wsa__FaultSubcodeValues (19)
/* wsa:FaultSubcodeValues */
enum wsa__FaultSubcodeValues { wsa__InvalidMessageInformationHeader = 0, wsa__MessageInformationHeaderRequired = 1, wsa__DestinationUnreachable = 2, wsa__ActionNotSupported = 3, wsa__EndpointUnavailable = 4 };
typedef enum wsa__FaultSubcodeValues wsa__FaultSubcodeValues;
#endif

#ifndef SOAP_TYPE_wsdd__FaultCodeType
#define SOAP_TYPE_wsdd__FaultCodeType (64)
/* wsdd:FaultCodeType */
enum wsdd__FaultCodeType { wsdd__MatchingRuleNotSupported = 0 };
typedef enum wsdd__FaultCodeType wsdd__FaultCodeType;
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipType
#define SOAP_TYPE_wsa5__RelationshipType (99)
/* wsa5:RelationshipType */
enum wsa5__RelationshipType { http_x003a_x002f_x002fwww_x002ew3_x002eorg_x002f2005_x002f08_x002faddressing_x002freply = 0 };
typedef enum wsa5__RelationshipType wsa5__RelationshipType;
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesType
#define SOAP_TYPE_wsa5__FaultCodesType (100)
/* wsa5:FaultCodesType */
enum wsa5__FaultCodesType { wsa5__InvalidAddressingHeader = 0, wsa5__InvalidAddress = 1, wsa5__InvalidEPR = 2, wsa5__InvalidCardinality = 3, wsa5__MissingAddressInEPR = 4, wsa5__DuplicateMessageID = 5, wsa5__ActionMismatch = 6, wsa5__MessageAddressingHeaderRequired = 7, wsa5__DestinationUnreachable = 8, wsa5__ActionNotSupported = 9, wsa5__EndpointUnavailable = 10 };
typedef enum wsa5__FaultCodesType wsa5__FaultCodesType;
#endif

#ifndef SOAP_TYPE__wsa5__IsReferenceParameter
#define SOAP_TYPE__wsa5__IsReferenceParameter (119)
/* wsa5:IsReferenceParameter */
enum _wsa5__IsReferenceParameter { _wsa5__IsReferenceParameter__false = 0, _wsa5__IsReferenceParameter__true = 1 };
typedef enum _wsa5__IsReferenceParameter _wsa5__IsReferenceParameter;
#endif

#ifndef SOAP_TYPE_tt__RotateMode
#define SOAP_TYPE_tt__RotateMode (1231)
/* tt:RotateMode */
enum tt__RotateMode { tt__RotateMode__OFF = 0, tt__RotateMode__ON = 1, tt__RotateMode__AUTO = 2 };
#endif

#ifndef SOAP_TYPE_tt__SceneOrientationMode
#define SOAP_TYPE_tt__SceneOrientationMode (1232)
/* tt:SceneOrientationMode */
enum tt__SceneOrientationMode { tt__SceneOrientationMode__MANUAL = 0, tt__SceneOrientationMode__AUTO = 1 };
#endif

#ifndef SOAP_TYPE_tt__SceneOrientationOption
#define SOAP_TYPE_tt__SceneOrientationOption (1233)
/* tt:SceneOrientationOption */
enum tt__SceneOrientationOption { tt__SceneOrientationOption__Below = 0, tt__SceneOrientationOption__Horizon = 1, tt__SceneOrientationOption__Above = 2 };
#endif

#ifndef SOAP_TYPE_tt__ViewModes
#define SOAP_TYPE_tt__ViewModes (1234)
/* tt:ViewModes */
enum tt__ViewModes { tt__ViewModes__tt_x003aFisheye = 0, tt__ViewModes__tt_x003a360Panorama = 1, tt__ViewModes__tt_x003a180Panorama = 2, tt__ViewModes__tt_x003aQuad = 3, tt__ViewModes__tt_x003aOriginal = 4, tt__ViewModes__tt_x003aLeftHalf = 5, tt__ViewModes__tt_x003aRightHalf = 6, tt__ViewModes__tt_x003aDewarp = 7 };
#endif

#ifndef SOAP_TYPE_tt__VideoEncoding
#define SOAP_TYPE_tt__VideoEncoding (1235)
/* tt:VideoEncoding */
enum tt__VideoEncoding { tt__VideoEncoding__JPEG = 0, tt__VideoEncoding__MPEG4 = 1, tt__VideoEncoding__H264 = 2 };
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Profile
#define SOAP_TYPE_tt__Mpeg4Profile (1236)
/* tt:Mpeg4Profile */
enum tt__Mpeg4Profile { tt__Mpeg4Profile__SP = 0, tt__Mpeg4Profile__ASP = 1 };
#endif

#ifndef SOAP_TYPE_tt__H264Profile
#define SOAP_TYPE_tt__H264Profile (1237)
/* tt:H264Profile */
enum tt__H264Profile { tt__H264Profile__Baseline = 0, tt__H264Profile__Main = 1, tt__H264Profile__Extended = 2, tt__H264Profile__High = 3 };
#endif

#ifndef SOAP_TYPE_tt__VideoEncodingMimeNames
#define SOAP_TYPE_tt__VideoEncodingMimeNames (1238)
/* tt:VideoEncodingMimeNames */
enum tt__VideoEncodingMimeNames { tt__VideoEncodingMimeNames__JPEG = 0, tt__VideoEncodingMimeNames__MPV4_ES = 1, tt__VideoEncodingMimeNames__H264 = 2, tt__VideoEncodingMimeNames__H265 = 3 };
#endif

#ifndef SOAP_TYPE_tt__VideoEncodingProfiles
#define SOAP_TYPE_tt__VideoEncodingProfiles (1239)
/* tt:VideoEncodingProfiles */
enum tt__VideoEncodingProfiles { tt__VideoEncodingProfiles__Simple = 0, tt__VideoEncodingProfiles__AdvancedSimple = 1, tt__VideoEncodingProfiles__Baseline = 2, tt__VideoEncodingProfiles__Main = 3, tt__VideoEncodingProfiles__Main10 = 4, tt__VideoEncodingProfiles__Extended = 5, tt__VideoEncodingProfiles__High = 6 };
#endif

#ifndef SOAP_TYPE_tt__AudioEncoding
#define SOAP_TYPE_tt__AudioEncoding (1240)
/* tt:AudioEncoding */
enum tt__AudioEncoding { tt__AudioEncoding__G711 = 0, tt__AudioEncoding__G726 = 1, tt__AudioEncoding__AAC = 2 };
#endif

#ifndef SOAP_TYPE_tt__AudioEncodingMimeNames
#define SOAP_TYPE_tt__AudioEncodingMimeNames (1241)
/* tt:AudioEncodingMimeNames */
enum tt__AudioEncodingMimeNames { tt__AudioEncodingMimeNames__PCMU = 0, tt__AudioEncodingMimeNames__G726 = 1, tt__AudioEncodingMimeNames__MP4A_LATM = 2, tt__AudioEncodingMimeNames__mpeg4_generic = 3 };
#endif

#ifndef SOAP_TYPE_tt__MetadataCompressionType
#define SOAP_TYPE_tt__MetadataCompressionType (1242)
/* tt:MetadataCompressionType */
enum tt__MetadataCompressionType { tt__MetadataCompressionType__None = 0, tt__MetadataCompressionType__GZIP = 1, tt__MetadataCompressionType__EXI = 2 };
#endif

#ifndef SOAP_TYPE_tt__StreamType
#define SOAP_TYPE_tt__StreamType (1243)
/* tt:StreamType */
enum tt__StreamType { tt__StreamType__RTP_Unicast = 0, tt__StreamType__RTP_Multicast = 1 };
#endif

#ifndef SOAP_TYPE_tt__TransportProtocol
#define SOAP_TYPE_tt__TransportProtocol (1244)
/* tt:TransportProtocol */
enum tt__TransportProtocol { tt__TransportProtocol__UDP = 0, tt__TransportProtocol__TCP = 1, tt__TransportProtocol__RTSP = 2, tt__TransportProtocol__HTTP = 3 };
#endif

#ifndef SOAP_TYPE_tt__ScopeDefinition
#define SOAP_TYPE_tt__ScopeDefinition (1245)
/* tt:ScopeDefinition */
enum tt__ScopeDefinition { tt__ScopeDefinition__Fixed = 0, tt__ScopeDefinition__Configurable = 1 };
#endif

#ifndef SOAP_TYPE_tt__DiscoveryMode
#define SOAP_TYPE_tt__DiscoveryMode (1246)
/* tt:DiscoveryMode */
enum tt__DiscoveryMode { tt__DiscoveryMode__Discoverable = 0, tt__DiscoveryMode__NonDiscoverable = 1 };
#endif

#ifndef SOAP_TYPE_tt__Duplex
#define SOAP_TYPE_tt__Duplex (1248)
/* tt:Duplex */
enum tt__Duplex { tt__Duplex__Full = 0, tt__Duplex__Half = 1 };
#endif

#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration
#define SOAP_TYPE_tt__IPv6DHCPConfiguration (1250)
/* tt:IPv6DHCPConfiguration */
enum tt__IPv6DHCPConfiguration { tt__IPv6DHCPConfiguration__Auto = 0, tt__IPv6DHCPConfiguration__Stateful = 1, tt__IPv6DHCPConfiguration__Stateless = 2, tt__IPv6DHCPConfiguration__Off = 3 };
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocolType
#define SOAP_TYPE_tt__NetworkProtocolType (1251)
/* tt:NetworkProtocolType */
enum tt__NetworkProtocolType { tt__NetworkProtocolType__HTTP = 0, tt__NetworkProtocolType__HTTPS = 1, tt__NetworkProtocolType__RTSP = 2 };
#endif

#ifndef SOAP_TYPE_tt__NetworkHostType
#define SOAP_TYPE_tt__NetworkHostType (1252)
/* tt:NetworkHostType */
enum tt__NetworkHostType { tt__NetworkHostType__IPv4 = 0, tt__NetworkHostType__IPv6 = 1, tt__NetworkHostType__DNS = 2 };
#endif

#ifndef SOAP_TYPE_tt__IPType
#define SOAP_TYPE_tt__IPType (1256)
/* tt:IPType */
enum tt__IPType { tt__IPType__IPv4 = 0, tt__IPType__IPv6 = 1 };
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilterType
#define SOAP_TYPE_tt__IPAddressFilterType (1259)
/* tt:IPAddressFilterType */
enum tt__IPAddressFilterType { tt__IPAddressFilterType__Allow = 0, tt__IPAddressFilterType__Deny = 1 };
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSType
#define SOAP_TYPE_tt__DynamicDNSType (1260)
/* tt:DynamicDNSType */
enum tt__DynamicDNSType { tt__DynamicDNSType__NoUpdate = 0, tt__DynamicDNSType__ClientUpdates = 1, tt__DynamicDNSType__ServerUpdates = 2 };
#endif

#ifndef SOAP_TYPE_tt__Dot11StationMode
#define SOAP_TYPE_tt__Dot11StationMode (1262)
/* tt:Dot11StationMode */
enum tt__Dot11StationMode { tt__Dot11StationMode__Ad_hoc = 0, tt__Dot11StationMode__Infrastructure = 1, tt__Dot11StationMode__Extended = 2 };
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityMode
#define SOAP_TYPE_tt__Dot11SecurityMode (1263)
/* tt:Dot11SecurityMode */
enum tt__Dot11SecurityMode { tt__Dot11SecurityMode__None = 0, tt__Dot11SecurityMode__WEP = 1, tt__Dot11SecurityMode__PSK = 2, tt__Dot11SecurityMode__Dot1X = 3, tt__Dot11SecurityMode__Extended = 4 };
#endif

#ifndef SOAP_TYPE_tt__Dot11Cipher
#define SOAP_TYPE_tt__Dot11Cipher (1264)
/* tt:Dot11Cipher */
enum tt__Dot11Cipher { tt__Dot11Cipher__CCMP = 0, tt__Dot11Cipher__TKIP = 1, tt__Dot11Cipher__Any = 2, tt__Dot11Cipher__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__Dot11SignalStrength
#define SOAP_TYPE_tt__Dot11SignalStrength (1267)
/* tt:Dot11SignalStrength */
enum tt__Dot11SignalStrength { tt__Dot11SignalStrength__None = 0, tt__Dot11SignalStrength__Very_x0020Bad = 1, tt__Dot11SignalStrength__Bad = 2, tt__Dot11SignalStrength__Good = 3, tt__Dot11SignalStrength__Very_x0020Good = 4, tt__Dot11SignalStrength__Extended = 5 };
#endif

#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite (1268)
/* tt:Dot11AuthAndMangementSuite */
enum tt__Dot11AuthAndMangementSuite { tt__Dot11AuthAndMangementSuite__None = 0, tt__Dot11AuthAndMangementSuite__Dot1X = 1, tt__Dot11AuthAndMangementSuite__PSK = 2, tt__Dot11AuthAndMangementSuite__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__CapabilityCategory
#define SOAP_TYPE_tt__CapabilityCategory (1269)
/* tt:CapabilityCategory */
enum tt__CapabilityCategory { tt__CapabilityCategory__All = 0, tt__CapabilityCategory__Analytics = 1, tt__CapabilityCategory__Device = 2, tt__CapabilityCategory__Events = 3, tt__CapabilityCategory__Imaging = 4, tt__CapabilityCategory__Media = 5, tt__CapabilityCategory__PTZ = 6 };
#endif

#ifndef SOAP_TYPE_tt__SystemLogType
#define SOAP_TYPE_tt__SystemLogType (1270)
/* tt:SystemLogType */
enum tt__SystemLogType { tt__SystemLogType__System = 0, tt__SystemLogType__Access = 1 };
#endif

#ifndef SOAP_TYPE_tt__FactoryDefaultType
#define SOAP_TYPE_tt__FactoryDefaultType (1271)
/* tt:FactoryDefaultType */
enum tt__FactoryDefaultType { tt__FactoryDefaultType__Hard = 0, tt__FactoryDefaultType__Soft = 1 };
#endif

#ifndef SOAP_TYPE_tt__SetDateTimeType
#define SOAP_TYPE_tt__SetDateTimeType (1272)
/* tt:SetDateTimeType */
enum tt__SetDateTimeType { tt__SetDateTimeType__Manual = 0, tt__SetDateTimeType__NTP = 1 };
#endif

#ifndef SOAP_TYPE_tt__UserLevel
#define SOAP_TYPE_tt__UserLevel (1273)
/* tt:UserLevel */
enum tt__UserLevel { tt__UserLevel__Administrator = 0, tt__UserLevel__Operator = 1, tt__UserLevel__User = 2, tt__UserLevel__Anonymous = 3, tt__UserLevel__Extended = 4 };
#endif

#ifndef SOAP_TYPE_tt__RelayLogicalState
#define SOAP_TYPE_tt__RelayLogicalState (1274)
/* tt:RelayLogicalState */
enum tt__RelayLogicalState { tt__RelayLogicalState__active = 0, tt__RelayLogicalState__inactive = 1 };
#endif

#ifndef SOAP_TYPE_tt__RelayIdleState
#define SOAP_TYPE_tt__RelayIdleState (1275)
/* tt:RelayIdleState */
enum tt__RelayIdleState { tt__RelayIdleState__closed = 0, tt__RelayIdleState__open = 1 };
#endif

#ifndef SOAP_TYPE_tt__RelayMode
#define SOAP_TYPE_tt__RelayMode (1276)
/* tt:RelayMode */
enum tt__RelayMode { tt__RelayMode__Monostable = 0, tt__RelayMode__Bistable = 1 };
#endif

#ifndef SOAP_TYPE_tt__DigitalIdleState
#define SOAP_TYPE_tt__DigitalIdleState (1277)
/* tt:DigitalIdleState */
enum tt__DigitalIdleState { tt__DigitalIdleState__closed = 0, tt__DigitalIdleState__open = 1 };
#endif

#ifndef SOAP_TYPE_tt__EFlipMode
#define SOAP_TYPE_tt__EFlipMode (1278)
/* tt:EFlipMode */
enum tt__EFlipMode { tt__EFlipMode__OFF = 0, tt__EFlipMode__ON = 1, tt__EFlipMode__Extended = 2 };
#endif

#ifndef SOAP_TYPE_tt__ReverseMode
#define SOAP_TYPE_tt__ReverseMode (1279)
/* tt:ReverseMode */
enum tt__ReverseMode { tt__ReverseMode__OFF = 0, tt__ReverseMode__ON = 1, tt__ReverseMode__AUTO = 2, tt__ReverseMode__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourState
#define SOAP_TYPE_tt__PTZPresetTourState (1281)
/* tt:PTZPresetTourState */
enum tt__PTZPresetTourState { tt__PTZPresetTourState__Idle = 0, tt__PTZPresetTourState__Touring = 1, tt__PTZPresetTourState__Paused = 2, tt__PTZPresetTourState__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourDirection
#define SOAP_TYPE_tt__PTZPresetTourDirection (1282)
/* tt:PTZPresetTourDirection */
enum tt__PTZPresetTourDirection { tt__PTZPresetTourDirection__Forward = 0, tt__PTZPresetTourDirection__Backward = 1, tt__PTZPresetTourDirection__Extended = 2 };
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOperation
#define SOAP_TYPE_tt__PTZPresetTourOperation (1283)
/* tt:PTZPresetTourOperation */
enum tt__PTZPresetTourOperation { tt__PTZPresetTourOperation__Start = 0, tt__PTZPresetTourOperation__Stop = 1, tt__PTZPresetTourOperation__Pause = 2, tt__PTZPresetTourOperation__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__AutoFocusMode
#define SOAP_TYPE_tt__AutoFocusMode (1284)
/* tt:AutoFocusMode */
enum tt__AutoFocusMode { tt__AutoFocusMode__AUTO = 0, tt__AutoFocusMode__MANUAL = 1 };
#endif

#ifndef SOAP_TYPE_tt__AFModes
#define SOAP_TYPE_tt__AFModes (1285)
/* tt:AFModes */
enum tt__AFModes { tt__AFModes__OnceAfterMove = 0 };
#endif

#ifndef SOAP_TYPE_tt__WideDynamicMode
#define SOAP_TYPE_tt__WideDynamicMode (1286)
/* tt:WideDynamicMode */
enum tt__WideDynamicMode { tt__WideDynamicMode__OFF = 0, tt__WideDynamicMode__ON = 1 };
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationMode
#define SOAP_TYPE_tt__BacklightCompensationMode (1287)
/* tt:BacklightCompensationMode */
enum tt__BacklightCompensationMode { tt__BacklightCompensationMode__OFF = 0, tt__BacklightCompensationMode__ON = 1 };
#endif

#ifndef SOAP_TYPE_tt__ExposurePriority
#define SOAP_TYPE_tt__ExposurePriority (1288)
/* tt:ExposurePriority */
enum tt__ExposurePriority { tt__ExposurePriority__LowNoise = 0, tt__ExposurePriority__FrameRate = 1 };
#endif

#ifndef SOAP_TYPE_tt__ExposureMode
#define SOAP_TYPE_tt__ExposureMode (1289)
/* tt:ExposureMode */
enum tt__ExposureMode { tt__ExposureMode__AUTO = 0, tt__ExposureMode__MANUAL = 1 };
#endif

#ifndef SOAP_TYPE_tt__Enabled
#define SOAP_TYPE_tt__Enabled (1290)
/* tt:Enabled */
enum tt__Enabled { tt__Enabled__ENABLED = 0, tt__Enabled__DISABLED = 1 };
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceMode
#define SOAP_TYPE_tt__WhiteBalanceMode (1291)
/* tt:WhiteBalanceMode */
enum tt__WhiteBalanceMode { tt__WhiteBalanceMode__AUTO = 0, tt__WhiteBalanceMode__MANUAL = 1 };
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterMode
#define SOAP_TYPE_tt__IrCutFilterMode (1292)
/* tt:IrCutFilterMode */
enum tt__IrCutFilterMode { tt__IrCutFilterMode__ON = 0, tt__IrCutFilterMode__OFF = 1, tt__IrCutFilterMode__AUTO = 2 };
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationMode
#define SOAP_TYPE_tt__ImageStabilizationMode (1293)
/* tt:ImageStabilizationMode */
enum tt__ImageStabilizationMode { tt__ImageStabilizationMode__OFF = 0, tt__ImageStabilizationMode__ON = 1, tt__ImageStabilizationMode__AUTO = 2, tt__ImageStabilizationMode__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoBoundaryType
#define SOAP_TYPE_tt__IrCutFilterAutoBoundaryType (1294)
/* tt:IrCutFilterAutoBoundaryType */
enum tt__IrCutFilterAutoBoundaryType { tt__IrCutFilterAutoBoundaryType__Common = 0, tt__IrCutFilterAutoBoundaryType__ToOn = 1, tt__IrCutFilterAutoBoundaryType__ToOff = 2, tt__IrCutFilterAutoBoundaryType__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__ToneCompensationMode
#define SOAP_TYPE_tt__ToneCompensationMode (1295)
/* tt:ToneCompensationMode */
enum tt__ToneCompensationMode { tt__ToneCompensationMode__OFF = 0, tt__ToneCompensationMode__ON = 1, tt__ToneCompensationMode__AUTO = 2 };
#endif

#ifndef SOAP_TYPE_tt__DefoggingMode
#define SOAP_TYPE_tt__DefoggingMode (1296)
/* tt:DefoggingMode */
enum tt__DefoggingMode { tt__DefoggingMode__OFF = 0, tt__DefoggingMode__ON = 1, tt__DefoggingMode__AUTO = 2 };
#endif

#ifndef SOAP_TYPE_tt__ImageSendingType
#define SOAP_TYPE_tt__ImageSendingType (1297)
/* tt:ImageSendingType */
enum tt__ImageSendingType { tt__ImageSendingType__Embedded = 0, tt__ImageSendingType__LocalStorage = 1, tt__ImageSendingType__RemoteStorage = 2 };
#endif

#ifndef SOAP_TYPE_tt__PropertyOperation
#define SOAP_TYPE_tt__PropertyOperation (1298)
/* tt:PropertyOperation */
enum tt__PropertyOperation { tt__PropertyOperation__Initialized = 0, tt__PropertyOperation__Deleted = 1, tt__PropertyOperation__Changed = 2 };
#endif

#ifndef SOAP_TYPE_tt__Direction
#define SOAP_TYPE_tt__Direction (1299)
/* tt:Direction */
enum tt__Direction { tt__Direction__Left = 0, tt__Direction__Right = 1, tt__Direction__Any = 2 };
#endif

#ifndef SOAP_TYPE_tt__ReceiverMode
#define SOAP_TYPE_tt__ReceiverMode (1300)
/* tt:ReceiverMode */
enum tt__ReceiverMode { tt__ReceiverMode__AutoConnect = 0, tt__ReceiverMode__AlwaysConnect = 1, tt__ReceiverMode__NeverConnect = 2, tt__ReceiverMode__Unknown = 3 };
#endif

#ifndef SOAP_TYPE_tt__ReceiverState
#define SOAP_TYPE_tt__ReceiverState (1301)
/* tt:ReceiverState */
enum tt__ReceiverState { tt__ReceiverState__NotConnected = 0, tt__ReceiverState__Connecting = 1, tt__ReceiverState__Connected = 2, tt__ReceiverState__Unknown = 3 };
#endif

#ifndef SOAP_TYPE_tt__SearchState
#define SOAP_TYPE_tt__SearchState (1304)
/* tt:SearchState */
enum tt__SearchState { tt__SearchState__Queued = 0, tt__SearchState__Searching = 1, tt__SearchState__Completed = 2, tt__SearchState__Unknown = 3 };
#endif

#ifndef SOAP_TYPE_tt__RecordingStatus
#define SOAP_TYPE_tt__RecordingStatus (1305)
/* tt:RecordingStatus */
enum tt__RecordingStatus { tt__RecordingStatus__Initiated = 0, tt__RecordingStatus__Recording = 1, tt__RecordingStatus__Stopped = 2, tt__RecordingStatus__Removing = 3, tt__RecordingStatus__Removed = 4, tt__RecordingStatus__Unknown = 5 };
#endif

#ifndef SOAP_TYPE_tt__TrackType
#define SOAP_TYPE_tt__TrackType (1306)
/* tt:TrackType */
enum tt__TrackType { tt__TrackType__Video = 0, tt__TrackType__Audio = 1, tt__TrackType__Metadata = 2, tt__TrackType__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__ModeOfOperation
#define SOAP_TYPE_tt__ModeOfOperation (1309)
/* tt:ModeOfOperation */
enum tt__ModeOfOperation { tt__ModeOfOperation__Idle = 0, tt__ModeOfOperation__Active = 1, tt__ModeOfOperation__Unknown = 2 };
#endif

#ifndef SOAP_TYPE_tt__OSDType
#define SOAP_TYPE_tt__OSDType (1311)
/* tt:OSDType */
enum tt__OSDType { tt__OSDType__Text = 0, tt__OSDType__Image = 1, tt__OSDType__Extended = 2 };
#endif

#ifndef SOAP_TYPE_tt__MoveStatus
#define SOAP_TYPE_tt__MoveStatus (1313)
/* tt:MoveStatus */
enum tt__MoveStatus { tt__MoveStatus__IDLE = 0, tt__MoveStatus__MOVING = 1, tt__MoveStatus__UNKNOWN = 2 };
#endif

#ifndef SOAP_TYPE_tt__Entity
#define SOAP_TYPE_tt__Entity (1314)
/* tt:Entity */
enum tt__Entity { tt__Entity__Device = 0, tt__Entity__VideoSource = 1, tt__Entity__AudioSource = 2 };
#endif

#ifndef SOAP_TYPE_tmd__SerialPortType
#define SOAP_TYPE_tmd__SerialPortType (1318)
/* tmd:SerialPortType */
enum tmd__SerialPortType { tmd__SerialPortType__RS232 = 0, tmd__SerialPortType__RS422HalfDuplex = 1, tmd__SerialPortType__RS422FullDuplex = 2, tmd__SerialPortType__RS485HalfDuplex = 3, tmd__SerialPortType__RS485FullDuplex = 4, tmd__SerialPortType__Generic = 5 };
#endif

#ifndef SOAP_TYPE_tmd__ParityBit
#define SOAP_TYPE_tmd__ParityBit (1319)
/* tmd:ParityBit */
enum tmd__ParityBit { tmd__ParityBit__None = 0, tmd__ParityBit__Even = 1, tmd__ParityBit__Odd = 2, tmd__ParityBit__Mark = 3, tmd__ParityBit__Space = 4, tmd__ParityBit__Extended = 5 };
#endif

#ifndef SOAP_TYPE_tds__StorageType
#define SOAP_TYPE_tds__StorageType (1320)
/* tds:StorageType */
enum tds__StorageType { tds__StorageType__NFS = 0, tds__StorageType__CIFS = 1, tds__StorageType__CDMI = 2 };
#endif

#ifndef SOAP_TYPE_timg__ImagingPresetType
#define SOAP_TYPE_timg__ImagingPresetType (1321)
/* timg:ImagingPresetType */
enum timg__ImagingPresetType { timg__ImagingPresetType__Custom = 0, timg__ImagingPresetType__ClearWeather = 1, timg__ImagingPresetType__Cloudy = 2, timg__ImagingPresetType__Fog = 3, timg__ImagingPresetType__Rain = 4, timg__ImagingPresetType__Snowing = 5, timg__ImagingPresetType__Snow = 6, timg__ImagingPresetType__WDR = 7, timg__ImagingPresetType__Shade = 8, timg__ImagingPresetType__Night = 9, timg__ImagingPresetType__Indoor = 10, timg__ImagingPresetType__Fluorescent = 11, timg__ImagingPresetType__Incandescent = 12, timg__ImagingPresetType__Sodium_x0028Natrium_x0029 = 13, timg__ImagingPresetType__Sunrise_x0028Horizon_x0029 = 14, timg__ImagingPresetType__Sunset_x0028Rear_x0029 = 15, timg__ImagingPresetType__ExtremeHot = 16, timg__ImagingPresetType__ExtremeCold = 17, timg__ImagingPresetType__Underwater = 18, timg__ImagingPresetType__CloseUp = 19, timg__ImagingPresetType__Motion = 20, timg__ImagingPresetType__FlickerFree50 = 21, timg__ImagingPresetType__FlickerFree60 = 22 };
#endif

#ifndef SOAP_TYPE_ns1__RecognitionType
#define SOAP_TYPE_ns1__RecognitionType (1326)
/* ns1:RecognitionType */
enum ns1__RecognitionType { ns1__RecognitionType__pt_x003aCard = 0, ns1__RecognitionType__pt_x003aPIN = 1, ns1__RecognitionType__pt_x003aFingerprint = 2, ns1__RecognitionType__pt_x003aFace = 3, ns1__RecognitionType__pt_x003aIris = 4, ns1__RecognitionType__pt_x003aVein = 5, ns1__RecognitionType__pt_x003aPalm = 6, ns1__RecognitionType__pt_x003aRetina = 7, ns1__RecognitionType__pt_x003aLicensePlate = 8, ns1__RecognitionType__pt_x003aREX = 9 };
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (9)
typedef struct soap_dom_element xsd__anyType;
#endif
#ifndef SOAP_TYPE_xsd__anyAttribute
#define SOAP_TYPE_xsd__anyAttribute (11)
typedef struct soap_dom_attribute xsd__anyAttribute;
#endif
#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (136)
typedef LONG64 xsd__duration;
#endif
#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (131)
typedef std::string xsd__QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif





#ifndef SOAP_TYPE_wsa__EndpointReferenceType
#define SOAP_TYPE_wsa__EndpointReferenceType (13)
/* wsa:EndpointReferenceType */
struct wsa__EndpointReferenceType
{
public:
	char *Address;	/* required element of type xsd:string */
	struct wsa__ReferencePropertiesType *ReferenceProperties;	/* optional element of type wsa:ReferencePropertiesType */
	struct wsa__ReferenceParametersType *ReferenceParameters;	/* optional element of type wsa:ReferenceParametersType */
	char **PortType;	/* optional element of type xsd:QName */
	struct wsa__ServiceNameType *ServiceName;	/* optional element of type wsa:ServiceNameType */
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 13; } /* = unique type id SOAP_TYPE_wsa__EndpointReferenceType */
};
typedef struct wsa__EndpointReferenceType wsa__EndpointReferenceType;
#endif

#ifndef SOAP_TYPE_wsa__ReferencePropertiesType
#define SOAP_TYPE_wsa__ReferencePropertiesType (14)
/* wsa:ReferencePropertiesType */
struct wsa__ReferencePropertiesType
{
public:
	int __size;	/* sequence of elements <-any> */
	char **__any;
public:
	int soap_type() const { return 14; } /* = unique type id SOAP_TYPE_wsa__ReferencePropertiesType */
};
typedef struct wsa__ReferencePropertiesType wsa__ReferencePropertiesType;
#endif

#ifndef SOAP_TYPE_wsa__ReferenceParametersType
#define SOAP_TYPE_wsa__ReferenceParametersType (15)
/* wsa:ReferenceParametersType */
struct wsa__ReferenceParametersType
{
public:
	int __size;	/* sequence of elements <-any> */
	char **__any;
public:
	int soap_type() const { return 15; } /* = unique type id SOAP_TYPE_wsa__ReferenceParametersType */
};
typedef struct wsa__ReferenceParametersType wsa__ReferenceParametersType;
#endif

#ifndef SOAP_TYPE_wsa__ServiceNameType
#define SOAP_TYPE_wsa__ServiceNameType (16)
/* Primitive wsa:ServiceNameType schema type: */
struct wsa__ServiceNameType
{
public:
	char *__item;
	char *PortName;	/* optional attribute of type xsd:string */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 16; } /* = unique type id SOAP_TYPE_wsa__ServiceNameType */
};
typedef struct wsa__ServiceNameType wsa__ServiceNameType;
#endif

#ifndef SOAP_TYPE_wsa__Relationship
#define SOAP_TYPE_wsa__Relationship (17)
/* Primitive wsa:Relationship schema type: */
struct wsa__Relationship
{
public:
	char *__item;
	char *RelationshipType;	/* optional attribute of type xsd:QName */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 17; } /* = unique type id SOAP_TYPE_wsa__Relationship */
};
typedef struct wsa__Relationship wsa__Relationship;
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (35)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	char *wsa__MessageID;	/* optional element of type wsa:MessageID */
	struct wsa__Relationship *wsa__RelatesTo;	/* optional element of type wsa:RelatesTo */
	struct wsa__EndpointReferenceType *wsa__From;	/* optional element of type wsa:From */
	struct wsa__EndpointReferenceType *wsa__ReplyTo;	/* mustUnderstand */
	struct wsa__EndpointReferenceType *wsa__FaultTo;	/* mustUnderstand */
	char *wsa__To;	/* mustUnderstand */
	char *wsa__Action;	/* mustUnderstand */
	struct wsdd__AppSequenceType *wsdd__AppSequence;	/* optional element of type wsdd:AppSequenceType */
	char *wsa5__MessageID;	/* optional element of type wsa5:MessageID */
	struct wsa5__RelatesToType *wsa5__RelatesTo;	/* optional element of type wsa5:RelatesTo */
	struct wsa5__EndpointReferenceType *wsa5__From;	/* optional element of type wsa5:From */
	struct wsa5__EndpointReferenceType *wsa5__ReplyTo;	/* mustUnderstand */
	struct wsa5__EndpointReferenceType *wsa5__FaultTo;	/* mustUnderstand */
	char *wsa5__To;	/* mustUnderstand */
	char *wsa5__Action;	/* mustUnderstand */
	struct chan__ChannelInstanceType *chan__ChannelInstance;	/* optional element of type chan:ChannelInstanceType */
public:
	int soap_type() const { return 35; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (42)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 42; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (44)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 44; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (48)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 48; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

#ifndef SOAP_TYPE_wsdd__HelloType
#define SOAP_TYPE_wsdd__HelloType (49)
/* wsdd:HelloType */
struct wsdd__HelloType
{
public:
	struct wsa__EndpointReferenceType wsa__EndpointReference;	/* required element of type wsa:EndpointReference */
	char *Types;	/* optional element of type xsd:QName */
	struct wsdd__ScopesType *Scopes;	/* optional element of type wsdd:ScopesType */
	char *XAddrs;	/* optional element of type wsdd:UriListType */
	unsigned int MetadataVersion;	/* required element of type xsd:unsignedInt */
public:
	int soap_type() const { return 49; } /* = unique type id SOAP_TYPE_wsdd__HelloType */
};
typedef struct wsdd__HelloType wsdd__HelloType;
#endif

#ifndef SOAP_TYPE_wsdd__ByeType
#define SOAP_TYPE_wsdd__ByeType (50)
/* wsdd:ByeType */
struct wsdd__ByeType
{
public:
	struct wsa__EndpointReferenceType wsa__EndpointReference;	/* required element of type wsa:EndpointReference */
	char *Types;	/* optional element of type xsd:QName */
	struct wsdd__ScopesType *Scopes;	/* optional element of type wsdd:ScopesType */
	char *XAddrs;	/* optional element of type wsdd:UriListType */
	unsigned int *MetadataVersion;	/* optional element of type xsd:unsignedInt */
public:
	int soap_type() const { return 50; } /* = unique type id SOAP_TYPE_wsdd__ByeType */
};
typedef struct wsdd__ByeType wsdd__ByeType;
#endif

#ifndef SOAP_TYPE_wsdd__ProbeType
#define SOAP_TYPE_wsdd__ProbeType (51)
/* wsdd:ProbeType */
struct wsdd__ProbeType
{
public:
	char *Types;	/* optional element of type xsd:QName */
	struct wsdd__ScopesType *Scopes;	/* optional element of type wsdd:ScopesType */
public:
	int soap_type() const { return 51; } /* = unique type id SOAP_TYPE_wsdd__ProbeType */
};
typedef struct wsdd__ProbeType wsdd__ProbeType;
#endif

#ifndef SOAP_TYPE_wsdd__ProbeMatchesType
#define SOAP_TYPE_wsdd__ProbeMatchesType (52)
/* wsdd:ProbeMatchesType */
struct wsdd__ProbeMatchesType
{
public:
	int __sizeProbeMatch;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* sequence of elements <ProbeMatch> */
	struct wsdd__ProbeMatchType *ProbeMatch;	/* optional element of type wsdd:ProbeMatchType */
public:
	int soap_type() const { return 52; } /* = unique type id SOAP_TYPE_wsdd__ProbeMatchesType */
};
typedef struct wsdd__ProbeMatchesType wsdd__ProbeMatchesType;
#endif

#ifndef SOAP_TYPE_wsdd__ProbeMatchType
#define SOAP_TYPE_wsdd__ProbeMatchType (53)
/* wsdd:ProbeMatchType */
struct wsdd__ProbeMatchType
{
public:
	struct wsa__EndpointReferenceType wsa__EndpointReference;	/* required element of type wsa:EndpointReference */
	char *Types;	/* optional element of type xsd:QName */
	struct wsdd__ScopesType *Scopes;	/* optional element of type wsdd:ScopesType */
	char *XAddrs;	/* optional element of type wsdd:UriListType */
	unsigned int MetadataVersion;	/* required element of type xsd:unsignedInt */
public:
	int soap_type() const { return 53; } /* = unique type id SOAP_TYPE_wsdd__ProbeMatchType */
};
typedef struct wsdd__ProbeMatchType wsdd__ProbeMatchType;
#endif

#ifndef SOAP_TYPE_wsdd__ResolveType
#define SOAP_TYPE_wsdd__ResolveType (54)
/* wsdd:ResolveType */
struct wsdd__ResolveType
{
public:
	struct wsa__EndpointReferenceType wsa__EndpointReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type wsa:EndpointReference */
public:
	int soap_type() const { return 54; } /* = unique type id SOAP_TYPE_wsdd__ResolveType */
};
typedef struct wsdd__ResolveType wsdd__ResolveType;
#endif

#ifndef SOAP_TYPE_wsdd__ResolveMatchesType
#define SOAP_TYPE_wsdd__ResolveMatchesType (55)
/* wsdd:ResolveMatchesType */
struct wsdd__ResolveMatchesType
{
public:
	struct wsdd__ResolveMatchType *ResolveMatch;	/* optional element of type wsdd:ResolveMatchType */
public:
	int soap_type() const { return 55; } /* = unique type id SOAP_TYPE_wsdd__ResolveMatchesType */
};
typedef struct wsdd__ResolveMatchesType wsdd__ResolveMatchesType;
#endif

#ifndef SOAP_TYPE_wsdd__ResolveMatchType
#define SOAP_TYPE_wsdd__ResolveMatchType (56)
/* wsdd:ResolveMatchType */
struct wsdd__ResolveMatchType
{
public:
	struct wsa__EndpointReferenceType wsa__EndpointReference;	/* required element of type wsa:EndpointReference */
	char *Types;	/* optional element of type xsd:QName */
	struct wsdd__ScopesType *Scopes;	/* optional element of type wsdd:ScopesType */
	char *XAddrs;	/* optional element of type wsdd:UriListType */
	unsigned int MetadataVersion;	/* required element of type xsd:unsignedInt */
public:
	int soap_type() const { return 56; } /* = unique type id SOAP_TYPE_wsdd__ResolveMatchType */
};
typedef struct wsdd__ResolveMatchType wsdd__ResolveMatchType;
#endif

#ifndef SOAP_TYPE_wsdd__SecurityType
#define SOAP_TYPE_wsdd__SecurityType (58)
/* wsdd:SecurityType */
struct wsdd__SecurityType
{
public:
	struct wsdd__SigType *Sig;	/* optional element of type wsdd:SigType */
public:
	int soap_type() const { return 58; } /* = unique type id SOAP_TYPE_wsdd__SecurityType */
};
typedef struct wsdd__SecurityType wsdd__SecurityType;
#endif

#ifndef SOAP_TYPE_wsdd__SigType
#define SOAP_TYPE_wsdd__SigType (59)
/* wsdd:SigType */
struct wsdd__SigType
{
public:
	char *Scheme;	/* required attribute of type xsd:string */
	char *KeyId;	/* optional attribute of type xsd:string */
	char *Refs;	/* required attribute of type xsd:string */
	char *Sig;	/* required attribute of type xsd:string */
public:
	int soap_type() const { return 59; } /* = unique type id SOAP_TYPE_wsdd__SigType */
};
typedef struct wsdd__SigType wsdd__SigType;
#endif

#ifndef SOAP_TYPE_wsdd__ScopesType
#define SOAP_TYPE_wsdd__ScopesType (57)
/* Primitive wsdd:ScopesType schema type: */
struct wsdd__ScopesType
{
public:
	char *__item;
	char *MatchBy;	/* optional attribute of type xsd:string */
public:
	int soap_type() const { return 57; } /* = unique type id SOAP_TYPE_wsdd__ScopesType */
};
typedef struct wsdd__ScopesType wsdd__ScopesType;
#endif

#ifndef SOAP_TYPE_wsdd__AppSequenceType
#define SOAP_TYPE_wsdd__AppSequenceType (60)
/* wsdd:AppSequenceType */
struct wsdd__AppSequenceType
{
public:
	unsigned int InstanceId;	/* required attribute of type xsd:unsignedInt */
	char *SequenceId;	/* optional attribute of type xsd:string */
	unsigned int MessageNumber;	/* required attribute of type xsd:unsignedInt */
public:
	int soap_type() const { return 60; } /* = unique type id SOAP_TYPE_wsdd__AppSequenceType */
};
typedef struct wsdd__AppSequenceType wsdd__AppSequenceType;
#endif

#ifndef SOAP_TYPE___wsdd__Hello
#define SOAP_TYPE___wsdd__Hello (73)
/* Operation wrapper: */
struct __wsdd__Hello
{
public:
	struct wsdd__HelloType *wsdd__Hello;	/* optional element of type wsdd:HelloType */
public:
	int soap_type() const { return 73; } /* = unique type id SOAP_TYPE___wsdd__Hello */
};
#endif

#ifndef SOAP_TYPE___wsdd__Bye
#define SOAP_TYPE___wsdd__Bye (76)
/* Operation wrapper: */
struct __wsdd__Bye
{
public:
	struct wsdd__ByeType *wsdd__Bye;	/* optional element of type wsdd:ByeType */
public:
	int soap_type() const { return 76; } /* = unique type id SOAP_TYPE___wsdd__Bye */
};
#endif

#ifndef SOAP_TYPE___wsdd__Probe
#define SOAP_TYPE___wsdd__Probe (79)
/* Operation wrapper: */
struct __wsdd__Probe
{
public:
	struct wsdd__ProbeType *wsdd__Probe;	/* optional element of type wsdd:ProbeType */
public:
	int soap_type() const { return 79; } /* = unique type id SOAP_TYPE___wsdd__Probe */
};
#endif

#ifndef SOAP_TYPE___wsdd__ProbeMatches
#define SOAP_TYPE___wsdd__ProbeMatches (82)
/* Operation wrapper: */
struct __wsdd__ProbeMatches
{
public:
	struct wsdd__ProbeMatchesType *wsdd__ProbeMatches;	/* optional element of type wsdd:ProbeMatchesType */
public:
	int soap_type() const { return 82; } /* = unique type id SOAP_TYPE___wsdd__ProbeMatches */
};
#endif

#ifndef SOAP_TYPE___wsdd__Resolve
#define SOAP_TYPE___wsdd__Resolve (85)
/* Operation wrapper: */
struct __wsdd__Resolve
{
public:
	struct wsdd__ResolveType *wsdd__Resolve;	/* optional element of type wsdd:ResolveType */
public:
	int soap_type() const { return 85; } /* = unique type id SOAP_TYPE___wsdd__Resolve */
};
#endif

#ifndef SOAP_TYPE___wsdd__ResolveMatches
#define SOAP_TYPE___wsdd__ResolveMatches (88)
/* Operation wrapper: */
struct __wsdd__ResolveMatches
{
public:
	struct wsdd__ResolveMatchesType *wsdd__ResolveMatches;	/* optional element of type wsdd:ResolveMatchesType */
public:
	int soap_type() const { return 88; } /* = unique type id SOAP_TYPE___wsdd__ResolveMatches */
};
#endif

#ifndef SOAP_TYPE__xop__Include
#define SOAP_TYPE__xop__Include (89)
/* Base64 schema type: */
struct _xop__Include
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 89; } /* = unique type id SOAP_TYPE__xop__Include */
};
typedef struct _xop__Include _xop__Include;
#endif

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType
#define SOAP_TYPE_wsa5__EndpointReferenceType (92)
/* wsa5:EndpointReferenceType */
struct wsa5__EndpointReferenceType
{
public:
	char *Address;	/* required element of type xsd:string */
	struct wsa5__ReferenceParametersType *ReferenceParameters;	/* optional element of type wsa5:ReferenceParametersType */
	struct wsa5__MetadataType *Metadata;	/* optional element of type wsa5:MetadataType */
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 92; } /* = unique type id SOAP_TYPE_wsa5__EndpointReferenceType */
};
typedef struct wsa5__EndpointReferenceType wsa5__EndpointReferenceType;
#endif

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType
#define SOAP_TYPE_wsa5__ReferenceParametersType (93)
/* wsa5:ReferenceParametersType */
struct wsa5__ReferenceParametersType
{
public:
	int *chan__ChannelInstance;	/* optional element of type xsd:int */
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 93; } /* = unique type id SOAP_TYPE_wsa5__ReferenceParametersType */
};
typedef struct wsa5__ReferenceParametersType wsa5__ReferenceParametersType;
#endif

#ifndef SOAP_TYPE_wsa5__MetadataType
#define SOAP_TYPE_wsa5__MetadataType (94)
/* wsa5:MetadataType */
struct wsa5__MetadataType
{
public:
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 94; } /* = unique type id SOAP_TYPE_wsa5__MetadataType */
};
typedef struct wsa5__MetadataType wsa5__MetadataType;
#endif

#ifndef SOAP_TYPE_wsa5__ProblemActionType
#define SOAP_TYPE_wsa5__ProblemActionType (96)
/* wsa5:ProblemActionType */
struct wsa5__ProblemActionType
{
public:
	char *Action;	/* optional element of type xsd:string */
	char *SoapAction;	/* optional element of type xsd:string */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 96; } /* = unique type id SOAP_TYPE_wsa5__ProblemActionType */
};
typedef struct wsa5__ProblemActionType wsa5__ProblemActionType;
#endif

#ifndef SOAP_TYPE_wsa5__RelatesToType
#define SOAP_TYPE_wsa5__RelatesToType (95)
/* Primitive wsa5:RelatesToType schema type: */
struct wsa5__RelatesToType
{
public:
	char *__item;
	char *RelationshipType;	/* optional attribute of type wsa5:RelationshipTypeOpenEnum */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 95; } /* = unique type id SOAP_TYPE_wsa5__RelatesToType */
};
typedef struct wsa5__RelatesToType wsa5__RelatesToType;
#endif

#ifndef SOAP_TYPE_chan__ChannelInstanceType
#define SOAP_TYPE_chan__ChannelInstanceType (120)
/* Primitive chan:ChannelInstanceType schema type: */
struct chan__ChannelInstanceType
{
public:
	int __item;
	enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter;	/* optional attribute of type wsa5:IsReferenceParameter */
public:
	int soap_type() const { return 120; } /* = unique type id SOAP_TYPE_chan__ChannelInstanceType */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault__xsmart
#define SOAP_TYPE_SOAP_ENV__Fault__xsmart (127)
/* SOAP-ENV:Fault--xsmart */
struct SOAP_ENV__Fault__xsmart
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 127; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault__xsmart */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Envelope
#define SOAP_TYPE_SOAP_ENV__Envelope (128)
/* SOAP-ENV:Envelope */
struct SOAP_ENV__Envelope
{
public:
	struct SOAP_ENV__Header *SOAP_ENV__Header;	/* optional element of type SOAP-ENV:Header */
	char *SOAP_ENV__Body;	/* optional element of type xsd:anyType */
public:
	int soap_type() const { return 128; } /* = unique type id SOAP_TYPE_SOAP_ENV__Envelope */
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (132)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 132; } /* = unique type id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (137)
/* hexBinary schema type: */
class SOAP_CMAC xsd__hexBinary
{
public:
	unsigned char *__ptr;
	int __size;
public:
	virtual int soap_type() const { return 137; } /* = unique type id SOAP_TYPE_xsd__hexBinary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__hexBinary() { xsd__hexBinary::soap_default(NULL); }
	virtual ~xsd__hexBinary() { }
};
#endif

#ifndef SOAP_TYPE_tptz__Capabilities
#define SOAP_TYPE_tptz__Capabilities (145)
/* tptz:Capabilities */
class SOAP_CMAC tptz__Capabilities
{
public:
	std::vector<struct soap_dom_element >__any;
	bool *EFlip;	/* optional attribute */
	bool *Reverse;	/* optional attribute */
	bool *GetCompatibleConfigurations;	/* optional attribute */
	bool *MoveStatus;	/* optional attribute */
	bool *StatusPosition;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 145; } /* = unique type id SOAP_TYPE_tptz__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tptz__Capabilities() { tptz__Capabilities::soap_default(NULL); }
	virtual ~tptz__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetServiceCapabilities
#define SOAP_TYPE__tptz__GetServiceCapabilities (146)
/* tptz:GetServiceCapabilities */
class SOAP_CMAC _tptz__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 146; } /* = unique type id SOAP_TYPE__tptz__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetServiceCapabilities() { _tptz__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tptz__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tptz__GetServiceCapabilitiesResponse (147)
/* tptz:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tptz__GetServiceCapabilitiesResponse
{
public:
	tptz__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tptz:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 147; } /* = unique type id SOAP_TYPE__tptz__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetServiceCapabilitiesResponse() { _tptz__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tptz__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetNodes
#define SOAP_TYPE__tptz__GetNodes (148)
/* tptz:GetNodes */
class SOAP_CMAC _tptz__GetNodes
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 148; } /* = unique type id SOAP_TYPE__tptz__GetNodes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetNodes() { _tptz__GetNodes::soap_default(NULL); }
	virtual ~_tptz__GetNodes() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetNodesResponse
#define SOAP_TYPE__tptz__GetNodesResponse (149)
/* tptz:GetNodesResponse */
class SOAP_CMAC _tptz__GetNodesResponse
{
public:
	std::vector<class tt__PTZNode * >PTZNode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:PTZNode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 149; } /* = unique type id SOAP_TYPE__tptz__GetNodesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetNodesResponse() { _tptz__GetNodesResponse::soap_default(NULL); }
	virtual ~_tptz__GetNodesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetNode
#define SOAP_TYPE__tptz__GetNode (150)
/* tptz:GetNode */
class SOAP_CMAC _tptz__GetNode
{
public:
	std::string NodeToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 150; } /* = unique type id SOAP_TYPE__tptz__GetNode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetNode() { _tptz__GetNode::soap_default(NULL); }
	virtual ~_tptz__GetNode() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetNodeResponse
#define SOAP_TYPE__tptz__GetNodeResponse (151)
/* tptz:GetNodeResponse */
class SOAP_CMAC _tptz__GetNodeResponse
{
public:
	tt__PTZNode *PTZNode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PTZNode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 151; } /* = unique type id SOAP_TYPE__tptz__GetNodeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetNodeResponse() { _tptz__GetNodeResponse::soap_default(NULL); }
	virtual ~_tptz__GetNodeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurations
#define SOAP_TYPE__tptz__GetConfigurations (152)
/* tptz:GetConfigurations */
class SOAP_CMAC _tptz__GetConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 152; } /* = unique type id SOAP_TYPE__tptz__GetConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfigurations() { _tptz__GetConfigurations::soap_default(NULL); }
	virtual ~_tptz__GetConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationsResponse
#define SOAP_TYPE__tptz__GetConfigurationsResponse (153)
/* tptz:GetConfigurationsResponse */
class SOAP_CMAC _tptz__GetConfigurationsResponse
{
public:
	std::vector<class tt__PTZConfiguration * >PTZConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:PTZConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 153; } /* = unique type id SOAP_TYPE__tptz__GetConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfigurationsResponse() { _tptz__GetConfigurationsResponse::soap_default(NULL); }
	virtual ~_tptz__GetConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfiguration
#define SOAP_TYPE__tptz__GetConfiguration (154)
/* tptz:GetConfiguration */
class SOAP_CMAC _tptz__GetConfiguration
{
public:
	std::string PTZConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 154; } /* = unique type id SOAP_TYPE__tptz__GetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfiguration() { _tptz__GetConfiguration::soap_default(NULL); }
	virtual ~_tptz__GetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationResponse
#define SOAP_TYPE__tptz__GetConfigurationResponse (155)
/* tptz:GetConfigurationResponse */
class SOAP_CMAC _tptz__GetConfigurationResponse
{
public:
	tt__PTZConfiguration *PTZConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PTZConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 155; } /* = unique type id SOAP_TYPE__tptz__GetConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfigurationResponse() { _tptz__GetConfigurationResponse::soap_default(NULL); }
	virtual ~_tptz__GetConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetConfiguration
#define SOAP_TYPE__tptz__SetConfiguration (156)
/* tptz:SetConfiguration */
class SOAP_CMAC _tptz__SetConfiguration
{
public:
	tt__PTZConfiguration *PTZConfiguration;	/* required element of type tt:PTZConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 156; } /* = unique type id SOAP_TYPE__tptz__SetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetConfiguration() { _tptz__SetConfiguration::soap_default(NULL); }
	virtual ~_tptz__SetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE___tptz__SetConfigurationResponse_sequence
#define SOAP_TYPE___tptz__SetConfigurationResponse_sequence (1340)
/* Operation wrapper: */
class SOAP_CMAC __tptz__SetConfigurationResponse_sequence
{
public:
	virtual int soap_type() const { return 1340; } /* = unique type id SOAP_TYPE___tptz__SetConfigurationResponse_sequence */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __tptz__SetConfigurationResponse_sequence() { __tptz__SetConfigurationResponse_sequence::soap_default(NULL); }
	virtual ~__tptz__SetConfigurationResponse_sequence() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetConfigurationResponse
#define SOAP_TYPE__tptz__SetConfigurationResponse (157)
/* tptz:SetConfigurationResponse */
class SOAP_CMAC _tptz__SetConfigurationResponse
{
public:
	std::vector<__tptz__SetConfigurationResponse_sequence >__SetConfigurationResponse_sequence;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 157; } /* = unique type id SOAP_TYPE__tptz__SetConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetConfigurationResponse() { _tptz__SetConfigurationResponse::soap_default(NULL); }
	virtual ~_tptz__SetConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationOptions
#define SOAP_TYPE__tptz__GetConfigurationOptions (158)
/* tptz:GetConfigurationOptions */
class SOAP_CMAC _tptz__GetConfigurationOptions
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 158; } /* = unique type id SOAP_TYPE__tptz__GetConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfigurationOptions() { _tptz__GetConfigurationOptions::soap_default(NULL); }
	virtual ~_tptz__GetConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetConfigurationOptionsResponse
#define SOAP_TYPE__tptz__GetConfigurationOptionsResponse (159)
/* tptz:GetConfigurationOptionsResponse */
class SOAP_CMAC _tptz__GetConfigurationOptionsResponse
{
public:
	class tt__PTZConfigurationOptions *PTZConfigurationOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PTZConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 159; } /* = unique type id SOAP_TYPE__tptz__GetConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetConfigurationOptionsResponse() { _tptz__GetConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tptz__GetConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommand
#define SOAP_TYPE__tptz__SendAuxiliaryCommand (160)
/* tptz:SendAuxiliaryCommand */
class SOAP_CMAC _tptz__SendAuxiliaryCommand
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string AuxiliaryData;	/* required element of type tt:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 160; } /* = unique type id SOAP_TYPE__tptz__SendAuxiliaryCommand */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SendAuxiliaryCommand() { _tptz__SendAuxiliaryCommand::soap_default(NULL); }
	virtual ~_tptz__SendAuxiliaryCommand() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SendAuxiliaryCommandResponse
#define SOAP_TYPE__tptz__SendAuxiliaryCommandResponse (161)
/* tptz:SendAuxiliaryCommandResponse */
class SOAP_CMAC _tptz__SendAuxiliaryCommandResponse
{
public:
	std::string AuxiliaryResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 161; } /* = unique type id SOAP_TYPE__tptz__SendAuxiliaryCommandResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SendAuxiliaryCommandResponse() { _tptz__SendAuxiliaryCommandResponse::soap_default(NULL); }
	virtual ~_tptz__SendAuxiliaryCommandResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresets
#define SOAP_TYPE__tptz__GetPresets (162)
/* tptz:GetPresets */
class SOAP_CMAC _tptz__GetPresets
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 162; } /* = unique type id SOAP_TYPE__tptz__GetPresets */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresets() { _tptz__GetPresets::soap_default(NULL); }
	virtual ~_tptz__GetPresets() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetsResponse
#define SOAP_TYPE__tptz__GetPresetsResponse (163)
/* tptz:GetPresetsResponse */
class SOAP_CMAC _tptz__GetPresetsResponse
{
public:
	std::vector<class tt__PTZPreset * >Preset;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:PTZPreset */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 163; } /* = unique type id SOAP_TYPE__tptz__GetPresetsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetsResponse() { _tptz__GetPresetsResponse::soap_default(NULL); }
	virtual ~_tptz__GetPresetsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetPreset
#define SOAP_TYPE__tptz__SetPreset (164)
/* tptz:SetPreset */
class SOAP_CMAC _tptz__SetPreset
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string *PresetName;	/* optional element of type xsd:string */
	std::string *PresetToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 164; } /* = unique type id SOAP_TYPE__tptz__SetPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetPreset() { _tptz__SetPreset::soap_default(NULL); }
	virtual ~_tptz__SetPreset() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetPresetResponse
#define SOAP_TYPE__tptz__SetPresetResponse (165)
/* tptz:SetPresetResponse */
class SOAP_CMAC _tptz__SetPresetResponse
{
public:
	std::string PresetToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 165; } /* = unique type id SOAP_TYPE__tptz__SetPresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetPresetResponse() { _tptz__SetPresetResponse::soap_default(NULL); }
	virtual ~_tptz__SetPresetResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RemovePreset
#define SOAP_TYPE__tptz__RemovePreset (166)
/* tptz:RemovePreset */
class SOAP_CMAC _tptz__RemovePreset
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string PresetToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 166; } /* = unique type id SOAP_TYPE__tptz__RemovePreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RemovePreset() { _tptz__RemovePreset::soap_default(NULL); }
	virtual ~_tptz__RemovePreset() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetResponse
#define SOAP_TYPE__tptz__RemovePresetResponse (167)
/* tptz:RemovePresetResponse */
class SOAP_CMAC _tptz__RemovePresetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 167; } /* = unique type id SOAP_TYPE__tptz__RemovePresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RemovePresetResponse() { _tptz__RemovePresetResponse::soap_default(NULL); }
	virtual ~_tptz__RemovePresetResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GotoPreset
#define SOAP_TYPE__tptz__GotoPreset (168)
/* tptz:GotoPreset */
class SOAP_CMAC _tptz__GotoPreset
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string PresetToken;	/* required element of type tt:ReferenceToken */
	class tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 168; } /* = unique type id SOAP_TYPE__tptz__GotoPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GotoPreset() { _tptz__GotoPreset::soap_default(NULL); }
	virtual ~_tptz__GotoPreset() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GotoPresetResponse
#define SOAP_TYPE__tptz__GotoPresetResponse (169)
/* tptz:GotoPresetResponse */
class SOAP_CMAC _tptz__GotoPresetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 169; } /* = unique type id SOAP_TYPE__tptz__GotoPresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GotoPresetResponse() { _tptz__GotoPresetResponse::soap_default(NULL); }
	virtual ~_tptz__GotoPresetResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetStatus
#define SOAP_TYPE__tptz__GetStatus (170)
/* tptz:GetStatus */
class SOAP_CMAC _tptz__GetStatus
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 170; } /* = unique type id SOAP_TYPE__tptz__GetStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetStatus() { _tptz__GetStatus::soap_default(NULL); }
	virtual ~_tptz__GetStatus() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetStatusResponse
#define SOAP_TYPE__tptz__GetStatusResponse (171)
/* tptz:GetStatusResponse */
class SOAP_CMAC _tptz__GetStatusResponse
{
public:
	class tt__PTZStatus *PTZStatus;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PTZStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 171; } /* = unique type id SOAP_TYPE__tptz__GetStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetStatusResponse() { _tptz__GetStatusResponse::soap_default(NULL); }
	virtual ~_tptz__GetStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GotoHomePosition
#define SOAP_TYPE__tptz__GotoHomePosition (172)
/* tptz:GotoHomePosition */
class SOAP_CMAC _tptz__GotoHomePosition
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 172; } /* = unique type id SOAP_TYPE__tptz__GotoHomePosition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GotoHomePosition() { _tptz__GotoHomePosition::soap_default(NULL); }
	virtual ~_tptz__GotoHomePosition() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GotoHomePositionResponse
#define SOAP_TYPE__tptz__GotoHomePositionResponse (173)
/* tptz:GotoHomePositionResponse */
class SOAP_CMAC _tptz__GotoHomePositionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 173; } /* = unique type id SOAP_TYPE__tptz__GotoHomePositionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GotoHomePositionResponse() { _tptz__GotoHomePositionResponse::soap_default(NULL); }
	virtual ~_tptz__GotoHomePositionResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetHomePosition
#define SOAP_TYPE__tptz__SetHomePosition (174)
/* tptz:SetHomePosition */
class SOAP_CMAC _tptz__SetHomePosition
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 174; } /* = unique type id SOAP_TYPE__tptz__SetHomePosition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetHomePosition() { _tptz__SetHomePosition::soap_default(NULL); }
	virtual ~_tptz__SetHomePosition() { }
};
#endif

#ifndef SOAP_TYPE__tptz__SetHomePositionResponse
#define SOAP_TYPE__tptz__SetHomePositionResponse (175)
/* tptz:SetHomePositionResponse */
class SOAP_CMAC _tptz__SetHomePositionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 175; } /* = unique type id SOAP_TYPE__tptz__SetHomePositionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__SetHomePositionResponse() { _tptz__SetHomePositionResponse::soap_default(NULL); }
	virtual ~_tptz__SetHomePositionResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__ContinuousMove
#define SOAP_TYPE__tptz__ContinuousMove (176)
/* tptz:ContinuousMove */
class SOAP_CMAC _tptz__ContinuousMove
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	tt__PTZSpeed *Velocity;	/* required element of type tt:PTZSpeed */
	LONG64 *Timeout;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 176; } /* = unique type id SOAP_TYPE__tptz__ContinuousMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__ContinuousMove() { _tptz__ContinuousMove::soap_default(NULL); }
	virtual ~_tptz__ContinuousMove() { }
};
#endif

#ifndef SOAP_TYPE__tptz__ContinuousMoveResponse
#define SOAP_TYPE__tptz__ContinuousMoveResponse (177)
/* tptz:ContinuousMoveResponse */
class SOAP_CMAC _tptz__ContinuousMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 177; } /* = unique type id SOAP_TYPE__tptz__ContinuousMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__ContinuousMoveResponse() { _tptz__ContinuousMoveResponse::soap_default(NULL); }
	virtual ~_tptz__ContinuousMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RelativeMove
#define SOAP_TYPE__tptz__RelativeMove (178)
/* tptz:RelativeMove */
class SOAP_CMAC _tptz__RelativeMove
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	class tt__PTZVector *Translation;	/* required element of type tt:PTZVector */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 178; } /* = unique type id SOAP_TYPE__tptz__RelativeMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RelativeMove() { _tptz__RelativeMove::soap_default(NULL); }
	virtual ~_tptz__RelativeMove() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RelativeMoveResponse
#define SOAP_TYPE__tptz__RelativeMoveResponse (179)
/* tptz:RelativeMoveResponse */
class SOAP_CMAC _tptz__RelativeMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 179; } /* = unique type id SOAP_TYPE__tptz__RelativeMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RelativeMoveResponse() { _tptz__RelativeMoveResponse::soap_default(NULL); }
	virtual ~_tptz__RelativeMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__AbsoluteMove
#define SOAP_TYPE__tptz__AbsoluteMove (180)
/* tptz:AbsoluteMove */
class SOAP_CMAC _tptz__AbsoluteMove
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	tt__PTZVector *Position;	/* required element of type tt:PTZVector */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 180; } /* = unique type id SOAP_TYPE__tptz__AbsoluteMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__AbsoluteMove() { _tptz__AbsoluteMove::soap_default(NULL); }
	virtual ~_tptz__AbsoluteMove() { }
};
#endif

#ifndef SOAP_TYPE__tptz__AbsoluteMoveResponse
#define SOAP_TYPE__tptz__AbsoluteMoveResponse (181)
/* tptz:AbsoluteMoveResponse */
class SOAP_CMAC _tptz__AbsoluteMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 181; } /* = unique type id SOAP_TYPE__tptz__AbsoluteMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__AbsoluteMoveResponse() { _tptz__AbsoluteMoveResponse::soap_default(NULL); }
	virtual ~_tptz__AbsoluteMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GeoMove
#define SOAP_TYPE__tptz__GeoMove (182)
/* tptz:GeoMove */
class SOAP_CMAC _tptz__GeoMove
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	class tt__GeoLocation *Target;	/* required element of type tt:GeoLocation */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	float *AreaHeight;	/* optional element of type xsd:float */
	float *AreaWidth;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 182; } /* = unique type id SOAP_TYPE__tptz__GeoMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GeoMove() { _tptz__GeoMove::soap_default(NULL); }
	virtual ~_tptz__GeoMove() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GeoMoveResponse
#define SOAP_TYPE__tptz__GeoMoveResponse (183)
/* tptz:GeoMoveResponse */
class SOAP_CMAC _tptz__GeoMoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 183; } /* = unique type id SOAP_TYPE__tptz__GeoMoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GeoMoveResponse() { _tptz__GeoMoveResponse::soap_default(NULL); }
	virtual ~_tptz__GeoMoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__Stop
#define SOAP_TYPE__tptz__Stop (184)
/* tptz:Stop */
class SOAP_CMAC _tptz__Stop
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	bool *PanTilt;	/* optional element of type xsd:boolean */
	bool *Zoom;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 184; } /* = unique type id SOAP_TYPE__tptz__Stop */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__Stop() { _tptz__Stop::soap_default(NULL); }
	virtual ~_tptz__Stop() { }
};
#endif

#ifndef SOAP_TYPE__tptz__StopResponse
#define SOAP_TYPE__tptz__StopResponse (185)
/* tptz:StopResponse */
class SOAP_CMAC _tptz__StopResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 185; } /* = unique type id SOAP_TYPE__tptz__StopResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__StopResponse() { _tptz__StopResponse::soap_default(NULL); }
	virtual ~_tptz__StopResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTours
#define SOAP_TYPE__tptz__GetPresetTours (186)
/* tptz:GetPresetTours */
class SOAP_CMAC _tptz__GetPresetTours
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 186; } /* = unique type id SOAP_TYPE__tptz__GetPresetTours */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetTours() { _tptz__GetPresetTours::soap_default(NULL); }
	virtual ~_tptz__GetPresetTours() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetToursResponse
#define SOAP_TYPE__tptz__GetPresetToursResponse (187)
/* tptz:GetPresetToursResponse */
class SOAP_CMAC _tptz__GetPresetToursResponse
{
public:
	std::vector<class tt__PresetTour * >PresetTour;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:PresetTour */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 187; } /* = unique type id SOAP_TYPE__tptz__GetPresetToursResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetToursResponse() { _tptz__GetPresetToursResponse::soap_default(NULL); }
	virtual ~_tptz__GetPresetToursResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTour
#define SOAP_TYPE__tptz__GetPresetTour (188)
/* tptz:GetPresetTour */
class SOAP_CMAC _tptz__GetPresetTour
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string PresetTourToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 188; } /* = unique type id SOAP_TYPE__tptz__GetPresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetTour() { _tptz__GetPresetTour::soap_default(NULL); }
	virtual ~_tptz__GetPresetTour() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourResponse
#define SOAP_TYPE__tptz__GetPresetTourResponse (189)
/* tptz:GetPresetTourResponse */
class SOAP_CMAC _tptz__GetPresetTourResponse
{
public:
	tt__PresetTour *PresetTour;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PresetTour */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 189; } /* = unique type id SOAP_TYPE__tptz__GetPresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetTourResponse() { _tptz__GetPresetTourResponse::soap_default(NULL); }
	virtual ~_tptz__GetPresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourOptions
#define SOAP_TYPE__tptz__GetPresetTourOptions (190)
/* tptz:GetPresetTourOptions */
class SOAP_CMAC _tptz__GetPresetTourOptions
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string *PresetTourToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 190; } /* = unique type id SOAP_TYPE__tptz__GetPresetTourOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetTourOptions() { _tptz__GetPresetTourOptions::soap_default(NULL); }
	virtual ~_tptz__GetPresetTourOptions() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetPresetTourOptionsResponse
#define SOAP_TYPE__tptz__GetPresetTourOptionsResponse (191)
/* tptz:GetPresetTourOptionsResponse */
class SOAP_CMAC _tptz__GetPresetTourOptionsResponse
{
public:
	class tt__PTZPresetTourOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PTZPresetTourOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 191; } /* = unique type id SOAP_TYPE__tptz__GetPresetTourOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetPresetTourOptionsResponse() { _tptz__GetPresetTourOptionsResponse::soap_default(NULL); }
	virtual ~_tptz__GetPresetTourOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__CreatePresetTour
#define SOAP_TYPE__tptz__CreatePresetTour (192)
/* tptz:CreatePresetTour */
class SOAP_CMAC _tptz__CreatePresetTour
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 192; } /* = unique type id SOAP_TYPE__tptz__CreatePresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__CreatePresetTour() { _tptz__CreatePresetTour::soap_default(NULL); }
	virtual ~_tptz__CreatePresetTour() { }
};
#endif

#ifndef SOAP_TYPE__tptz__CreatePresetTourResponse
#define SOAP_TYPE__tptz__CreatePresetTourResponse (193)
/* tptz:CreatePresetTourResponse */
class SOAP_CMAC _tptz__CreatePresetTourResponse
{
public:
	std::string PresetTourToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 193; } /* = unique type id SOAP_TYPE__tptz__CreatePresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__CreatePresetTourResponse() { _tptz__CreatePresetTourResponse::soap_default(NULL); }
	virtual ~_tptz__CreatePresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__ModifyPresetTour
#define SOAP_TYPE__tptz__ModifyPresetTour (194)
/* tptz:ModifyPresetTour */
class SOAP_CMAC _tptz__ModifyPresetTour
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	tt__PresetTour *PresetTour;	/* required element of type tt:PresetTour */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 194; } /* = unique type id SOAP_TYPE__tptz__ModifyPresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__ModifyPresetTour() { _tptz__ModifyPresetTour::soap_default(NULL); }
	virtual ~_tptz__ModifyPresetTour() { }
};
#endif

#ifndef SOAP_TYPE__tptz__ModifyPresetTourResponse
#define SOAP_TYPE__tptz__ModifyPresetTourResponse (195)
/* tptz:ModifyPresetTourResponse */
class SOAP_CMAC _tptz__ModifyPresetTourResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 195; } /* = unique type id SOAP_TYPE__tptz__ModifyPresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__ModifyPresetTourResponse() { _tptz__ModifyPresetTourResponse::soap_default(NULL); }
	virtual ~_tptz__ModifyPresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__OperatePresetTour
#define SOAP_TYPE__tptz__OperatePresetTour (196)
/* tptz:OperatePresetTour */
class SOAP_CMAC _tptz__OperatePresetTour
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string PresetTourToken;	/* required element of type tt:ReferenceToken */
	enum tt__PTZPresetTourOperation Operation;	/* required element of type tt:PTZPresetTourOperation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 196; } /* = unique type id SOAP_TYPE__tptz__OperatePresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__OperatePresetTour() { _tptz__OperatePresetTour::soap_default(NULL); }
	virtual ~_tptz__OperatePresetTour() { }
};
#endif

#ifndef SOAP_TYPE__tptz__OperatePresetTourResponse
#define SOAP_TYPE__tptz__OperatePresetTourResponse (197)
/* tptz:OperatePresetTourResponse */
class SOAP_CMAC _tptz__OperatePresetTourResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 197; } /* = unique type id SOAP_TYPE__tptz__OperatePresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__OperatePresetTourResponse() { _tptz__OperatePresetTourResponse::soap_default(NULL); }
	virtual ~_tptz__OperatePresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetTour
#define SOAP_TYPE__tptz__RemovePresetTour (198)
/* tptz:RemovePresetTour */
class SOAP_CMAC _tptz__RemovePresetTour
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string PresetTourToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 198; } /* = unique type id SOAP_TYPE__tptz__RemovePresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RemovePresetTour() { _tptz__RemovePresetTour::soap_default(NULL); }
	virtual ~_tptz__RemovePresetTour() { }
};
#endif

#ifndef SOAP_TYPE__tptz__RemovePresetTourResponse
#define SOAP_TYPE__tptz__RemovePresetTourResponse (199)
/* tptz:RemovePresetTourResponse */
class SOAP_CMAC _tptz__RemovePresetTourResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 199; } /* = unique type id SOAP_TYPE__tptz__RemovePresetTourResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__RemovePresetTourResponse() { _tptz__RemovePresetTourResponse::soap_default(NULL); }
	virtual ~_tptz__RemovePresetTourResponse() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurations
#define SOAP_TYPE__tptz__GetCompatibleConfigurations (200)
/* tptz:GetCompatibleConfigurations */
class SOAP_CMAC _tptz__GetCompatibleConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 200; } /* = unique type id SOAP_TYPE__tptz__GetCompatibleConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetCompatibleConfigurations() { _tptz__GetCompatibleConfigurations::soap_default(NULL); }
	virtual ~_tptz__GetCompatibleConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse
#define SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse (201)
/* tptz:GetCompatibleConfigurationsResponse */
class SOAP_CMAC _tptz__GetCompatibleConfigurationsResponse
{
public:
	std::vector<tt__PTZConfiguration * >PTZConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:PTZConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 201; } /* = unique type id SOAP_TYPE__tptz__GetCompatibleConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tptz__GetCompatibleConfigurationsResponse() { _tptz__GetCompatibleConfigurationsResponse::soap_default(NULL); }
	virtual ~_tptz__GetCompatibleConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceEntity
#define SOAP_TYPE_tt__DeviceEntity (202)
/* tt:DeviceEntity */
class SOAP_CMAC tt__DeviceEntity
{
public:
	std::string token;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 202; } /* = unique type id SOAP_TYPE_tt__DeviceEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceEntity() { tt__DeviceEntity::soap_default(NULL); }
	virtual ~tt__DeviceEntity() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntRectangle
#define SOAP_TYPE_tt__IntRectangle (203)
/* tt:IntRectangle */
class SOAP_CMAC tt__IntRectangle
{
public:
	int x;	/* required attribute */
	int y;	/* required attribute */
	int width;	/* required attribute */
	int height;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 203; } /* = unique type id SOAP_TYPE_tt__IntRectangle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntRectangle() { tt__IntRectangle::soap_default(NULL); }
	virtual ~tt__IntRectangle() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntRectangleRange
#define SOAP_TYPE_tt__IntRectangleRange (204)
/* tt:IntRectangleRange */
class SOAP_CMAC tt__IntRectangleRange
{
public:
	class tt__IntRange *XRange;	/* required element of type tt:IntRange */
	tt__IntRange *YRange;	/* required element of type tt:IntRange */
	tt__IntRange *WidthRange;	/* required element of type tt:IntRange */
	tt__IntRange *HeightRange;	/* required element of type tt:IntRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 204; } /* = unique type id SOAP_TYPE_tt__IntRectangleRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntRectangleRange() { tt__IntRectangleRange::soap_default(NULL); }
	virtual ~tt__IntRectangleRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__FloatRange
#define SOAP_TYPE_tt__FloatRange (205)
/* tt:FloatRange */
class SOAP_CMAC tt__FloatRange
{
public:
	float Min;	/* required element of type xsd:float */
	float Max;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 205; } /* = unique type id SOAP_TYPE_tt__FloatRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FloatRange() { tt__FloatRange::soap_default(NULL); }
	virtual ~tt__FloatRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__DurationRange
#define SOAP_TYPE_tt__DurationRange (206)
/* tt:DurationRange */
class SOAP_CMAC tt__DurationRange
{
public:
	LONG64 Min;	/* external */
	LONG64 Max;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 206; } /* = unique type id SOAP_TYPE_tt__DurationRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DurationRange() { tt__DurationRange::soap_default(NULL); }
	virtual ~tt__DurationRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntItems
#define SOAP_TYPE_tt__IntItems (207)
/* tt:IntItems */
class SOAP_CMAC tt__IntItems
{
public:
	std::vector<int >Items;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 207; } /* = unique type id SOAP_TYPE_tt__IntItems */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntItems() { tt__IntItems::soap_default(NULL); }
	virtual ~tt__IntItems() { }
};
#endif

#ifndef SOAP_TYPE_tt__FloatItems
#define SOAP_TYPE_tt__FloatItems (208)
/* tt:FloatItems */
class SOAP_CMAC tt__FloatItems
{
public:
	std::vector<float >Items;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 208; } /* = unique type id SOAP_TYPE_tt__FloatItems */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FloatItems() { tt__FloatItems::soap_default(NULL); }
	virtual ~tt__FloatItems() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnyHolder
#define SOAP_TYPE_tt__AnyHolder (209)
/* tt:AnyHolder */
class SOAP_CMAC tt__AnyHolder
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 209; } /* = unique type id SOAP_TYPE_tt__AnyHolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnyHolder() { tt__AnyHolder::soap_default(NULL); }
	virtual ~tt__AnyHolder() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceExtension
#define SOAP_TYPE_tt__VideoSourceExtension (211)
/* tt:VideoSourceExtension */
class SOAP_CMAC tt__VideoSourceExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	class tt__ImagingSettings20 *Imaging;	/* optional element of type tt:ImagingSettings20 */
	class tt__VideoSourceExtension2 *Extension;	/* optional element of type tt:VideoSourceExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 211; } /* = unique type id SOAP_TYPE_tt__VideoSourceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceExtension() { tt__VideoSourceExtension::soap_default(NULL); }
	virtual ~tt__VideoSourceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceExtension2
#define SOAP_TYPE_tt__VideoSourceExtension2 (212)
/* tt:VideoSourceExtension2 */
class SOAP_CMAC tt__VideoSourceExtension2
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 212; } /* = unique type id SOAP_TYPE_tt__VideoSourceExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceExtension2() { tt__VideoSourceExtension2::soap_default(NULL); }
	virtual ~tt__VideoSourceExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Profile
#define SOAP_TYPE_tt__Profile (214)
/* tt:Profile */
class SOAP_CMAC tt__Profile
{
public:
	std::string Name;	/* required element of type tt:Name */
	class tt__VideoSourceConfiguration *VideoSourceConfiguration;	/* optional element of type tt:VideoSourceConfiguration */
	class tt__AudioSourceConfiguration *AudioSourceConfiguration;	/* optional element of type tt:AudioSourceConfiguration */
	class tt__VideoEncoderConfiguration *VideoEncoderConfiguration;	/* optional element of type tt:VideoEncoderConfiguration */
	class tt__AudioEncoderConfiguration *AudioEncoderConfiguration;	/* optional element of type tt:AudioEncoderConfiguration */
	class tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration;	/* optional element of type tt:VideoAnalyticsConfiguration */
	tt__PTZConfiguration *PTZConfiguration;	/* optional element of type tt:PTZConfiguration */
	class tt__MetadataConfiguration *MetadataConfiguration;	/* optional element of type tt:MetadataConfiguration */
	class tt__ProfileExtension *Extension;	/* optional element of type tt:ProfileExtension */
	std::string token;	/* required attribute */
	bool *fixed;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 214; } /* = unique type id SOAP_TYPE_tt__Profile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Profile() { tt__Profile::soap_default(NULL); }
	virtual ~tt__Profile() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileExtension
#define SOAP_TYPE_tt__ProfileExtension (215)
/* tt:ProfileExtension */
class SOAP_CMAC tt__ProfileExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	class tt__AudioOutputConfiguration *AudioOutputConfiguration;	/* optional element of type tt:AudioOutputConfiguration */
	class tt__AudioDecoderConfiguration *AudioDecoderConfiguration;	/* optional element of type tt:AudioDecoderConfiguration */
	class tt__ProfileExtension2 *Extension;	/* optional element of type tt:ProfileExtension2 */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 215; } /* = unique type id SOAP_TYPE_tt__ProfileExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileExtension() { tt__ProfileExtension::soap_default(NULL); }
	virtual ~tt__ProfileExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileExtension2
#define SOAP_TYPE_tt__ProfileExtension2 (216)
/* tt:ProfileExtension2 */
class SOAP_CMAC tt__ProfileExtension2
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 216; } /* = unique type id SOAP_TYPE_tt__ProfileExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileExtension2() { tt__ProfileExtension2::soap_default(NULL); }
	virtual ~tt__ProfileExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__ConfigurationEntity
#define SOAP_TYPE_tt__ConfigurationEntity (217)
/* tt:ConfigurationEntity */
class SOAP_CMAC tt__ConfigurationEntity
{
public:
	std::string Name;	/* required element of type tt:Name */
	int UseCount;	/* required element of type xsd:int */
	std::string token;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 217; } /* = unique type id SOAP_TYPE_tt__ConfigurationEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ConfigurationEntity() { tt__ConfigurationEntity::soap_default(NULL); }
	virtual ~tt__ConfigurationEntity() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension (219)
/* tt:VideoSourceConfigurationExtension */
class SOAP_CMAC tt__VideoSourceConfigurationExtension
{
public:
	class tt__Rotate *Rotate;	/* optional element of type tt:Rotate */
	class tt__VideoSourceConfigurationExtension2 *Extension;	/* optional element of type tt:VideoSourceConfigurationExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 219; } /* = unique type id SOAP_TYPE_tt__VideoSourceConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationExtension() { tt__VideoSourceConfigurationExtension::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension2 (220)
/* tt:VideoSourceConfigurationExtension2 */
class SOAP_CMAC tt__VideoSourceConfigurationExtension2
{
public:
	std::vector<class tt__LensDescription * >LensDescription;	/* optional element of type tt:LensDescription */
	class tt__SceneOrientation *SceneOrientation;	/* optional element of type tt:SceneOrientation */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 220; } /* = unique type id SOAP_TYPE_tt__VideoSourceConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationExtension2() { tt__VideoSourceConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Rotate
#define SOAP_TYPE_tt__Rotate (221)
/* tt:Rotate */
class SOAP_CMAC tt__Rotate
{
public:
	enum tt__RotateMode Mode;	/* required element of type tt:RotateMode */
	int *Degree;	/* optional element of type xsd:int */
	class tt__RotateExtension *Extension;	/* optional element of type tt:RotateExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 221; } /* = unique type id SOAP_TYPE_tt__Rotate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Rotate() { tt__Rotate::soap_default(NULL); }
	virtual ~tt__Rotate() { }
};
#endif

#ifndef SOAP_TYPE_tt__RotateExtension
#define SOAP_TYPE_tt__RotateExtension (222)
/* tt:RotateExtension */
class SOAP_CMAC tt__RotateExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 222; } /* = unique type id SOAP_TYPE_tt__RotateExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RotateExtension() { tt__RotateExtension::soap_default(NULL); }
	virtual ~tt__RotateExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__LensProjection
#define SOAP_TYPE_tt__LensProjection (223)
/* tt:LensProjection */
class SOAP_CMAC tt__LensProjection
{
public:
	float Angle;	/* required element of type xsd:float */
	float Radius;	/* required element of type xsd:float */
	float *Transmittance;	/* optional element of type xsd:float */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 223; } /* = unique type id SOAP_TYPE_tt__LensProjection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LensProjection() { tt__LensProjection::soap_default(NULL); }
	virtual ~tt__LensProjection() { }
};
#endif

#ifndef SOAP_TYPE_tt__LensOffset
#define SOAP_TYPE_tt__LensOffset (224)
/* tt:LensOffset */
class SOAP_CMAC tt__LensOffset
{
public:
	float *x;	/* optional attribute */
	float *y;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 224; } /* = unique type id SOAP_TYPE_tt__LensOffset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LensOffset() { tt__LensOffset::soap_default(NULL); }
	virtual ~tt__LensOffset() { }
};
#endif

#ifndef SOAP_TYPE_tt__LensDescription
#define SOAP_TYPE_tt__LensDescription (225)
/* tt:LensDescription */
class SOAP_CMAC tt__LensDescription
{
public:
	tt__LensOffset *Offset;	/* required element of type tt:LensOffset */
	std::vector<tt__LensProjection * >Projection;	/* required element of type tt:LensProjection */
	float XFactor;	/* required element of type xsd:float */
	std::vector<struct soap_dom_element >__any;
	float *FocalLength;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 225; } /* = unique type id SOAP_TYPE_tt__LensDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LensDescription() { tt__LensDescription::soap_default(NULL); }
	virtual ~tt__LensDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptions
#define SOAP_TYPE_tt__VideoSourceConfigurationOptions (226)
/* tt:VideoSourceConfigurationOptions */
class SOAP_CMAC tt__VideoSourceConfigurationOptions
{
public:
	tt__IntRectangleRange *BoundsRange;	/* required element of type tt:IntRectangleRange */
	std::vector<std::string >VideoSourceTokensAvailable;	/* required element of type tt:ReferenceToken */
	class tt__VideoSourceConfigurationOptionsExtension *Extension;	/* optional element of type tt:VideoSourceConfigurationOptionsExtension */
	int *MaximumNumberOfProfiles;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 226; } /* = unique type id SOAP_TYPE_tt__VideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationOptions() { tt__VideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension (227)
/* tt:VideoSourceConfigurationOptionsExtension */
class SOAP_CMAC tt__VideoSourceConfigurationOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	class tt__RotateOptions *Rotate;	/* optional element of type tt:RotateOptions */
	class tt__VideoSourceConfigurationOptionsExtension2 *Extension;	/* optional element of type tt:VideoSourceConfigurationOptionsExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 227; } /* = unique type id SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationOptionsExtension() { tt__VideoSourceConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 (228)
/* tt:VideoSourceConfigurationOptionsExtension2 */
class SOAP_CMAC tt__VideoSourceConfigurationOptionsExtension2
{
public:
	std::vector<enum tt__SceneOrientationMode >SceneOrientationMode;	/* optional element of type tt:SceneOrientationMode */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 228; } /* = unique type id SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationOptionsExtension2() { tt__VideoSourceConfigurationOptionsExtension2::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationOptionsExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__RotateOptions
#define SOAP_TYPE_tt__RotateOptions (229)
/* tt:RotateOptions */
class SOAP_CMAC tt__RotateOptions
{
public:
	std::vector<enum tt__RotateMode >Mode;	/* required element of type tt:RotateMode */
	tt__IntItems *DegreeList;	/* optional element of type tt:IntItems */
	class tt__RotateOptionsExtension *Extension;	/* optional element of type tt:RotateOptionsExtension */
	bool *Reboot;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 229; } /* = unique type id SOAP_TYPE_tt__RotateOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RotateOptions() { tt__RotateOptions::soap_default(NULL); }
	virtual ~tt__RotateOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__RotateOptionsExtension
#define SOAP_TYPE_tt__RotateOptionsExtension (230)
/* tt:RotateOptionsExtension */
class SOAP_CMAC tt__RotateOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 230; } /* = unique type id SOAP_TYPE_tt__RotateOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RotateOptionsExtension() { tt__RotateOptionsExtension::soap_default(NULL); }
	virtual ~tt__RotateOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SceneOrientation
#define SOAP_TYPE_tt__SceneOrientation (231)
/* tt:SceneOrientation */
class SOAP_CMAC tt__SceneOrientation
{
public:
	enum tt__SceneOrientationMode Mode;	/* required element of type tt:SceneOrientationMode */
	std::string *Orientation;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 231; } /* = unique type id SOAP_TYPE_tt__SceneOrientation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SceneOrientation() { tt__SceneOrientation::soap_default(NULL); }
	virtual ~tt__SceneOrientation() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoResolution
#define SOAP_TYPE_tt__VideoResolution (233)
/* tt:VideoResolution */
class SOAP_CMAC tt__VideoResolution
{
public:
	int Width;	/* required element of type xsd:int */
	int Height;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 233; } /* = unique type id SOAP_TYPE_tt__VideoResolution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoResolution() { tt__VideoResolution::soap_default(NULL); }
	virtual ~tt__VideoResolution() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoRateControl
#define SOAP_TYPE_tt__VideoRateControl (234)
/* tt:VideoRateControl */
class SOAP_CMAC tt__VideoRateControl
{
public:
	int FrameRateLimit;	/* required element of type xsd:int */
	int EncodingInterval;	/* required element of type xsd:int */
	int BitrateLimit;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 234; } /* = unique type id SOAP_TYPE_tt__VideoRateControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoRateControl() { tt__VideoRateControl::soap_default(NULL); }
	virtual ~tt__VideoRateControl() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Configuration
#define SOAP_TYPE_tt__Mpeg4Configuration (235)
/* tt:Mpeg4Configuration */
class SOAP_CMAC tt__Mpeg4Configuration
{
public:
	int GovLength;	/* required element of type xsd:int */
	enum tt__Mpeg4Profile Mpeg4Profile;	/* required element of type tt:Mpeg4Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 235; } /* = unique type id SOAP_TYPE_tt__Mpeg4Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4Configuration() { tt__Mpeg4Configuration::soap_default(NULL); }
	virtual ~tt__Mpeg4Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264Configuration
#define SOAP_TYPE_tt__H264Configuration (236)
/* tt:H264Configuration */
class SOAP_CMAC tt__H264Configuration
{
public:
	int GovLength;	/* required element of type xsd:int */
	enum tt__H264Profile H264Profile;	/* required element of type tt:H264Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 236; } /* = unique type id SOAP_TYPE_tt__H264Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264Configuration() { tt__H264Configuration::soap_default(NULL); }
	virtual ~tt__H264Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoderConfigurationOptions (237)
/* tt:VideoEncoderConfigurationOptions */
class SOAP_CMAC tt__VideoEncoderConfigurationOptions
{
public:
	tt__IntRange *QualityRange;	/* required element of type tt:IntRange */
	class tt__JpegOptions *JPEG;	/* optional element of type tt:JpegOptions */
	class tt__Mpeg4Options *MPEG4;	/* optional element of type tt:Mpeg4Options */
	class tt__H264Options *H264;	/* optional element of type tt:H264Options */
	class tt__VideoEncoderOptionsExtension *Extension;	/* optional element of type tt:VideoEncoderOptionsExtension */
	bool *GuaranteedFrameRateSupported;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 237; } /* = unique type id SOAP_TYPE_tt__VideoEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderConfigurationOptions() { tt__VideoEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension (238)
/* tt:VideoEncoderOptionsExtension */
class SOAP_CMAC tt__VideoEncoderOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	class tt__JpegOptions2 *JPEG;	/* optional element of type tt:JpegOptions2 */
	class tt__Mpeg4Options2 *MPEG4;	/* optional element of type tt:Mpeg4Options2 */
	class tt__H264Options2 *H264;	/* optional element of type tt:H264Options2 */
	class tt__VideoEncoderOptionsExtension2 *Extension;	/* optional element of type tt:VideoEncoderOptionsExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 238; } /* = unique type id SOAP_TYPE_tt__VideoEncoderOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderOptionsExtension() { tt__VideoEncoderOptionsExtension::soap_default(NULL); }
	virtual ~tt__VideoEncoderOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension2
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension2 (239)
/* tt:VideoEncoderOptionsExtension2 */
class SOAP_CMAC tt__VideoEncoderOptionsExtension2
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 239; } /* = unique type id SOAP_TYPE_tt__VideoEncoderOptionsExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderOptionsExtension2() { tt__VideoEncoderOptionsExtension2::soap_default(NULL); }
	virtual ~tt__VideoEncoderOptionsExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__JpegOptions
#define SOAP_TYPE_tt__JpegOptions (240)
/* tt:JpegOptions */
class SOAP_CMAC tt__JpegOptions
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *FrameRateRange;	/* required element of type tt:IntRange */
	tt__IntRange *EncodingIntervalRange;	/* required element of type tt:IntRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 240; } /* = unique type id SOAP_TYPE_tt__JpegOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__JpegOptions() { tt__JpegOptions::soap_default(NULL); }
	virtual ~tt__JpegOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Options
#define SOAP_TYPE_tt__Mpeg4Options (242)
/* tt:Mpeg4Options */
class SOAP_CMAC tt__Mpeg4Options
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *GovLengthRange;	/* required element of type tt:IntRange */
	tt__IntRange *FrameRateRange;	/* required element of type tt:IntRange */
	tt__IntRange *EncodingIntervalRange;	/* required element of type tt:IntRange */
	std::vector<enum tt__Mpeg4Profile >Mpeg4ProfilesSupported;	/* required element of type tt:Mpeg4Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 242; } /* = unique type id SOAP_TYPE_tt__Mpeg4Options */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4Options() { tt__Mpeg4Options::soap_default(NULL); }
	virtual ~tt__Mpeg4Options() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264Options
#define SOAP_TYPE_tt__H264Options (244)
/* tt:H264Options */
class SOAP_CMAC tt__H264Options
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *GovLengthRange;	/* required element of type tt:IntRange */
	tt__IntRange *FrameRateRange;	/* required element of type tt:IntRange */
	tt__IntRange *EncodingIntervalRange;	/* required element of type tt:IntRange */
	std::vector<enum tt__H264Profile >H264ProfilesSupported;	/* required element of type tt:H264Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 244; } /* = unique type id SOAP_TYPE_tt__H264Options */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264Options() { tt__H264Options::soap_default(NULL); }
	virtual ~tt__H264Options() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoResolution2
#define SOAP_TYPE_tt__VideoResolution2 (247)
/* tt:VideoResolution2 */
class SOAP_CMAC tt__VideoResolution2
{
public:
	int Width;	/* required element of type xsd:int */
	int Height;	/* required element of type xsd:int */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 247; } /* = unique type id SOAP_TYPE_tt__VideoResolution2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoResolution2() { tt__VideoResolution2::soap_default(NULL); }
	virtual ~tt__VideoResolution2() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoRateControl2
#define SOAP_TYPE_tt__VideoRateControl2 (248)
/* tt:VideoRateControl2 */
class SOAP_CMAC tt__VideoRateControl2
{
public:
	float FrameRateLimit;	/* required element of type xsd:float */
	int BitrateLimit;	/* required element of type xsd:int */
	std::vector<struct soap_dom_element >__any;
	bool *ConstantBitRate;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 248; } /* = unique type id SOAP_TYPE_tt__VideoRateControl2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoRateControl2() { tt__VideoRateControl2::soap_default(NULL); }
	virtual ~tt__VideoRateControl2() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions (249)
/* tt:VideoEncoder2ConfigurationOptions */
class SOAP_CMAC tt__VideoEncoder2ConfigurationOptions
{
public:
	std::string Encoding;	/* required element of type xsd:string */
	tt__FloatRange *QualityRange;	/* required element of type tt:FloatRange */
	std::vector<tt__VideoResolution2 * >ResolutionsAvailable;	/* required element of type tt:VideoResolution2 */
	tt__IntRange *BitrateRange;	/* required element of type tt:IntRange */
	std::vector<struct soap_dom_element >__any;
	std::string *GovLengthRange;	/* optional attribute */
	std::string *FrameRatesSupported;	/* optional attribute */
	std::string *ProfilesSupported;	/* optional attribute */
	bool *ConstantBitRateSupported;	/* optional attribute */
	bool *GuaranteedFrameRateSupported;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 249; } /* = unique type id SOAP_TYPE_tt__VideoEncoder2ConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoder2ConfigurationOptions() { tt__VideoEncoder2ConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoEncoder2ConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSourceConfigurationOptions
#define SOAP_TYPE_tt__AudioSourceConfigurationOptions (251)
/* tt:AudioSourceConfigurationOptions */
class SOAP_CMAC tt__AudioSourceConfigurationOptions
{
public:
	std::vector<std::string >InputTokensAvailable;	/* required element of type tt:ReferenceToken */
	class tt__AudioSourceOptionsExtension *Extension;	/* optional element of type tt:AudioSourceOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 251; } /* = unique type id SOAP_TYPE_tt__AudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSourceConfigurationOptions() { tt__AudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSourceOptionsExtension
#define SOAP_TYPE_tt__AudioSourceOptionsExtension (252)
/* tt:AudioSourceOptionsExtension */
class SOAP_CMAC tt__AudioSourceOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 252; } /* = unique type id SOAP_TYPE_tt__AudioSourceOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSourceOptionsExtension() { tt__AudioSourceOptionsExtension::soap_default(NULL); }
	virtual ~tt__AudioSourceOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoderConfigurationOptions (254)
/* tt:AudioEncoderConfigurationOptions */
class SOAP_CMAC tt__AudioEncoderConfigurationOptions
{
public:
	std::vector<class tt__AudioEncoderConfigurationOption * >Options;	/* optional element of type tt:AudioEncoderConfigurationOption */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 254; } /* = unique type id SOAP_TYPE_tt__AudioEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoderConfigurationOptions() { tt__AudioEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOption
#define SOAP_TYPE_tt__AudioEncoderConfigurationOption (255)
/* tt:AudioEncoderConfigurationOption */
class SOAP_CMAC tt__AudioEncoderConfigurationOption
{
public:
	enum tt__AudioEncoding Encoding;	/* required element of type tt:AudioEncoding */
	tt__IntItems *BitrateList;	/* required element of type tt:IntItems */
	tt__IntItems *SampleRateList;	/* required element of type tt:IntItems */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 255; } /* = unique type id SOAP_TYPE_tt__AudioEncoderConfigurationOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoderConfigurationOption() { tt__AudioEncoderConfigurationOption::soap_default(NULL); }
	virtual ~tt__AudioEncoderConfigurationOption() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions (257)
/* tt:AudioEncoder2ConfigurationOptions */
class SOAP_CMAC tt__AudioEncoder2ConfigurationOptions
{
public:
	std::string Encoding;	/* required element of type xsd:string */
	tt__IntItems *BitrateList;	/* required element of type tt:IntItems */
	tt__IntItems *SampleRateList;	/* required element of type tt:IntItems */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 257; } /* = unique type id SOAP_TYPE_tt__AudioEncoder2ConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoder2ConfigurationOptions() { tt__AudioEncoder2ConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioEncoder2ConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationExtension
#define SOAP_TYPE_tt__MetadataConfigurationExtension (260)
/* tt:MetadataConfigurationExtension */
class SOAP_CMAC tt__MetadataConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 260; } /* = unique type id SOAP_TYPE_tt__MetadataConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfigurationExtension() { tt__MetadataConfigurationExtension::soap_default(NULL); }
	virtual ~tt__MetadataConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZFilter
#define SOAP_TYPE_tt__PTZFilter (261)
/* tt:PTZFilter */
class SOAP_CMAC tt__PTZFilter
{
public:
	bool Status;	/* required element of type xsd:boolean */
	bool Position;	/* required element of type xsd:boolean */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 261; } /* = unique type id SOAP_TYPE_tt__PTZFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZFilter() { tt__PTZFilter::soap_default(NULL); }
	virtual ~tt__PTZFilter() { }
};
#endif

#ifndef SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy (1412)
/* tt:EventSubscription-SubscriptionPolicy */
class SOAP_CMAC _tt__EventSubscription_SubscriptionPolicy
{
public:
	std::vector<struct soap_dom_element >__any;
public:
	virtual int soap_type() const { return 1412; } /* = unique type id SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__EventSubscription_SubscriptionPolicy() { _tt__EventSubscription_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_tt__EventSubscription_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventSubscription
#define SOAP_TYPE_tt__EventSubscription (262)
/* tt:EventSubscription */
class SOAP_CMAC tt__EventSubscription
{
public:
	class wsnt__FilterType *Filter;	/* optional element of type wsnt:FilterType */
	_tt__EventSubscription_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type tt:EventSubscription-SubscriptionPolicy */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 262; } /* = unique type id SOAP_TYPE_tt__EventSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventSubscription() { tt__EventSubscription::soap_default(NULL); }
	virtual ~tt__EventSubscription() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptions
#define SOAP_TYPE_tt__MetadataConfigurationOptions (263)
/* tt:MetadataConfigurationOptions */
class SOAP_CMAC tt__MetadataConfigurationOptions
{
public:
	class tt__PTZStatusFilterOptions *PTZStatusFilterOptions;	/* required element of type tt:PTZStatusFilterOptions */
	std::vector<struct soap_dom_element >__any;
	class tt__MetadataConfigurationOptionsExtension *Extension;	/* optional element of type tt:MetadataConfigurationOptionsExtension */
	bool *GeoLocation;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 263; } /* = unique type id SOAP_TYPE_tt__MetadataConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfigurationOptions() { tt__MetadataConfigurationOptions::soap_default(NULL); }
	virtual ~tt__MetadataConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension (264)
/* tt:MetadataConfigurationOptionsExtension */
class SOAP_CMAC tt__MetadataConfigurationOptionsExtension
{
public:
	std::vector<std::string >CompressionType;	/* optional element of type xsd:string */
	class tt__MetadataConfigurationOptionsExtension2 *Extension;	/* optional element of type tt:MetadataConfigurationOptionsExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 264; } /* = unique type id SOAP_TYPE_tt__MetadataConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfigurationOptionsExtension() { tt__MetadataConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__MetadataConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2
#define SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2 (265)
/* tt:MetadataConfigurationOptionsExtension2 */
class SOAP_CMAC tt__MetadataConfigurationOptionsExtension2
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 265; } /* = unique type id SOAP_TYPE_tt__MetadataConfigurationOptionsExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfigurationOptionsExtension2() { tt__MetadataConfigurationOptionsExtension2::soap_default(NULL); }
	virtual ~tt__MetadataConfigurationOptionsExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStatusFilterOptions
#define SOAP_TYPE_tt__PTZStatusFilterOptions (266)
/* tt:PTZStatusFilterOptions */
class SOAP_CMAC tt__PTZStatusFilterOptions
{
public:
	bool PanTiltStatusSupported;	/* required element of type xsd:boolean */
	bool ZoomStatusSupported;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	bool *PanTiltPositionSupported;	/* optional element of type xsd:boolean */
	bool *ZoomPositionSupported;	/* optional element of type xsd:boolean */
	class tt__PTZStatusFilterOptionsExtension *Extension;	/* optional element of type tt:PTZStatusFilterOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 266; } /* = unique type id SOAP_TYPE_tt__PTZStatusFilterOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStatusFilterOptions() { tt__PTZStatusFilterOptions::soap_default(NULL); }
	virtual ~tt__PTZStatusFilterOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStatusFilterOptionsExtension
#define SOAP_TYPE_tt__PTZStatusFilterOptionsExtension (267)
/* tt:PTZStatusFilterOptionsExtension */
class SOAP_CMAC tt__PTZStatusFilterOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 267; } /* = unique type id SOAP_TYPE_tt__PTZStatusFilterOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStatusFilterOptionsExtension() { tt__PTZStatusFilterOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTZStatusFilterOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutputExtension
#define SOAP_TYPE_tt__VideoOutputExtension (269)
/* tt:VideoOutputExtension */
class SOAP_CMAC tt__VideoOutputExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 269; } /* = unique type id SOAP_TYPE_tt__VideoOutputExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutputExtension() { tt__VideoOutputExtension::soap_default(NULL); }
	virtual ~tt__VideoOutputExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutputConfigurationOptions
#define SOAP_TYPE_tt__VideoOutputConfigurationOptions (271)
/* tt:VideoOutputConfigurationOptions */
class SOAP_CMAC tt__VideoOutputConfigurationOptions
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 271; } /* = unique type id SOAP_TYPE_tt__VideoOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutputConfigurationOptions() { tt__VideoOutputConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptions
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptions (272)
/* tt:VideoDecoderConfigurationOptions */
class SOAP_CMAC tt__VideoDecoderConfigurationOptions
{
public:
	class tt__JpegDecOptions *JpegDecOptions;	/* optional element of type tt:JpegDecOptions */
	class tt__H264DecOptions *H264DecOptions;	/* optional element of type tt:H264DecOptions */
	class tt__Mpeg4DecOptions *Mpeg4DecOptions;	/* optional element of type tt:Mpeg4DecOptions */
	class tt__VideoDecoderConfigurationOptionsExtension *Extension;	/* optional element of type tt:VideoDecoderConfigurationOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 272; } /* = unique type id SOAP_TYPE_tt__VideoDecoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoDecoderConfigurationOptions() { tt__VideoDecoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoDecoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264DecOptions
#define SOAP_TYPE_tt__H264DecOptions (273)
/* tt:H264DecOptions */
class SOAP_CMAC tt__H264DecOptions
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	std::vector<enum tt__H264Profile >SupportedH264Profiles;	/* required element of type tt:H264Profile */
	tt__IntRange *SupportedInputBitrate;	/* required element of type tt:IntRange */
	tt__IntRange *SupportedFrameRate;	/* required element of type tt:IntRange */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 273; } /* = unique type id SOAP_TYPE_tt__H264DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264DecOptions() { tt__H264DecOptions::soap_default(NULL); }
	virtual ~tt__H264DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__JpegDecOptions
#define SOAP_TYPE_tt__JpegDecOptions (274)
/* tt:JpegDecOptions */
class SOAP_CMAC tt__JpegDecOptions
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *SupportedInputBitrate;	/* required element of type tt:IntRange */
	tt__IntRange *SupportedFrameRate;	/* required element of type tt:IntRange */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 274; } /* = unique type id SOAP_TYPE_tt__JpegDecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__JpegDecOptions() { tt__JpegDecOptions::soap_default(NULL); }
	virtual ~tt__JpegDecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4DecOptions
#define SOAP_TYPE_tt__Mpeg4DecOptions (275)
/* tt:Mpeg4DecOptions */
class SOAP_CMAC tt__Mpeg4DecOptions
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	std::vector<enum tt__Mpeg4Profile >SupportedMpeg4Profiles;	/* required element of type tt:Mpeg4Profile */
	tt__IntRange *SupportedInputBitrate;	/* required element of type tt:IntRange */
	tt__IntRange *SupportedFrameRate;	/* required element of type tt:IntRange */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 275; } /* = unique type id SOAP_TYPE_tt__Mpeg4DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4DecOptions() { tt__Mpeg4DecOptions::soap_default(NULL); }
	virtual ~tt__Mpeg4DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension (276)
/* tt:VideoDecoderConfigurationOptionsExtension */
class SOAP_CMAC tt__VideoDecoderConfigurationOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 276; } /* = unique type id SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoDecoderConfigurationOptionsExtension() { tt__VideoDecoderConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__VideoDecoderConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioOutputConfigurationOptions
#define SOAP_TYPE_tt__AudioOutputConfigurationOptions (279)
/* tt:AudioOutputConfigurationOptions */
class SOAP_CMAC tt__AudioOutputConfigurationOptions
{
public:
	std::vector<std::string >OutputTokensAvailable;	/* required element of type tt:ReferenceToken */
	std::vector<std::string >SendPrimacyOptions;	/* optional element of type xsd:anyURI */
	tt__IntRange *OutputLevelRange;	/* required element of type tt:IntRange */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 279; } /* = unique type id SOAP_TYPE_tt__AudioOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioOutputConfigurationOptions() { tt__AudioOutputConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptions
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptions (281)
/* tt:AudioDecoderConfigurationOptions */
class SOAP_CMAC tt__AudioDecoderConfigurationOptions
{
public:
	class tt__AACDecOptions *AACDecOptions;	/* optional element of type tt:AACDecOptions */
	class tt__G711DecOptions *G711DecOptions;	/* optional element of type tt:G711DecOptions */
	class tt__G726DecOptions *G726DecOptions;	/* optional element of type tt:G726DecOptions */
	class tt__AudioDecoderConfigurationOptionsExtension *Extension;	/* optional element of type tt:AudioDecoderConfigurationOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 281; } /* = unique type id SOAP_TYPE_tt__AudioDecoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioDecoderConfigurationOptions() { tt__AudioDecoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioDecoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__G711DecOptions
#define SOAP_TYPE_tt__G711DecOptions (282)
/* tt:G711DecOptions */
class SOAP_CMAC tt__G711DecOptions
{
public:
	tt__IntItems *Bitrate;	/* required element of type tt:IntItems */
	tt__IntItems *SampleRateRange;	/* required element of type tt:IntItems */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 282; } /* = unique type id SOAP_TYPE_tt__G711DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__G711DecOptions() { tt__G711DecOptions::soap_default(NULL); }
	virtual ~tt__G711DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AACDecOptions
#define SOAP_TYPE_tt__AACDecOptions (283)
/* tt:AACDecOptions */
class SOAP_CMAC tt__AACDecOptions
{
public:
	tt__IntItems *Bitrate;	/* required element of type tt:IntItems */
	tt__IntItems *SampleRateRange;	/* required element of type tt:IntItems */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 283; } /* = unique type id SOAP_TYPE_tt__AACDecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AACDecOptions() { tt__AACDecOptions::soap_default(NULL); }
	virtual ~tt__AACDecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__G726DecOptions
#define SOAP_TYPE_tt__G726DecOptions (284)
/* tt:G726DecOptions */
class SOAP_CMAC tt__G726DecOptions
{
public:
	tt__IntItems *Bitrate;	/* required element of type tt:IntItems */
	tt__IntItems *SampleRateRange;	/* required element of type tt:IntItems */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 284; } /* = unique type id SOAP_TYPE_tt__G726DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__G726DecOptions() { tt__G726DecOptions::soap_default(NULL); }
	virtual ~tt__G726DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension (285)
/* tt:AudioDecoderConfigurationOptionsExtension */
class SOAP_CMAC tt__AudioDecoderConfigurationOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 285; } /* = unique type id SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioDecoderConfigurationOptionsExtension() { tt__AudioDecoderConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__AudioDecoderConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MulticastConfiguration
#define SOAP_TYPE_tt__MulticastConfiguration (286)
/* tt:MulticastConfiguration */
class SOAP_CMAC tt__MulticastConfiguration
{
public:
	class tt__IPAddress *Address;	/* required element of type tt:IPAddress */
	int Port;	/* required element of type xsd:int */
	int TTL;	/* required element of type xsd:int */
	bool AutoStart;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 286; } /* = unique type id SOAP_TYPE_tt__MulticastConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MulticastConfiguration() { tt__MulticastConfiguration::soap_default(NULL); }
	virtual ~tt__MulticastConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__StreamSetup
#define SOAP_TYPE_tt__StreamSetup (287)
/* tt:StreamSetup */
class SOAP_CMAC tt__StreamSetup
{
public:
	enum tt__StreamType Stream;	/* required element of type tt:StreamType */
	class tt__Transport *Transport;	/* required element of type tt:Transport */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 287; } /* = unique type id SOAP_TYPE_tt__StreamSetup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__StreamSetup() { tt__StreamSetup::soap_default(NULL); }
	virtual ~tt__StreamSetup() { }
};
#endif

#ifndef SOAP_TYPE_tt__Transport
#define SOAP_TYPE_tt__Transport (288)
/* tt:Transport */
class SOAP_CMAC tt__Transport
{
public:
	enum tt__TransportProtocol Protocol;	/* required element of type tt:TransportProtocol */
	tt__Transport *Tunnel;	/* optional element of type tt:Transport */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 288; } /* = unique type id SOAP_TYPE_tt__Transport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Transport() { tt__Transport::soap_default(NULL); }
	virtual ~tt__Transport() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaUri
#define SOAP_TYPE_tt__MediaUri (289)
/* tt:MediaUri */
class SOAP_CMAC tt__MediaUri
{
public:
	std::string Uri;	/* required element of type xsd:anyURI */
	bool InvalidAfterConnect;	/* required element of type xsd:boolean */
	bool InvalidAfterReboot;	/* required element of type xsd:boolean */
	LONG64 Timeout;	/* external */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 289; } /* = unique type id SOAP_TYPE_tt__MediaUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaUri() { tt__MediaUri::soap_default(NULL); }
	virtual ~tt__MediaUri() { }
};
#endif

#ifndef SOAP_TYPE_tt__Scope
#define SOAP_TYPE_tt__Scope (290)
/* tt:Scope */
class SOAP_CMAC tt__Scope
{
public:
	enum tt__ScopeDefinition ScopeDef;	/* required element of type tt:ScopeDefinition */
	std::string ScopeItem;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 290; } /* = unique type id SOAP_TYPE_tt__Scope */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Scope() { tt__Scope::soap_default(NULL); }
	virtual ~tt__Scope() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension
#define SOAP_TYPE_tt__NetworkInterfaceExtension (292)
/* tt:NetworkInterfaceExtension */
class SOAP_CMAC tt__NetworkInterfaceExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	int InterfaceType;	/* required element of type tt:IANA-IfTypes */
	std::vector<class tt__Dot3Configuration * >Dot3;	/* optional element of type tt:Dot3Configuration */
	std::vector<class tt__Dot11Configuration * >Dot11;	/* optional element of type tt:Dot11Configuration */
	class tt__NetworkInterfaceExtension2 *Extension;	/* optional element of type tt:NetworkInterfaceExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 292; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceExtension() { tt__NetworkInterfaceExtension::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot3Configuration
#define SOAP_TYPE_tt__Dot3Configuration (293)
/* tt:Dot3Configuration */
class SOAP_CMAC tt__Dot3Configuration
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 293; } /* = unique type id SOAP_TYPE_tt__Dot3Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot3Configuration() { tt__Dot3Configuration::soap_default(NULL); }
	virtual ~tt__Dot3Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension2
#define SOAP_TYPE_tt__NetworkInterfaceExtension2 (294)
/* tt:NetworkInterfaceExtension2 */
class SOAP_CMAC tt__NetworkInterfaceExtension2
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 294; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceExtension2() { tt__NetworkInterfaceExtension2::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceLink
#define SOAP_TYPE_tt__NetworkInterfaceLink (295)
/* tt:NetworkInterfaceLink */
class SOAP_CMAC tt__NetworkInterfaceLink
{
public:
	class tt__NetworkInterfaceConnectionSetting *AdminSettings;	/* required element of type tt:NetworkInterfaceConnectionSetting */
	tt__NetworkInterfaceConnectionSetting *OperSettings;	/* required element of type tt:NetworkInterfaceConnectionSetting */
	int InterfaceType;	/* required element of type tt:IANA-IfTypes */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 295; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceLink */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceLink() { tt__NetworkInterfaceLink::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceLink() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_tt__NetworkInterfaceConnectionSetting (296)
/* tt:NetworkInterfaceConnectionSetting */
class SOAP_CMAC tt__NetworkInterfaceConnectionSetting
{
public:
	bool AutoNegotiation;	/* required element of type xsd:boolean */
	int Speed;	/* required element of type xsd:int */
	enum tt__Duplex Duplex;	/* required element of type tt:Duplex */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 296; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceConnectionSetting */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceConnectionSetting() { tt__NetworkInterfaceConnectionSetting::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceConnectionSetting() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceInfo
#define SOAP_TYPE_tt__NetworkInterfaceInfo (297)
/* tt:NetworkInterfaceInfo */
class SOAP_CMAC tt__NetworkInterfaceInfo
{
public:
	std::string *Name;	/* optional element of type xsd:string */
	std::string HwAddress;	/* required element of type tt:HwAddress */
	int *MTU;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 297; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceInfo() { tt__NetworkInterfaceInfo::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceInfo() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6NetworkInterface
#define SOAP_TYPE_tt__IPv6NetworkInterface (298)
/* tt:IPv6NetworkInterface */
class SOAP_CMAC tt__IPv6NetworkInterface
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	class tt__IPv6Configuration *Config;	/* optional element of type tt:IPv6Configuration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 298; } /* = unique type id SOAP_TYPE_tt__IPv6NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6NetworkInterface() { tt__IPv6NetworkInterface::soap_default(NULL); }
	virtual ~tt__IPv6NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv4NetworkInterface
#define SOAP_TYPE_tt__IPv4NetworkInterface (299)
/* tt:IPv4NetworkInterface */
class SOAP_CMAC tt__IPv4NetworkInterface
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	class tt__IPv4Configuration *Config;	/* required element of type tt:IPv4Configuration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 299; } /* = unique type id SOAP_TYPE_tt__IPv4NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv4NetworkInterface() { tt__IPv4NetworkInterface::soap_default(NULL); }
	virtual ~tt__IPv4NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv4Configuration
#define SOAP_TYPE_tt__IPv4Configuration (300)
/* tt:IPv4Configuration */
class SOAP_CMAC tt__IPv4Configuration
{
public:
	std::vector<class tt__PrefixedIPv4Address * >Manual;	/* optional element of type tt:PrefixedIPv4Address */
	tt__PrefixedIPv4Address *LinkLocal;	/* optional element of type tt:PrefixedIPv4Address */
	tt__PrefixedIPv4Address *FromDHCP;	/* optional element of type tt:PrefixedIPv4Address */
	bool DHCP;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 300; } /* = unique type id SOAP_TYPE_tt__IPv4Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv4Configuration() { tt__IPv4Configuration::soap_default(NULL); }
	virtual ~tt__IPv4Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6Configuration
#define SOAP_TYPE_tt__IPv6Configuration (301)
/* tt:IPv6Configuration */
class SOAP_CMAC tt__IPv6Configuration
{
public:
	bool *AcceptRouterAdvert;	/* optional element of type xsd:boolean */
	enum tt__IPv6DHCPConfiguration DHCP;	/* required element of type tt:IPv6DHCPConfiguration */
	std::vector<class tt__PrefixedIPv6Address * >Manual;	/* optional element of type tt:PrefixedIPv6Address */
	std::vector<tt__PrefixedIPv6Address * >LinkLocal;	/* optional element of type tt:PrefixedIPv6Address */
	std::vector<tt__PrefixedIPv6Address * >FromDHCP;	/* optional element of type tt:PrefixedIPv6Address */
	std::vector<tt__PrefixedIPv6Address * >FromRA;	/* optional element of type tt:PrefixedIPv6Address */
	class tt__IPv6ConfigurationExtension *Extension;	/* optional element of type tt:IPv6ConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 301; } /* = unique type id SOAP_TYPE_tt__IPv6Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6Configuration() { tt__IPv6Configuration::soap_default(NULL); }
	virtual ~tt__IPv6Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6ConfigurationExtension
#define SOAP_TYPE_tt__IPv6ConfigurationExtension (302)
/* tt:IPv6ConfigurationExtension */
class SOAP_CMAC tt__IPv6ConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 302; } /* = unique type id SOAP_TYPE_tt__IPv6ConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6ConfigurationExtension() { tt__IPv6ConfigurationExtension::soap_default(NULL); }
	virtual ~tt__IPv6ConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocol
#define SOAP_TYPE_tt__NetworkProtocol (303)
/* tt:NetworkProtocol */
class SOAP_CMAC tt__NetworkProtocol
{
public:
	enum tt__NetworkProtocolType Name;	/* required element of type tt:NetworkProtocolType */
	bool Enabled;	/* required element of type xsd:boolean */
	std::vector<int >Port;	/* required element of type xsd:int */
	class tt__NetworkProtocolExtension *Extension;	/* optional element of type tt:NetworkProtocolExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 303; } /* = unique type id SOAP_TYPE_tt__NetworkProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkProtocol() { tt__NetworkProtocol::soap_default(NULL); }
	virtual ~tt__NetworkProtocol() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocolExtension
#define SOAP_TYPE_tt__NetworkProtocolExtension (304)
/* tt:NetworkProtocolExtension */
class SOAP_CMAC tt__NetworkProtocolExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 304; } /* = unique type id SOAP_TYPE_tt__NetworkProtocolExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkProtocolExtension() { tt__NetworkProtocolExtension::soap_default(NULL); }
	virtual ~tt__NetworkProtocolExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkHost
#define SOAP_TYPE_tt__NetworkHost (305)
/* tt:NetworkHost */
class SOAP_CMAC tt__NetworkHost
{
public:
	enum tt__NetworkHostType Type;	/* required element of type tt:NetworkHostType */
	std::string *IPv4Address;	/* optional element of type tt:IPv4Address */
	std::string *IPv6Address;	/* optional element of type tt:IPv6Address */
	std::string *DNSname;	/* optional element of type tt:DNSName */
	class tt__NetworkHostExtension *Extension;	/* optional element of type tt:NetworkHostExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 305; } /* = unique type id SOAP_TYPE_tt__NetworkHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkHost() { tt__NetworkHost::soap_default(NULL); }
	virtual ~tt__NetworkHost() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkHostExtension
#define SOAP_TYPE_tt__NetworkHostExtension (306)
/* tt:NetworkHostExtension */
class SOAP_CMAC tt__NetworkHostExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 306; } /* = unique type id SOAP_TYPE_tt__NetworkHostExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkHostExtension() { tt__NetworkHostExtension::soap_default(NULL); }
	virtual ~tt__NetworkHostExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPAddress
#define SOAP_TYPE_tt__IPAddress (307)
/* tt:IPAddress */
class SOAP_CMAC tt__IPAddress
{
public:
	enum tt__IPType Type;	/* required element of type tt:IPType */
	std::string *IPv4Address;	/* optional element of type tt:IPv4Address */
	std::string *IPv6Address;	/* optional element of type tt:IPv6Address */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 307; } /* = unique type id SOAP_TYPE_tt__IPAddress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPAddress() { tt__IPAddress::soap_default(NULL); }
	virtual ~tt__IPAddress() { }
};
#endif

#ifndef SOAP_TYPE_tt__PrefixedIPv4Address
#define SOAP_TYPE_tt__PrefixedIPv4Address (308)
/* tt:PrefixedIPv4Address */
class SOAP_CMAC tt__PrefixedIPv4Address
{
public:
	std::string Address;	/* required element of type tt:IPv4Address */
	int PrefixLength;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 308; } /* = unique type id SOAP_TYPE_tt__PrefixedIPv4Address */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PrefixedIPv4Address() { tt__PrefixedIPv4Address::soap_default(NULL); }
	virtual ~tt__PrefixedIPv4Address() { }
};
#endif

#ifndef SOAP_TYPE_tt__PrefixedIPv6Address
#define SOAP_TYPE_tt__PrefixedIPv6Address (309)
/* tt:PrefixedIPv6Address */
class SOAP_CMAC tt__PrefixedIPv6Address
{
public:
	std::string Address;	/* required element of type tt:IPv6Address */
	int PrefixLength;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 309; } /* = unique type id SOAP_TYPE_tt__PrefixedIPv6Address */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PrefixedIPv6Address() { tt__PrefixedIPv6Address::soap_default(NULL); }
	virtual ~tt__PrefixedIPv6Address() { }
};
#endif

#ifndef SOAP_TYPE_tt__HostnameInformation
#define SOAP_TYPE_tt__HostnameInformation (310)
/* tt:HostnameInformation */
class SOAP_CMAC tt__HostnameInformation
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::string *Name;	/* optional element of type xsd:token */
	class tt__HostnameInformationExtension *Extension;	/* optional element of type tt:HostnameInformationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 310; } /* = unique type id SOAP_TYPE_tt__HostnameInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__HostnameInformation() { tt__HostnameInformation::soap_default(NULL); }
	virtual ~tt__HostnameInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__HostnameInformationExtension
#define SOAP_TYPE_tt__HostnameInformationExtension (311)
/* tt:HostnameInformationExtension */
class SOAP_CMAC tt__HostnameInformationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 311; } /* = unique type id SOAP_TYPE_tt__HostnameInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__HostnameInformationExtension() { tt__HostnameInformationExtension::soap_default(NULL); }
	virtual ~tt__HostnameInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__DNSInformation
#define SOAP_TYPE_tt__DNSInformation (312)
/* tt:DNSInformation */
class SOAP_CMAC tt__DNSInformation
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<std::string >SearchDomain;	/* optional element of type xsd:token */
	std::vector<tt__IPAddress * >DNSFromDHCP;	/* optional element of type tt:IPAddress */
	std::vector<tt__IPAddress * >DNSManual;	/* optional element of type tt:IPAddress */
	class tt__DNSInformationExtension *Extension;	/* optional element of type tt:DNSInformationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 312; } /* = unique type id SOAP_TYPE_tt__DNSInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DNSInformation() { tt__DNSInformation::soap_default(NULL); }
	virtual ~tt__DNSInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__DNSInformationExtension
#define SOAP_TYPE_tt__DNSInformationExtension (313)
/* tt:DNSInformationExtension */
class SOAP_CMAC tt__DNSInformationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 313; } /* = unique type id SOAP_TYPE_tt__DNSInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DNSInformationExtension() { tt__DNSInformationExtension::soap_default(NULL); }
	virtual ~tt__DNSInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NTPInformation
#define SOAP_TYPE_tt__NTPInformation (314)
/* tt:NTPInformation */
class SOAP_CMAC tt__NTPInformation
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<tt__NetworkHost * >NTPFromDHCP;	/* optional element of type tt:NetworkHost */
	std::vector<tt__NetworkHost * >NTPManual;	/* optional element of type tt:NetworkHost */
	class tt__NTPInformationExtension *Extension;	/* optional element of type tt:NTPInformationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 314; } /* = unique type id SOAP_TYPE_tt__NTPInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NTPInformation() { tt__NTPInformation::soap_default(NULL); }
	virtual ~tt__NTPInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__NTPInformationExtension
#define SOAP_TYPE_tt__NTPInformationExtension (315)
/* tt:NTPInformationExtension */
class SOAP_CMAC tt__NTPInformationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 315; } /* = unique type id SOAP_TYPE_tt__NTPInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NTPInformationExtension() { tt__NTPInformationExtension::soap_default(NULL); }
	virtual ~tt__NTPInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSInformation
#define SOAP_TYPE_tt__DynamicDNSInformation (316)
/* tt:DynamicDNSInformation */
class SOAP_CMAC tt__DynamicDNSInformation
{
public:
	enum tt__DynamicDNSType Type;	/* required element of type tt:DynamicDNSType */
	std::string *Name;	/* optional element of type tt:DNSName */
	LONG64 *TTL;	/* optional element of type xsd:duration */
	class tt__DynamicDNSInformationExtension *Extension;	/* optional element of type tt:DynamicDNSInformationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 316; } /* = unique type id SOAP_TYPE_tt__DynamicDNSInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DynamicDNSInformation() { tt__DynamicDNSInformation::soap_default(NULL); }
	virtual ~tt__DynamicDNSInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSInformationExtension
#define SOAP_TYPE_tt__DynamicDNSInformationExtension (317)
/* tt:DynamicDNSInformationExtension */
class SOAP_CMAC tt__DynamicDNSInformationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 317; } /* = unique type id SOAP_TYPE_tt__DynamicDNSInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DynamicDNSInformationExtension() { tt__DynamicDNSInformationExtension::soap_default(NULL); }
	virtual ~tt__DynamicDNSInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__NetworkInterfaceSetConfiguration (318)
/* tt:NetworkInterfaceSetConfiguration */
class SOAP_CMAC tt__NetworkInterfaceSetConfiguration
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	tt__NetworkInterfaceConnectionSetting *Link;	/* optional element of type tt:NetworkInterfaceConnectionSetting */
	int *MTU;	/* optional element of type xsd:int */
	class tt__IPv4NetworkInterfaceSetConfiguration *IPv4;	/* optional element of type tt:IPv4NetworkInterfaceSetConfiguration */
	class tt__IPv6NetworkInterfaceSetConfiguration *IPv6;	/* optional element of type tt:IPv6NetworkInterfaceSetConfiguration */
	class tt__NetworkInterfaceSetConfigurationExtension *Extension;	/* optional element of type tt:NetworkInterfaceSetConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 318; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceSetConfiguration() { tt__NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension (319)
/* tt:NetworkInterfaceSetConfigurationExtension */
class SOAP_CMAC tt__NetworkInterfaceSetConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	std::vector<tt__Dot3Configuration * >Dot3;	/* optional element of type tt:Dot3Configuration */
	std::vector<tt__Dot11Configuration * >Dot11;	/* optional element of type tt:Dot11Configuration */
	class tt__NetworkInterfaceSetConfigurationExtension2 *Extension;	/* optional element of type tt:NetworkInterfaceSetConfigurationExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 319; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceSetConfigurationExtension() { tt__NetworkInterfaceSetConfigurationExtension::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceSetConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration (320)
/* tt:IPv6NetworkInterfaceSetConfiguration */
class SOAP_CMAC tt__IPv6NetworkInterfaceSetConfiguration
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	bool *AcceptRouterAdvert;	/* optional element of type xsd:boolean */
	std::vector<tt__PrefixedIPv6Address * >Manual;	/* optional element of type tt:PrefixedIPv6Address */
	enum tt__IPv6DHCPConfiguration *DHCP;	/* optional element of type tt:IPv6DHCPConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 320; } /* = unique type id SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6NetworkInterfaceSetConfiguration() { tt__IPv6NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~tt__IPv6NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration (321)
/* tt:IPv4NetworkInterfaceSetConfiguration */
class SOAP_CMAC tt__IPv4NetworkInterfaceSetConfiguration
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	std::vector<tt__PrefixedIPv4Address * >Manual;	/* optional element of type tt:PrefixedIPv4Address */
	bool *DHCP;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 321; } /* = unique type id SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv4NetworkInterfaceSetConfiguration() { tt__IPv4NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~tt__IPv4NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkGateway
#define SOAP_TYPE_tt__NetworkGateway (322)
/* tt:NetworkGateway */
class SOAP_CMAC tt__NetworkGateway
{
public:
	std::vector<std::string >IPv4Address;	/* optional element of type tt:IPv4Address */
	std::vector<std::string >IPv6Address;	/* optional element of type tt:IPv6Address */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 322; } /* = unique type id SOAP_TYPE_tt__NetworkGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkGateway() { tt__NetworkGateway::soap_default(NULL); }
	virtual ~tt__NetworkGateway() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfiguration
#define SOAP_TYPE_tt__NetworkZeroConfiguration (323)
/* tt:NetworkZeroConfiguration */
class SOAP_CMAC tt__NetworkZeroConfiguration
{
public:
	std::string InterfaceToken;	/* required element of type tt:ReferenceToken */
	bool Enabled;	/* required element of type xsd:boolean */
	std::vector<std::string >Addresses;	/* optional element of type tt:IPv4Address */
	class tt__NetworkZeroConfigurationExtension *Extension;	/* optional element of type tt:NetworkZeroConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 323; } /* = unique type id SOAP_TYPE_tt__NetworkZeroConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkZeroConfiguration() { tt__NetworkZeroConfiguration::soap_default(NULL); }
	virtual ~tt__NetworkZeroConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension (324)
/* tt:NetworkZeroConfigurationExtension */
class SOAP_CMAC tt__NetworkZeroConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	std::vector<tt__NetworkZeroConfiguration * >Additional;	/* optional element of type tt:NetworkZeroConfiguration */
	class tt__NetworkZeroConfigurationExtension2 *Extension;	/* optional element of type tt:NetworkZeroConfigurationExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 324; } /* = unique type id SOAP_TYPE_tt__NetworkZeroConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkZeroConfigurationExtension() { tt__NetworkZeroConfigurationExtension::soap_default(NULL); }
	virtual ~tt__NetworkZeroConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 (325)
/* tt:NetworkZeroConfigurationExtension2 */
class SOAP_CMAC tt__NetworkZeroConfigurationExtension2
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 325; } /* = unique type id SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkZeroConfigurationExtension2() { tt__NetworkZeroConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__NetworkZeroConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilter
#define SOAP_TYPE_tt__IPAddressFilter (326)
/* tt:IPAddressFilter */
class SOAP_CMAC tt__IPAddressFilter
{
public:
	enum tt__IPAddressFilterType Type;	/* required element of type tt:IPAddressFilterType */
	std::vector<tt__PrefixedIPv4Address * >IPv4Address;	/* optional element of type tt:PrefixedIPv4Address */
	std::vector<tt__PrefixedIPv6Address * >IPv6Address;	/* optional element of type tt:PrefixedIPv6Address */
	class tt__IPAddressFilterExtension *Extension;	/* optional element of type tt:IPAddressFilterExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 326; } /* = unique type id SOAP_TYPE_tt__IPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPAddressFilter() { tt__IPAddressFilter::soap_default(NULL); }
	virtual ~tt__IPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilterExtension
#define SOAP_TYPE_tt__IPAddressFilterExtension (327)
/* tt:IPAddressFilterExtension */
class SOAP_CMAC tt__IPAddressFilterExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 327; } /* = unique type id SOAP_TYPE_tt__IPAddressFilterExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPAddressFilterExtension() { tt__IPAddressFilterExtension::soap_default(NULL); }
	virtual ~tt__IPAddressFilterExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11Configuration
#define SOAP_TYPE_tt__Dot11Configuration (328)
/* tt:Dot11Configuration */
class SOAP_CMAC tt__Dot11Configuration
{
public:
	xsd__hexBinary SSID;	/* required element of type tt:Dot11SSIDType */
	enum tt__Dot11StationMode Mode;	/* required element of type tt:Dot11StationMode */
	std::string Alias;	/* required element of type tt:Name */
	std::string Priority;	/* required element of type tt:NetworkInterfaceConfigPriority */
	class tt__Dot11SecurityConfiguration *Security;	/* required element of type tt:Dot11SecurityConfiguration */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 328; } /* = unique type id SOAP_TYPE_tt__Dot11Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11Configuration() { tt__Dot11Configuration::soap_default(NULL); }
	virtual ~tt__Dot11Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityConfiguration
#define SOAP_TYPE_tt__Dot11SecurityConfiguration (329)
/* tt:Dot11SecurityConfiguration */
class SOAP_CMAC tt__Dot11SecurityConfiguration
{
public:
	enum tt__Dot11SecurityMode Mode;	/* required element of type tt:Dot11SecurityMode */
	enum tt__Dot11Cipher *Algorithm;	/* optional element of type tt:Dot11Cipher */
	class tt__Dot11PSKSet *PSK;	/* optional element of type tt:Dot11PSKSet */
	std::string *Dot1X;	/* optional element of type tt:ReferenceToken */
	class tt__Dot11SecurityConfigurationExtension *Extension;	/* optional element of type tt:Dot11SecurityConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 329; } /* = unique type id SOAP_TYPE_tt__Dot11SecurityConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11SecurityConfiguration() { tt__Dot11SecurityConfiguration::soap_default(NULL); }
	virtual ~tt__Dot11SecurityConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_tt__Dot11SecurityConfigurationExtension (330)
/* tt:Dot11SecurityConfigurationExtension */
class SOAP_CMAC tt__Dot11SecurityConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 330; } /* = unique type id SOAP_TYPE_tt__Dot11SecurityConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11SecurityConfigurationExtension() { tt__Dot11SecurityConfigurationExtension::soap_default(NULL); }
	virtual ~tt__Dot11SecurityConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKSet
#define SOAP_TYPE_tt__Dot11PSKSet (331)
/* tt:Dot11PSKSet */
class SOAP_CMAC tt__Dot11PSKSet
{
public:
	xsd__hexBinary *Key;	/* optional element of type tt:Dot11PSK */
	std::string *Passphrase;	/* optional element of type tt:Dot11PSKPassphrase */
	class tt__Dot11PSKSetExtension *Extension;	/* optional element of type tt:Dot11PSKSetExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 331; } /* = unique type id SOAP_TYPE_tt__Dot11PSKSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11PSKSet() { tt__Dot11PSKSet::soap_default(NULL); }
	virtual ~tt__Dot11PSKSet() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKSetExtension
#define SOAP_TYPE_tt__Dot11PSKSetExtension (332)
/* tt:Dot11PSKSetExtension */
class SOAP_CMAC tt__Dot11PSKSetExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 332; } /* = unique type id SOAP_TYPE_tt__Dot11PSKSetExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11PSKSetExtension() { tt__Dot11PSKSetExtension::soap_default(NULL); }
	virtual ~tt__Dot11PSKSetExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 (333)
/* tt:NetworkInterfaceSetConfigurationExtension2 */
class SOAP_CMAC tt__NetworkInterfaceSetConfigurationExtension2
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 333; } /* = unique type id SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceSetConfigurationExtension2() { tt__NetworkInterfaceSetConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceSetConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11Capabilities
#define SOAP_TYPE_tt__Dot11Capabilities (334)
/* tt:Dot11Capabilities */
class SOAP_CMAC tt__Dot11Capabilities
{
public:
	bool TKIP;	/* required element of type xsd:boolean */
	bool ScanAvailableNetworks;	/* required element of type xsd:boolean */
	bool MultipleConfiguration;	/* required element of type xsd:boolean */
	bool AdHocStationMode;	/* required element of type xsd:boolean */
	bool WEP;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 334; } /* = unique type id SOAP_TYPE_tt__Dot11Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11Capabilities() { tt__Dot11Capabilities::soap_default(NULL); }
	virtual ~tt__Dot11Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11Status
#define SOAP_TYPE_tt__Dot11Status (335)
/* tt:Dot11Status */
class SOAP_CMAC tt__Dot11Status
{
public:
	xsd__hexBinary SSID;	/* required element of type tt:Dot11SSIDType */
	std::string *BSSID;	/* optional element of type xsd:string */
	enum tt__Dot11Cipher *PairCipher;	/* optional element of type tt:Dot11Cipher */
	enum tt__Dot11Cipher *GroupCipher;	/* optional element of type tt:Dot11Cipher */
	enum tt__Dot11SignalStrength *SignalStrength;	/* optional element of type tt:Dot11SignalStrength */
	std::string ActiveConfigAlias;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 335; } /* = unique type id SOAP_TYPE_tt__Dot11Status */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11Status() { tt__Dot11Status::soap_default(NULL); }
	virtual ~tt__Dot11Status() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11AvailableNetworks
#define SOAP_TYPE_tt__Dot11AvailableNetworks (336)
/* tt:Dot11AvailableNetworks */
class SOAP_CMAC tt__Dot11AvailableNetworks
{
public:
	xsd__hexBinary SSID;	/* required element of type tt:Dot11SSIDType */
	std::string *BSSID;	/* optional element of type xsd:string */
	std::vector<enum tt__Dot11AuthAndMangementSuite >AuthAndMangementSuite;	/* optional element of type tt:Dot11AuthAndMangementSuite */
	std::vector<enum tt__Dot11Cipher >PairCipher;	/* optional element of type tt:Dot11Cipher */
	std::vector<enum tt__Dot11Cipher >GroupCipher;	/* optional element of type tt:Dot11Cipher */
	enum tt__Dot11SignalStrength *SignalStrength;	/* optional element of type tt:Dot11SignalStrength */
	class tt__Dot11AvailableNetworksExtension *Extension;	/* optional element of type tt:Dot11AvailableNetworksExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 336; } /* = unique type id SOAP_TYPE_tt__Dot11AvailableNetworks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11AvailableNetworks() { tt__Dot11AvailableNetworks::soap_default(NULL); }
	virtual ~tt__Dot11AvailableNetworks() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11AvailableNetworksExtension
#define SOAP_TYPE_tt__Dot11AvailableNetworksExtension (337)
/* tt:Dot11AvailableNetworksExtension */
class SOAP_CMAC tt__Dot11AvailableNetworksExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 337; } /* = unique type id SOAP_TYPE_tt__Dot11AvailableNetworksExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11AvailableNetworksExtension() { tt__Dot11AvailableNetworksExtension::soap_default(NULL); }
	virtual ~tt__Dot11AvailableNetworksExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Capabilities
#define SOAP_TYPE_tt__Capabilities (338)
/* tt:Capabilities */
class SOAP_CMAC tt__Capabilities
{
public:
	class tt__AnalyticsCapabilities *Analytics;	/* optional element of type tt:AnalyticsCapabilities */
	class tt__DeviceCapabilities *Device;	/* optional element of type tt:DeviceCapabilities */
	class tt__EventCapabilities *Events;	/* optional element of type tt:EventCapabilities */
	class tt__ImagingCapabilities *Imaging;	/* optional element of type tt:ImagingCapabilities */
	class tt__MediaCapabilities *Media;	/* optional element of type tt:MediaCapabilities */
	class tt__PTZCapabilities *PTZ;	/* optional element of type tt:PTZCapabilities */
	class tt__CapabilitiesExtension *Extension;	/* optional element of type tt:CapabilitiesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 338; } /* = unique type id SOAP_TYPE_tt__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Capabilities() { tt__Capabilities::soap_default(NULL); }
	virtual ~tt__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__CapabilitiesExtension
#define SOAP_TYPE_tt__CapabilitiesExtension (339)
/* tt:CapabilitiesExtension */
class SOAP_CMAC tt__CapabilitiesExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	class tt__DeviceIOCapabilities *DeviceIO;	/* optional element of type tt:DeviceIOCapabilities */
	class tt__DisplayCapabilities *Display;	/* optional element of type tt:DisplayCapabilities */
	class tt__RecordingCapabilities *Recording;	/* optional element of type tt:RecordingCapabilities */
	class tt__SearchCapabilities *Search;	/* optional element of type tt:SearchCapabilities */
	class tt__ReplayCapabilities *Replay;	/* optional element of type tt:ReplayCapabilities */
	class tt__ReceiverCapabilities *Receiver;	/* optional element of type tt:ReceiverCapabilities */
	class tt__AnalyticsDeviceCapabilities *AnalyticsDevice;	/* optional element of type tt:AnalyticsDeviceCapabilities */
	class tt__CapabilitiesExtension2 *Extensions;	/* optional element of type tt:CapabilitiesExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 339; } /* = unique type id SOAP_TYPE_tt__CapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CapabilitiesExtension() { tt__CapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__CapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__CapabilitiesExtension2
#define SOAP_TYPE_tt__CapabilitiesExtension2 (340)
/* tt:CapabilitiesExtension2 */
class SOAP_CMAC tt__CapabilitiesExtension2
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 340; } /* = unique type id SOAP_TYPE_tt__CapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CapabilitiesExtension2() { tt__CapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__CapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsCapabilities
#define SOAP_TYPE_tt__AnalyticsCapabilities (341)
/* tt:AnalyticsCapabilities */
class SOAP_CMAC tt__AnalyticsCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool RuleSupport;	/* required element of type xsd:boolean */
	bool AnalyticsModuleSupport;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 341; } /* = unique type id SOAP_TYPE_tt__AnalyticsCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsCapabilities() { tt__AnalyticsCapabilities::soap_default(NULL); }
	virtual ~tt__AnalyticsCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceCapabilities
#define SOAP_TYPE_tt__DeviceCapabilities (342)
/* tt:DeviceCapabilities */
class SOAP_CMAC tt__DeviceCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	class tt__NetworkCapabilities *Network;	/* optional element of type tt:NetworkCapabilities */
	class tt__SystemCapabilities *System;	/* optional element of type tt:SystemCapabilities */
	class tt__IOCapabilities *IO;	/* optional element of type tt:IOCapabilities */
	class tt__SecurityCapabilities *Security;	/* optional element of type tt:SecurityCapabilities */
	class tt__DeviceCapabilitiesExtension *Extension;	/* optional element of type tt:DeviceCapabilitiesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 342; } /* = unique type id SOAP_TYPE_tt__DeviceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceCapabilities() { tt__DeviceCapabilities::soap_default(NULL); }
	virtual ~tt__DeviceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceCapabilitiesExtension
#define SOAP_TYPE_tt__DeviceCapabilitiesExtension (343)
/* tt:DeviceCapabilitiesExtension */
class SOAP_CMAC tt__DeviceCapabilitiesExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 343; } /* = unique type id SOAP_TYPE_tt__DeviceCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceCapabilitiesExtension() { tt__DeviceCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__DeviceCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventCapabilities
#define SOAP_TYPE_tt__EventCapabilities (344)
/* tt:EventCapabilities */
class SOAP_CMAC tt__EventCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool WSSubscriptionPolicySupport;	/* required element of type xsd:boolean */
	bool WSPullPointSupport;	/* required element of type xsd:boolean */
	bool WSPausableSubscriptionManagerInterfaceSupport;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 344; } /* = unique type id SOAP_TYPE_tt__EventCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventCapabilities() { tt__EventCapabilities::soap_default(NULL); }
	virtual ~tt__EventCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__IOCapabilities
#define SOAP_TYPE_tt__IOCapabilities (345)
/* tt:IOCapabilities */
class SOAP_CMAC tt__IOCapabilities
{
public:
	int *InputConnectors;	/* optional element of type xsd:int */
	int *RelayOutputs;	/* optional element of type xsd:int */
	class tt__IOCapabilitiesExtension *Extension;	/* optional element of type tt:IOCapabilitiesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 345; } /* = unique type id SOAP_TYPE_tt__IOCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IOCapabilities() { tt__IOCapabilities::soap_default(NULL); }
	virtual ~tt__IOCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension
#define SOAP_TYPE_tt__IOCapabilitiesExtension (346)
/* tt:IOCapabilitiesExtension */
class SOAP_CMAC tt__IOCapabilitiesExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	bool *Auxiliary;	/* optional element of type xsd:boolean */
	std::vector<std::string >AuxiliaryCommands;	/* optional element of type tt:AuxiliaryData */
	class tt__IOCapabilitiesExtension2 *Extension;	/* required element of type tt:IOCapabilitiesExtension2 */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 346; } /* = unique type id SOAP_TYPE_tt__IOCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IOCapabilitiesExtension() { tt__IOCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__IOCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension2
#define SOAP_TYPE_tt__IOCapabilitiesExtension2 (347)
/* tt:IOCapabilitiesExtension2 */
class SOAP_CMAC tt__IOCapabilitiesExtension2
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 347; } /* = unique type id SOAP_TYPE_tt__IOCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IOCapabilitiesExtension2() { tt__IOCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__IOCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaCapabilities
#define SOAP_TYPE_tt__MediaCapabilities (348)
/* tt:MediaCapabilities */
class SOAP_CMAC tt__MediaCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	class tt__RealTimeStreamingCapabilities *StreamingCapabilities;	/* required element of type tt:RealTimeStreamingCapabilities */
	std::vector<struct soap_dom_element >__any;
	class tt__MediaCapabilitiesExtension *Extension;	/* optional element of type tt:MediaCapabilitiesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 348; } /* = unique type id SOAP_TYPE_tt__MediaCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaCapabilities() { tt__MediaCapabilities::soap_default(NULL); }
	virtual ~tt__MediaCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaCapabilitiesExtension
#define SOAP_TYPE_tt__MediaCapabilitiesExtension (349)
/* tt:MediaCapabilitiesExtension */
class SOAP_CMAC tt__MediaCapabilitiesExtension
{
public:
	class tt__ProfileCapabilities *ProfileCapabilities;	/* required element of type tt:ProfileCapabilities */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 349; } /* = unique type id SOAP_TYPE_tt__MediaCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaCapabilitiesExtension() { tt__MediaCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__MediaCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilities
#define SOAP_TYPE_tt__RealTimeStreamingCapabilities (350)
/* tt:RealTimeStreamingCapabilities */
class SOAP_CMAC tt__RealTimeStreamingCapabilities
{
public:
	bool *RTPMulticast;	/* optional element of type xsd:boolean */
	bool *RTP_USCORETCP;	/* optional element of type xsd:boolean */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional element of type xsd:boolean */
	class tt__RealTimeStreamingCapabilitiesExtension *Extension;	/* optional element of type tt:RealTimeStreamingCapabilitiesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 350; } /* = unique type id SOAP_TYPE_tt__RealTimeStreamingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RealTimeStreamingCapabilities() { tt__RealTimeStreamingCapabilities::soap_default(NULL); }
	virtual ~tt__RealTimeStreamingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension (351)
/* tt:RealTimeStreamingCapabilitiesExtension */
class SOAP_CMAC tt__RealTimeStreamingCapabilitiesExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 351; } /* = unique type id SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RealTimeStreamingCapabilitiesExtension() { tt__RealTimeStreamingCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__RealTimeStreamingCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileCapabilities
#define SOAP_TYPE_tt__ProfileCapabilities (352)
/* tt:ProfileCapabilities */
class SOAP_CMAC tt__ProfileCapabilities
{
public:
	int MaximumNumberOfProfiles;	/* required element of type xsd:int */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 352; } /* = unique type id SOAP_TYPE_tt__ProfileCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileCapabilities() { tt__ProfileCapabilities::soap_default(NULL); }
	virtual ~tt__ProfileCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilities
#define SOAP_TYPE_tt__NetworkCapabilities (353)
/* tt:NetworkCapabilities */
class SOAP_CMAC tt__NetworkCapabilities
{
public:
	bool *IPFilter;	/* optional element of type xsd:boolean */
	bool *ZeroConfiguration;	/* optional element of type xsd:boolean */
	bool *IPVersion6;	/* optional element of type xsd:boolean */
	bool *DynDNS;	/* optional element of type xsd:boolean */
	class tt__NetworkCapabilitiesExtension *Extension;	/* optional element of type tt:NetworkCapabilitiesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 353; } /* = unique type id SOAP_TYPE_tt__NetworkCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkCapabilities() { tt__NetworkCapabilities::soap_default(NULL); }
	virtual ~tt__NetworkCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension (354)
/* tt:NetworkCapabilitiesExtension */
class SOAP_CMAC tt__NetworkCapabilitiesExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	bool *Dot11Configuration;	/* optional element of type xsd:boolean */
	class tt__NetworkCapabilitiesExtension2 *Extension;	/* optional element of type tt:NetworkCapabilitiesExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 354; } /* = unique type id SOAP_TYPE_tt__NetworkCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkCapabilitiesExtension() { tt__NetworkCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__NetworkCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension2
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension2 (355)
/* tt:NetworkCapabilitiesExtension2 */
class SOAP_CMAC tt__NetworkCapabilitiesExtension2
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 355; } /* = unique type id SOAP_TYPE_tt__NetworkCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkCapabilitiesExtension2() { tt__NetworkCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__NetworkCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilities
#define SOAP_TYPE_tt__SecurityCapabilities (356)
/* tt:SecurityCapabilities */
class SOAP_CMAC tt__SecurityCapabilities
{
public:
	bool TLS1_x002e1;	/* required element of type xsd:boolean */
	bool TLS1_x002e2;	/* required element of type xsd:boolean */
	bool OnboardKeyGeneration;	/* required element of type xsd:boolean */
	bool AccessPolicyConfig;	/* required element of type xsd:boolean */
	bool X_x002e509Token;	/* required element of type xsd:boolean */
	bool SAMLToken;	/* required element of type xsd:boolean */
	bool KerberosToken;	/* required element of type xsd:boolean */
	bool RELToken;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	class tt__SecurityCapabilitiesExtension *Extension;	/* optional element of type tt:SecurityCapabilitiesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 356; } /* = unique type id SOAP_TYPE_tt__SecurityCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SecurityCapabilities() { tt__SecurityCapabilities::soap_default(NULL); }
	virtual ~tt__SecurityCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension (357)
/* tt:SecurityCapabilitiesExtension */
class SOAP_CMAC tt__SecurityCapabilitiesExtension
{
public:
	bool TLS1_x002e0;	/* required element of type xsd:boolean */
	class tt__SecurityCapabilitiesExtension2 *Extension;	/* optional element of type tt:SecurityCapabilitiesExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 357; } /* = unique type id SOAP_TYPE_tt__SecurityCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SecurityCapabilitiesExtension() { tt__SecurityCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__SecurityCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension2
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension2 (358)
/* tt:SecurityCapabilitiesExtension2 */
class SOAP_CMAC tt__SecurityCapabilitiesExtension2
{
public:
	bool Dot1X;	/* required element of type xsd:boolean */
	std::vector<int >SupportedEAPMethod;	/* optional element of type xsd:int */
	bool RemoteUserHandling;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 358; } /* = unique type id SOAP_TYPE_tt__SecurityCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SecurityCapabilitiesExtension2() { tt__SecurityCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__SecurityCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilities
#define SOAP_TYPE_tt__SystemCapabilities (359)
/* tt:SystemCapabilities */
class SOAP_CMAC tt__SystemCapabilities
{
public:
	bool DiscoveryResolve;	/* required element of type xsd:boolean */
	bool DiscoveryBye;	/* required element of type xsd:boolean */
	bool RemoteDiscovery;	/* required element of type xsd:boolean */
	bool SystemBackup;	/* required element of type xsd:boolean */
	bool SystemLogging;	/* required element of type xsd:boolean */
	bool FirmwareUpgrade;	/* required element of type xsd:boolean */
	std::vector<class tt__OnvifVersion * >SupportedVersions;	/* required element of type tt:OnvifVersion */
	class tt__SystemCapabilitiesExtension *Extension;	/* optional element of type tt:SystemCapabilitiesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 359; } /* = unique type id SOAP_TYPE_tt__SystemCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemCapabilities() { tt__SystemCapabilities::soap_default(NULL); }
	virtual ~tt__SystemCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension
#define SOAP_TYPE_tt__SystemCapabilitiesExtension (360)
/* tt:SystemCapabilitiesExtension */
class SOAP_CMAC tt__SystemCapabilitiesExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	bool *HttpFirmwareUpgrade;	/* optional element of type xsd:boolean */
	bool *HttpSystemBackup;	/* optional element of type xsd:boolean */
	bool *HttpSystemLogging;	/* optional element of type xsd:boolean */
	bool *HttpSupportInformation;	/* optional element of type xsd:boolean */
	class tt__SystemCapabilitiesExtension2 *Extension;	/* optional element of type tt:SystemCapabilitiesExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 360; } /* = unique type id SOAP_TYPE_tt__SystemCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemCapabilitiesExtension() { tt__SystemCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__SystemCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension2
#define SOAP_TYPE_tt__SystemCapabilitiesExtension2 (361)
/* tt:SystemCapabilitiesExtension2 */
class SOAP_CMAC tt__SystemCapabilitiesExtension2
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 361; } /* = unique type id SOAP_TYPE_tt__SystemCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemCapabilitiesExtension2() { tt__SystemCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__SystemCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__OnvifVersion
#define SOAP_TYPE_tt__OnvifVersion (362)
/* tt:OnvifVersion */
class SOAP_CMAC tt__OnvifVersion
{
public:
	int Major;	/* required element of type xsd:int */
	int Minor;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 362; } /* = unique type id SOAP_TYPE_tt__OnvifVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OnvifVersion() { tt__OnvifVersion::soap_default(NULL); }
	virtual ~tt__OnvifVersion() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingCapabilities
#define SOAP_TYPE_tt__ImagingCapabilities (363)
/* tt:ImagingCapabilities */
class SOAP_CMAC tt__ImagingCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 363; } /* = unique type id SOAP_TYPE_tt__ImagingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingCapabilities() { tt__ImagingCapabilities::soap_default(NULL); }
	virtual ~tt__ImagingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZCapabilities
#define SOAP_TYPE_tt__PTZCapabilities (364)
/* tt:PTZCapabilities */
class SOAP_CMAC tt__PTZCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 364; } /* = unique type id SOAP_TYPE_tt__PTZCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZCapabilities() { tt__PTZCapabilities::soap_default(NULL); }
	virtual ~tt__PTZCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceIOCapabilities
#define SOAP_TYPE_tt__DeviceIOCapabilities (365)
/* tt:DeviceIOCapabilities */
class SOAP_CMAC tt__DeviceIOCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	int VideoSources;	/* required element of type xsd:int */
	int VideoOutputs;	/* required element of type xsd:int */
	int AudioSources;	/* required element of type xsd:int */
	int AudioOutputs;	/* required element of type xsd:int */
	int RelayOutputs;	/* required element of type xsd:int */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 365; } /* = unique type id SOAP_TYPE_tt__DeviceIOCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceIOCapabilities() { tt__DeviceIOCapabilities::soap_default(NULL); }
	virtual ~tt__DeviceIOCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DisplayCapabilities
#define SOAP_TYPE_tt__DisplayCapabilities (366)
/* tt:DisplayCapabilities */
class SOAP_CMAC tt__DisplayCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool FixedLayout;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 366; } /* = unique type id SOAP_TYPE_tt__DisplayCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DisplayCapabilities() { tt__DisplayCapabilities::soap_default(NULL); }
	virtual ~tt__DisplayCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingCapabilities
#define SOAP_TYPE_tt__RecordingCapabilities (367)
/* tt:RecordingCapabilities */
class SOAP_CMAC tt__RecordingCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool ReceiverSource;	/* required element of type xsd:boolean */
	bool MediaProfileSource;	/* required element of type xsd:boolean */
	bool DynamicRecordings;	/* required element of type xsd:boolean */
	bool DynamicTracks;	/* required element of type xsd:boolean */
	int MaxStringLength;	/* required element of type xsd:int */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 367; } /* = unique type id SOAP_TYPE_tt__RecordingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingCapabilities() { tt__RecordingCapabilities::soap_default(NULL); }
	virtual ~tt__RecordingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__SearchCapabilities
#define SOAP_TYPE_tt__SearchCapabilities (368)
/* tt:SearchCapabilities */
class SOAP_CMAC tt__SearchCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool MetadataSearch;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 368; } /* = unique type id SOAP_TYPE_tt__SearchCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SearchCapabilities() { tt__SearchCapabilities::soap_default(NULL); }
	virtual ~tt__SearchCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReplayCapabilities
#define SOAP_TYPE_tt__ReplayCapabilities (369)
/* tt:ReplayCapabilities */
class SOAP_CMAC tt__ReplayCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 369; } /* = unique type id SOAP_TYPE_tt__ReplayCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReplayCapabilities() { tt__ReplayCapabilities::soap_default(NULL); }
	virtual ~tt__ReplayCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReceiverCapabilities
#define SOAP_TYPE_tt__ReceiverCapabilities (370)
/* tt:ReceiverCapabilities */
class SOAP_CMAC tt__ReceiverCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool RTP_USCOREMulticast;	/* required element of type xsd:boolean */
	bool RTP_USCORETCP;	/* required element of type xsd:boolean */
	bool RTP_USCORERTSP_USCORETCP;	/* required element of type xsd:boolean */
	int SupportedReceivers;	/* required element of type xsd:int */
	int MaximumRTSPURILength;	/* required element of type xsd:int */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 370; } /* = unique type id SOAP_TYPE_tt__ReceiverCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReceiverCapabilities() { tt__ReceiverCapabilities::soap_default(NULL); }
	virtual ~tt__ReceiverCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceCapabilities
#define SOAP_TYPE_tt__AnalyticsDeviceCapabilities (371)
/* tt:AnalyticsDeviceCapabilities */
class SOAP_CMAC tt__AnalyticsDeviceCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool *RuleSupport;	/* optional element of type xsd:boolean */
	class tt__AnalyticsDeviceExtension *Extension;	/* optional element of type tt:AnalyticsDeviceExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 371; } /* = unique type id SOAP_TYPE_tt__AnalyticsDeviceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceCapabilities() { tt__AnalyticsDeviceCapabilities::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceExtension
#define SOAP_TYPE_tt__AnalyticsDeviceExtension (372)
/* tt:AnalyticsDeviceExtension */
class SOAP_CMAC tt__AnalyticsDeviceExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 372; } /* = unique type id SOAP_TYPE_tt__AnalyticsDeviceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceExtension() { tt__AnalyticsDeviceExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemLog
#define SOAP_TYPE_tt__SystemLog (373)
/* tt:SystemLog */
class SOAP_CMAC tt__SystemLog
{
public:
	class tt__AttachmentData *Binary;	/* optional element of type tt:AttachmentData */
	std::string *String;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 373; } /* = unique type id SOAP_TYPE_tt__SystemLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemLog() { tt__SystemLog::soap_default(NULL); }
	virtual ~tt__SystemLog() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportInformation
#define SOAP_TYPE_tt__SupportInformation (374)
/* tt:SupportInformation */
class SOAP_CMAC tt__SupportInformation
{
public:
	tt__AttachmentData *Binary;	/* optional element of type tt:AttachmentData */
	std::string *String;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 374; } /* = unique type id SOAP_TYPE_tt__SupportInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportInformation() { tt__SupportInformation::soap_default(NULL); }
	virtual ~tt__SupportInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__BinaryData
#define SOAP_TYPE_tt__BinaryData (375)
/* tt:BinaryData */
class SOAP_CMAC tt__BinaryData
{
public:
	xsd__base64Binary Data;	/* required element of type xsd:base64Binary */
	char *xmime__contentType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 375; } /* = unique type id SOAP_TYPE_tt__BinaryData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BinaryData() { tt__BinaryData::soap_default(NULL); }
	virtual ~tt__BinaryData() { }
};
#endif

#ifndef SOAP_TYPE_tt__AttachmentData
#define SOAP_TYPE_tt__AttachmentData (376)
/* tt:AttachmentData */
class SOAP_CMAC tt__AttachmentData
{
public:
	struct _xop__Include xop__Include;	/* required element of type xop:Include */
	char *xmime__contentType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 376; } /* = unique type id SOAP_TYPE_tt__AttachmentData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AttachmentData() { tt__AttachmentData::soap_default(NULL); }
	virtual ~tt__AttachmentData() { }
};
#endif

#ifndef SOAP_TYPE_tt__BackupFile
#define SOAP_TYPE_tt__BackupFile (377)
/* tt:BackupFile */
class SOAP_CMAC tt__BackupFile
{
public:
	std::string Name;	/* required element of type xsd:string */
	tt__AttachmentData *Data;	/* required element of type tt:AttachmentData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 377; } /* = unique type id SOAP_TYPE_tt__BackupFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BackupFile() { tt__BackupFile::soap_default(NULL); }
	virtual ~tt__BackupFile() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemLogUriList
#define SOAP_TYPE_tt__SystemLogUriList (378)
/* tt:SystemLogUriList */
class SOAP_CMAC tt__SystemLogUriList
{
public:
	std::vector<class tt__SystemLogUri * >SystemLog;	/* optional element of type tt:SystemLogUri */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 378; } /* = unique type id SOAP_TYPE_tt__SystemLogUriList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemLogUriList() { tt__SystemLogUriList::soap_default(NULL); }
	virtual ~tt__SystemLogUriList() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemLogUri
#define SOAP_TYPE_tt__SystemLogUri (379)
/* tt:SystemLogUri */
class SOAP_CMAC tt__SystemLogUri
{
public:
	enum tt__SystemLogType Type;	/* required element of type tt:SystemLogType */
	std::string Uri;	/* required element of type xsd:anyURI */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 379; } /* = unique type id SOAP_TYPE_tt__SystemLogUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemLogUri() { tt__SystemLogUri::soap_default(NULL); }
	virtual ~tt__SystemLogUri() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemDateTime
#define SOAP_TYPE_tt__SystemDateTime (380)
/* tt:SystemDateTime */
class SOAP_CMAC tt__SystemDateTime
{
public:
	enum tt__SetDateTimeType DateTimeType;	/* required element of type tt:SetDateTimeType */
	bool DaylightSavings;	/* required element of type xsd:boolean */
	class tt__TimeZone *TimeZone;	/* optional element of type tt:TimeZone */
	class tt__DateTime *UTCDateTime;	/* optional element of type tt:DateTime */
	tt__DateTime *LocalDateTime;	/* optional element of type tt:DateTime */
	class tt__SystemDateTimeExtension *Extension;	/* optional element of type tt:SystemDateTimeExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 380; } /* = unique type id SOAP_TYPE_tt__SystemDateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemDateTime() { tt__SystemDateTime::soap_default(NULL); }
	virtual ~tt__SystemDateTime() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemDateTimeExtension
#define SOAP_TYPE_tt__SystemDateTimeExtension (381)
/* tt:SystemDateTimeExtension */
class SOAP_CMAC tt__SystemDateTimeExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 381; } /* = unique type id SOAP_TYPE_tt__SystemDateTimeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemDateTimeExtension() { tt__SystemDateTimeExtension::soap_default(NULL); }
	virtual ~tt__SystemDateTimeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__DateTime
#define SOAP_TYPE_tt__DateTime (382)
/* tt:DateTime */
class SOAP_CMAC tt__DateTime
{
public:
	class tt__Time *Time;	/* required element of type tt:Time */
	class tt__Date *Date;	/* required element of type tt:Date */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 382; } /* = unique type id SOAP_TYPE_tt__DateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DateTime() { tt__DateTime::soap_default(NULL); }
	virtual ~tt__DateTime() { }
};
#endif

#ifndef SOAP_TYPE_tt__Date
#define SOAP_TYPE_tt__Date (383)
/* tt:Date */
class SOAP_CMAC tt__Date
{
public:
	int Year;	/* required element of type xsd:int */
	int Month;	/* required element of type xsd:int */
	int Day;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 383; } /* = unique type id SOAP_TYPE_tt__Date */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Date() { tt__Date::soap_default(NULL); }
	virtual ~tt__Date() { }
};
#endif

#ifndef SOAP_TYPE_tt__Time
#define SOAP_TYPE_tt__Time (384)
/* tt:Time */
class SOAP_CMAC tt__Time
{
public:
	int Hour;	/* required element of type xsd:int */
	int Minute;	/* required element of type xsd:int */
	int Second;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 384; } /* = unique type id SOAP_TYPE_tt__Time */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Time() { tt__Time::soap_default(NULL); }
	virtual ~tt__Time() { }
};
#endif

#ifndef SOAP_TYPE_tt__TimeZone
#define SOAP_TYPE_tt__TimeZone (385)
/* tt:TimeZone */
class SOAP_CMAC tt__TimeZone
{
public:
	std::string TZ;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 385; } /* = unique type id SOAP_TYPE_tt__TimeZone */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TimeZone() { tt__TimeZone::soap_default(NULL); }
	virtual ~tt__TimeZone() { }
};
#endif

#ifndef SOAP_TYPE_tt__RemoteUser
#define SOAP_TYPE_tt__RemoteUser (386)
/* tt:RemoteUser */
class SOAP_CMAC tt__RemoteUser
{
public:
	std::string Username;	/* required element of type xsd:string */
	std::string *Password;	/* optional element of type xsd:string */
	bool UseDerivedPassword;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 386; } /* = unique type id SOAP_TYPE_tt__RemoteUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RemoteUser() { tt__RemoteUser::soap_default(NULL); }
	virtual ~tt__RemoteUser() { }
};
#endif

#ifndef SOAP_TYPE_tt__User
#define SOAP_TYPE_tt__User (387)
/* tt:User */
class SOAP_CMAC tt__User
{
public:
	std::string Username;	/* required element of type xsd:string */
	std::string *Password;	/* optional element of type xsd:string */
	enum tt__UserLevel UserLevel;	/* required element of type tt:UserLevel */
	class tt__UserExtension *Extension;	/* optional element of type tt:UserExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 387; } /* = unique type id SOAP_TYPE_tt__User */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__User() { tt__User::soap_default(NULL); }
	virtual ~tt__User() { }
};
#endif

#ifndef SOAP_TYPE_tt__UserExtension
#define SOAP_TYPE_tt__UserExtension (388)
/* tt:UserExtension */
class SOAP_CMAC tt__UserExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 388; } /* = unique type id SOAP_TYPE_tt__UserExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__UserExtension() { tt__UserExtension::soap_default(NULL); }
	virtual ~tt__UserExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateGenerationParameters
#define SOAP_TYPE_tt__CertificateGenerationParameters (389)
/* tt:CertificateGenerationParameters */
class SOAP_CMAC tt__CertificateGenerationParameters
{
public:
	std::string *CertificateID;	/* optional element of type xsd:token */
	std::string *Subject;	/* optional element of type xsd:string */
	std::string *ValidNotBefore;	/* optional element of type xsd:token */
	std::string *ValidNotAfter;	/* optional element of type xsd:token */
	class tt__CertificateGenerationParametersExtension *Extension;	/* optional element of type tt:CertificateGenerationParametersExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 389; } /* = unique type id SOAP_TYPE_tt__CertificateGenerationParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateGenerationParameters() { tt__CertificateGenerationParameters::soap_default(NULL); }
	virtual ~tt__CertificateGenerationParameters() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateGenerationParametersExtension
#define SOAP_TYPE_tt__CertificateGenerationParametersExtension (390)
/* tt:CertificateGenerationParametersExtension */
class SOAP_CMAC tt__CertificateGenerationParametersExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 390; } /* = unique type id SOAP_TYPE_tt__CertificateGenerationParametersExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateGenerationParametersExtension() { tt__CertificateGenerationParametersExtension::soap_default(NULL); }
	virtual ~tt__CertificateGenerationParametersExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Certificate
#define SOAP_TYPE_tt__Certificate (391)
/* tt:Certificate */
class SOAP_CMAC tt__Certificate
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	tt__BinaryData *Certificate;	/* required element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 391; } /* = unique type id SOAP_TYPE_tt__Certificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Certificate() { tt__Certificate::soap_default(NULL); }
	virtual ~tt__Certificate() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateStatus
#define SOAP_TYPE_tt__CertificateStatus (392)
/* tt:CertificateStatus */
class SOAP_CMAC tt__CertificateStatus
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	bool Status;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 392; } /* = unique type id SOAP_TYPE_tt__CertificateStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateStatus() { tt__CertificateStatus::soap_default(NULL); }
	virtual ~tt__CertificateStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateWithPrivateKey
#define SOAP_TYPE_tt__CertificateWithPrivateKey (393)
/* tt:CertificateWithPrivateKey */
class SOAP_CMAC tt__CertificateWithPrivateKey
{
public:
	std::string *CertificateID;	/* optional element of type xsd:token */
	tt__BinaryData *Certificate;	/* required element of type tt:BinaryData */
	tt__BinaryData *PrivateKey;	/* required element of type tt:BinaryData */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 393; } /* = unique type id SOAP_TYPE_tt__CertificateWithPrivateKey */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateWithPrivateKey() { tt__CertificateWithPrivateKey::soap_default(NULL); }
	virtual ~tt__CertificateWithPrivateKey() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateInformation
#define SOAP_TYPE_tt__CertificateInformation (394)
/* tt:CertificateInformation */
class SOAP_CMAC tt__CertificateInformation
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	std::string *IssuerDN;	/* optional element of type xsd:string */
	std::string *SubjectDN;	/* optional element of type xsd:string */
	class tt__CertificateUsage *KeyUsage;	/* optional element of type tt:CertificateUsage */
	tt__CertificateUsage *ExtendedKeyUsage;	/* optional element of type tt:CertificateUsage */
	int *KeyLength;	/* optional element of type xsd:int */
	std::string *Version;	/* optional element of type xsd:string */
	std::string *SerialNum;	/* optional element of type xsd:string */
	std::string *SignatureAlgorithm;	/* optional element of type xsd:string */
	class tt__DateTimeRange *Validity;	/* optional element of type tt:DateTimeRange */
	class tt__CertificateInformationExtension *Extension;	/* optional element of type tt:CertificateInformationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 394; } /* = unique type id SOAP_TYPE_tt__CertificateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateInformation() { tt__CertificateInformation::soap_default(NULL); }
	virtual ~tt__CertificateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateInformationExtension
#define SOAP_TYPE_tt__CertificateInformationExtension (396)
/* tt:CertificateInformationExtension */
class SOAP_CMAC tt__CertificateInformationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 396; } /* = unique type id SOAP_TYPE_tt__CertificateInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateInformationExtension() { tt__CertificateInformationExtension::soap_default(NULL); }
	virtual ~tt__CertificateInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot1XConfiguration
#define SOAP_TYPE_tt__Dot1XConfiguration (397)
/* tt:Dot1XConfiguration */
class SOAP_CMAC tt__Dot1XConfiguration
{
public:
	std::string Dot1XConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::string Identity;	/* required element of type xsd:string */
	std::string *AnonymousID;	/* optional element of type xsd:string */
	int EAPMethod;	/* required element of type xsd:int */
	std::vector<std::string >CACertificateID;	/* optional element of type xsd:token */
	class tt__EAPMethodConfiguration *EAPMethodConfiguration;	/* optional element of type tt:EAPMethodConfiguration */
	class tt__Dot1XConfigurationExtension *Extension;	/* optional element of type tt:Dot1XConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 397; } /* = unique type id SOAP_TYPE_tt__Dot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot1XConfiguration() { tt__Dot1XConfiguration::soap_default(NULL); }
	virtual ~tt__Dot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot1XConfigurationExtension
#define SOAP_TYPE_tt__Dot1XConfigurationExtension (398)
/* tt:Dot1XConfigurationExtension */
class SOAP_CMAC tt__Dot1XConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 398; } /* = unique type id SOAP_TYPE_tt__Dot1XConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot1XConfigurationExtension() { tt__Dot1XConfigurationExtension::soap_default(NULL); }
	virtual ~tt__Dot1XConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EAPMethodConfiguration
#define SOAP_TYPE_tt__EAPMethodConfiguration (399)
/* tt:EAPMethodConfiguration */
class SOAP_CMAC tt__EAPMethodConfiguration
{
public:
	class tt__TLSConfiguration *TLSConfiguration;	/* optional element of type tt:TLSConfiguration */
	std::string *Password;	/* optional element of type xsd:string */
	class tt__EapMethodExtension *Extension;	/* optional element of type tt:EapMethodExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 399; } /* = unique type id SOAP_TYPE_tt__EAPMethodConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EAPMethodConfiguration() { tt__EAPMethodConfiguration::soap_default(NULL); }
	virtual ~tt__EAPMethodConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__EapMethodExtension
#define SOAP_TYPE_tt__EapMethodExtension (400)
/* tt:EapMethodExtension */
class SOAP_CMAC tt__EapMethodExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 400; } /* = unique type id SOAP_TYPE_tt__EapMethodExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EapMethodExtension() { tt__EapMethodExtension::soap_default(NULL); }
	virtual ~tt__EapMethodExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__TLSConfiguration
#define SOAP_TYPE_tt__TLSConfiguration (401)
/* tt:TLSConfiguration */
class SOAP_CMAC tt__TLSConfiguration
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 401; } /* = unique type id SOAP_TYPE_tt__TLSConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TLSConfiguration() { tt__TLSConfiguration::soap_default(NULL); }
	virtual ~tt__TLSConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__GenericEapPwdConfigurationExtension
#define SOAP_TYPE_tt__GenericEapPwdConfigurationExtension (402)
/* tt:GenericEapPwdConfigurationExtension */
class SOAP_CMAC tt__GenericEapPwdConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 402; } /* = unique type id SOAP_TYPE_tt__GenericEapPwdConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GenericEapPwdConfigurationExtension() { tt__GenericEapPwdConfigurationExtension::soap_default(NULL); }
	virtual ~tt__GenericEapPwdConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelayOutputSettings
#define SOAP_TYPE_tt__RelayOutputSettings (403)
/* tt:RelayOutputSettings */
class SOAP_CMAC tt__RelayOutputSettings
{
public:
	enum tt__RelayMode Mode;	/* required element of type tt:RelayMode */
	LONG64 DelayTime;	/* external */
	enum tt__RelayIdleState IdleState;	/* required element of type tt:RelayIdleState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 403; } /* = unique type id SOAP_TYPE_tt__RelayOutputSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelayOutputSettings() { tt__RelayOutputSettings::soap_default(NULL); }
	virtual ~tt__RelayOutputSettings() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension
#define SOAP_TYPE_tt__PTZNodeExtension (407)
/* tt:PTZNodeExtension */
class SOAP_CMAC tt__PTZNodeExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	class tt__PTZPresetTourSupported *SupportedPresetTour;	/* optional element of type tt:PTZPresetTourSupported */
	class tt__PTZNodeExtension2 *Extension;	/* optional element of type tt:PTZNodeExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 407; } /* = unique type id SOAP_TYPE_tt__PTZNodeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZNodeExtension() { tt__PTZNodeExtension::soap_default(NULL); }
	virtual ~tt__PTZNodeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension2
#define SOAP_TYPE_tt__PTZNodeExtension2 (408)
/* tt:PTZNodeExtension2 */
class SOAP_CMAC tt__PTZNodeExtension2
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 408; } /* = unique type id SOAP_TYPE_tt__PTZNodeExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZNodeExtension2() { tt__PTZNodeExtension2::soap_default(NULL); }
	virtual ~tt__PTZNodeExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupported
#define SOAP_TYPE_tt__PTZPresetTourSupported (409)
/* tt:PTZPresetTourSupported */
class SOAP_CMAC tt__PTZPresetTourSupported
{
public:
	int MaximumNumberOfPresetTours;	/* required element of type xsd:int */
	std::vector<enum tt__PTZPresetTourOperation >PTZPresetTourOperation;	/* optional element of type tt:PTZPresetTourOperation */
	class tt__PTZPresetTourSupportedExtension *Extension;	/* optional element of type tt:PTZPresetTourSupportedExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 409; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSupported() { tt__PTZPresetTourSupported::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSupported() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupportedExtension
#define SOAP_TYPE_tt__PTZPresetTourSupportedExtension (410)
/* tt:PTZPresetTourSupportedExtension */
class SOAP_CMAC tt__PTZPresetTourSupportedExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 410; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourSupportedExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSupportedExtension() { tt__PTZPresetTourSupportedExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSupportedExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension
#define SOAP_TYPE_tt__PTZConfigurationExtension (412)
/* tt:PTZConfigurationExtension */
class SOAP_CMAC tt__PTZConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	class tt__PTControlDirection *PTControlDirection;	/* optional element of type tt:PTControlDirection */
	class tt__PTZConfigurationExtension2 *Extension;	/* optional element of type tt:PTZConfigurationExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 412; } /* = unique type id SOAP_TYPE_tt__PTZConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationExtension() { tt__PTZConfigurationExtension::soap_default(NULL); }
	virtual ~tt__PTZConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension2
#define SOAP_TYPE_tt__PTZConfigurationExtension2 (413)
/* tt:PTZConfigurationExtension2 */
class SOAP_CMAC tt__PTZConfigurationExtension2
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 413; } /* = unique type id SOAP_TYPE_tt__PTZConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationExtension2() { tt__PTZConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__PTZConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirection
#define SOAP_TYPE_tt__PTControlDirection (414)
/* tt:PTControlDirection */
class SOAP_CMAC tt__PTControlDirection
{
public:
	class tt__EFlip *EFlip;	/* optional element of type tt:EFlip */
	class tt__Reverse *Reverse;	/* optional element of type tt:Reverse */
	class tt__PTControlDirectionExtension *Extension;	/* optional element of type tt:PTControlDirectionExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 414; } /* = unique type id SOAP_TYPE_tt__PTControlDirection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirection() { tt__PTControlDirection::soap_default(NULL); }
	virtual ~tt__PTControlDirection() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionExtension
#define SOAP_TYPE_tt__PTControlDirectionExtension (415)
/* tt:PTControlDirectionExtension */
class SOAP_CMAC tt__PTControlDirectionExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 415; } /* = unique type id SOAP_TYPE_tt__PTControlDirectionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirectionExtension() { tt__PTControlDirectionExtension::soap_default(NULL); }
	virtual ~tt__PTControlDirectionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EFlip
#define SOAP_TYPE_tt__EFlip (416)
/* tt:EFlip */
class SOAP_CMAC tt__EFlip
{
public:
	enum tt__EFlipMode Mode;	/* required element of type tt:EFlipMode */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 416; } /* = unique type id SOAP_TYPE_tt__EFlip */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EFlip() { tt__EFlip::soap_default(NULL); }
	virtual ~tt__EFlip() { }
};
#endif

#ifndef SOAP_TYPE_tt__Reverse
#define SOAP_TYPE_tt__Reverse (417)
/* tt:Reverse */
class SOAP_CMAC tt__Reverse
{
public:
	enum tt__ReverseMode Mode;	/* required element of type tt:ReverseMode */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 417; } /* = unique type id SOAP_TYPE_tt__Reverse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Reverse() { tt__Reverse::soap_default(NULL); }
	virtual ~tt__Reverse() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions
#define SOAP_TYPE_tt__PTZConfigurationOptions (418)
/* tt:PTZConfigurationOptions */
class SOAP_CMAC tt__PTZConfigurationOptions
{
public:
	class tt__PTZSpaces *Spaces;	/* required element of type tt:PTZSpaces */
	tt__DurationRange *PTZTimeout;	/* required element of type tt:DurationRange */
	std::vector<struct soap_dom_element >__any;
	class tt__PTControlDirectionOptions *PTControlDirection;	/* optional element of type tt:PTControlDirectionOptions */
	class tt__PTZConfigurationOptions2 *Extension;	/* optional element of type tt:PTZConfigurationOptions2 */
	std::string *PTZRamps;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 418; } /* = unique type id SOAP_TYPE_tt__PTZConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationOptions() { tt__PTZConfigurationOptions::soap_default(NULL); }
	virtual ~tt__PTZConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions2
#define SOAP_TYPE_tt__PTZConfigurationOptions2 (419)
/* tt:PTZConfigurationOptions2 */
class SOAP_CMAC tt__PTZConfigurationOptions2
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 419; } /* = unique type id SOAP_TYPE_tt__PTZConfigurationOptions2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationOptions2() { tt__PTZConfigurationOptions2::soap_default(NULL); }
	virtual ~tt__PTZConfigurationOptions2() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptions
#define SOAP_TYPE_tt__PTControlDirectionOptions (420)
/* tt:PTControlDirectionOptions */
class SOAP_CMAC tt__PTControlDirectionOptions
{
public:
	class tt__EFlipOptions *EFlip;	/* optional element of type tt:EFlipOptions */
	class tt__ReverseOptions *Reverse;	/* optional element of type tt:ReverseOptions */
	class tt__PTControlDirectionOptionsExtension *Extension;	/* optional element of type tt:PTControlDirectionOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 420; } /* = unique type id SOAP_TYPE_tt__PTControlDirectionOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirectionOptions() { tt__PTControlDirectionOptions::soap_default(NULL); }
	virtual ~tt__PTControlDirectionOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptionsExtension
#define SOAP_TYPE_tt__PTControlDirectionOptionsExtension (421)
/* tt:PTControlDirectionOptionsExtension */
class SOAP_CMAC tt__PTControlDirectionOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 421; } /* = unique type id SOAP_TYPE_tt__PTControlDirectionOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirectionOptionsExtension() { tt__PTControlDirectionOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTControlDirectionOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EFlipOptions
#define SOAP_TYPE_tt__EFlipOptions (422)
/* tt:EFlipOptions */
class SOAP_CMAC tt__EFlipOptions
{
public:
	std::vector<enum tt__EFlipMode >Mode;	/* optional element of type tt:EFlipMode */
	class tt__EFlipOptionsExtension *Extension;	/* optional element of type tt:EFlipOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 422; } /* = unique type id SOAP_TYPE_tt__EFlipOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EFlipOptions() { tt__EFlipOptions::soap_default(NULL); }
	virtual ~tt__EFlipOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__EFlipOptionsExtension
#define SOAP_TYPE_tt__EFlipOptionsExtension (423)
/* tt:EFlipOptionsExtension */
class SOAP_CMAC tt__EFlipOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 423; } /* = unique type id SOAP_TYPE_tt__EFlipOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EFlipOptionsExtension() { tt__EFlipOptionsExtension::soap_default(NULL); }
	virtual ~tt__EFlipOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReverseOptions
#define SOAP_TYPE_tt__ReverseOptions (424)
/* tt:ReverseOptions */
class SOAP_CMAC tt__ReverseOptions
{
public:
	std::vector<enum tt__ReverseMode >Mode;	/* optional element of type tt:ReverseMode */
	class tt__ReverseOptionsExtension *Extension;	/* optional element of type tt:ReverseOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 424; } /* = unique type id SOAP_TYPE_tt__ReverseOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReverseOptions() { tt__ReverseOptions::soap_default(NULL); }
	virtual ~tt__ReverseOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReverseOptionsExtension
#define SOAP_TYPE_tt__ReverseOptionsExtension (425)
/* tt:ReverseOptionsExtension */
class SOAP_CMAC tt__ReverseOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 425; } /* = unique type id SOAP_TYPE_tt__ReverseOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReverseOptionsExtension() { tt__ReverseOptionsExtension::soap_default(NULL); }
	virtual ~tt__ReverseOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PanTiltLimits
#define SOAP_TYPE_tt__PanTiltLimits (426)
/* tt:PanTiltLimits */
class SOAP_CMAC tt__PanTiltLimits
{
public:
	class tt__Space2DDescription *Range;	/* required element of type tt:Space2DDescription */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 426; } /* = unique type id SOAP_TYPE_tt__PanTiltLimits */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PanTiltLimits() { tt__PanTiltLimits::soap_default(NULL); }
	virtual ~tt__PanTiltLimits() { }
};
#endif

#ifndef SOAP_TYPE_tt__ZoomLimits
#define SOAP_TYPE_tt__ZoomLimits (427)
/* tt:ZoomLimits */
class SOAP_CMAC tt__ZoomLimits
{
public:
	class tt__Space1DDescription *Range;	/* required element of type tt:Space1DDescription */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 427; } /* = unique type id SOAP_TYPE_tt__ZoomLimits */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ZoomLimits() { tt__ZoomLimits::soap_default(NULL); }
	virtual ~tt__ZoomLimits() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZSpaces
#define SOAP_TYPE_tt__PTZSpaces (428)
/* tt:PTZSpaces */
class SOAP_CMAC tt__PTZSpaces
{
public:
	std::vector<tt__Space2DDescription * >AbsolutePanTiltPositionSpace;	/* optional element of type tt:Space2DDescription */
	std::vector<tt__Space1DDescription * >AbsoluteZoomPositionSpace;	/* optional element of type tt:Space1DDescription */
	std::vector<tt__Space2DDescription * >RelativePanTiltTranslationSpace;	/* optional element of type tt:Space2DDescription */
	std::vector<tt__Space1DDescription * >RelativeZoomTranslationSpace;	/* optional element of type tt:Space1DDescription */
	std::vector<tt__Space2DDescription * >ContinuousPanTiltVelocitySpace;	/* optional element of type tt:Space2DDescription */
	std::vector<tt__Space1DDescription * >ContinuousZoomVelocitySpace;	/* optional element of type tt:Space1DDescription */
	std::vector<tt__Space1DDescription * >PanTiltSpeedSpace;	/* optional element of type tt:Space1DDescription */
	std::vector<tt__Space1DDescription * >ZoomSpeedSpace;	/* optional element of type tt:Space1DDescription */
	class tt__PTZSpacesExtension *Extension;	/* optional element of type tt:PTZSpacesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 428; } /* = unique type id SOAP_TYPE_tt__PTZSpaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZSpaces() { tt__PTZSpaces::soap_default(NULL); }
	virtual ~tt__PTZSpaces() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZSpacesExtension
#define SOAP_TYPE_tt__PTZSpacesExtension (429)
/* tt:PTZSpacesExtension */
class SOAP_CMAC tt__PTZSpacesExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 429; } /* = unique type id SOAP_TYPE_tt__PTZSpacesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZSpacesExtension() { tt__PTZSpacesExtension::soap_default(NULL); }
	virtual ~tt__PTZSpacesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Space2DDescription
#define SOAP_TYPE_tt__Space2DDescription (430)
/* tt:Space2DDescription */
class SOAP_CMAC tt__Space2DDescription
{
public:
	std::string URI;	/* required element of type xsd:anyURI */
	tt__FloatRange *XRange;	/* required element of type tt:FloatRange */
	tt__FloatRange *YRange;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 430; } /* = unique type id SOAP_TYPE_tt__Space2DDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Space2DDescription() { tt__Space2DDescription::soap_default(NULL); }
	virtual ~tt__Space2DDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__Space1DDescription
#define SOAP_TYPE_tt__Space1DDescription (431)
/* tt:Space1DDescription */
class SOAP_CMAC tt__Space1DDescription
{
public:
	std::string URI;	/* required element of type xsd:anyURI */
	tt__FloatRange *XRange;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 431; } /* = unique type id SOAP_TYPE_tt__Space1DDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Space1DDescription() { tt__Space1DDescription::soap_default(NULL); }
	virtual ~tt__Space1DDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZSpeed
#define SOAP_TYPE_tt__PTZSpeed (432)
/* tt:PTZSpeed */
class SOAP_CMAC tt__PTZSpeed
{
public:
	class tt__Vector2D *PanTilt;	/* optional element of type tt:Vector2D */
	class tt__Vector1D *Zoom;	/* optional element of type tt:Vector1D */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 432; } /* = unique type id SOAP_TYPE_tt__PTZSpeed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZSpeed() { tt__PTZSpeed::soap_default(NULL); }
	virtual ~tt__PTZSpeed() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPreset
#define SOAP_TYPE_tt__PTZPreset (433)
/* tt:PTZPreset */
class SOAP_CMAC tt__PTZPreset
{
public:
	std::string *Name;	/* optional element of type tt:Name */
	tt__PTZVector *PTZPosition;	/* optional element of type tt:PTZVector */
	std::string *token;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 433; } /* = unique type id SOAP_TYPE_tt__PTZPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPreset() { tt__PTZPreset::soap_default(NULL); }
	virtual ~tt__PTZPreset() { }
};
#endif

#ifndef SOAP_TYPE_tt__PresetTour
#define SOAP_TYPE_tt__PresetTour (434)
/* tt:PresetTour */
class SOAP_CMAC tt__PresetTour
{
public:
	std::string *Name;	/* optional element of type tt:Name */
	class tt__PTZPresetTourStatus *Status;	/* required element of type tt:PTZPresetTourStatus */
	bool AutoStart;	/* required element of type xsd:boolean */
	class tt__PTZPresetTourStartingCondition *StartingCondition;	/* required element of type tt:PTZPresetTourStartingCondition */
	std::vector<class tt__PTZPresetTourSpot * >TourSpot;	/* optional element of type tt:PTZPresetTourSpot */
	class tt__PTZPresetTourExtension *Extension;	/* optional element of type tt:PTZPresetTourExtension */
	std::string *token;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 434; } /* = unique type id SOAP_TYPE_tt__PresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PresetTour() { tt__PresetTour::soap_default(NULL); }
	virtual ~tt__PresetTour() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourExtension
#define SOAP_TYPE_tt__PTZPresetTourExtension (435)
/* tt:PTZPresetTourExtension */
class SOAP_CMAC tt__PTZPresetTourExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 435; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourExtension() { tt__PTZPresetTourExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpot
#define SOAP_TYPE_tt__PTZPresetTourSpot (436)
/* tt:PTZPresetTourSpot */
class SOAP_CMAC tt__PTZPresetTourSpot
{
public:
	class tt__PTZPresetTourPresetDetail *PresetDetail;	/* required element of type tt:PTZPresetTourPresetDetail */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	LONG64 *StayTime;	/* optional element of type xsd:duration */
	class tt__PTZPresetTourSpotExtension *Extension;	/* optional element of type tt:PTZPresetTourSpotExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 436; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourSpot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSpot() { tt__PTZPresetTourSpot::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSpot() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotExtension
#define SOAP_TYPE_tt__PTZPresetTourSpotExtension (437)
/* tt:PTZPresetTourSpotExtension */
class SOAP_CMAC tt__PTZPresetTourSpotExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 437; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourSpotExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSpotExtension() { tt__PTZPresetTourSpotExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSpotExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__union_PTZPresetTourPresetDetail
#define SOAP_TYPE__tt__union_PTZPresetTourPresetDetail (1570)
/* xsd:choice */
union _tt__union_PTZPresetTourPresetDetail
{
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PresetToken	(1)
	std::string *PresetToken;
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_Home	(2)
	bool Home;
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PTZPosition	(3)
	tt__PTZVector *PTZPosition;
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_TypeExtension	(4)
	class tt__PTZPresetTourTypeExtension *TypeExtension;
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetail
#define SOAP_TYPE_tt__PTZPresetTourPresetDetail (438)
/* tt:PTZPresetTourPresetDetail */
class SOAP_CMAC tt__PTZPresetTourPresetDetail
{
public:
	int __union_PTZPresetTourPresetDetail;	/* union discriminant (of union defined below) */
	union _tt__union_PTZPresetTourPresetDetail union_PTZPresetTourPresetDetail;	/* required element of type xsd:choice */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 438; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourPresetDetail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourPresetDetail() { tt__PTZPresetTourPresetDetail::soap_default(NULL); }
	virtual ~tt__PTZPresetTourPresetDetail() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourTypeExtension
#define SOAP_TYPE_tt__PTZPresetTourTypeExtension (439)
/* tt:PTZPresetTourTypeExtension */
class SOAP_CMAC tt__PTZPresetTourTypeExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 439; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourTypeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourTypeExtension() { tt__PTZPresetTourTypeExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourTypeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatus
#define SOAP_TYPE_tt__PTZPresetTourStatus (440)
/* tt:PTZPresetTourStatus */
class SOAP_CMAC tt__PTZPresetTourStatus
{
public:
	enum tt__PTZPresetTourState State;	/* required element of type tt:PTZPresetTourState */
	tt__PTZPresetTourSpot *CurrentTourSpot;	/* optional element of type tt:PTZPresetTourSpot */
	class tt__PTZPresetTourStatusExtension *Extension;	/* optional element of type tt:PTZPresetTourStatusExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 440; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStatus() { tt__PTZPresetTourStatus::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatusExtension
#define SOAP_TYPE_tt__PTZPresetTourStatusExtension (441)
/* tt:PTZPresetTourStatusExtension */
class SOAP_CMAC tt__PTZPresetTourStatusExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 441; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourStatusExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStatusExtension() { tt__PTZPresetTourStatusExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStatusExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingCondition
#define SOAP_TYPE_tt__PTZPresetTourStartingCondition (442)
/* tt:PTZPresetTourStartingCondition */
class SOAP_CMAC tt__PTZPresetTourStartingCondition
{
public:
	int *RecurringTime;	/* optional element of type xsd:int */
	LONG64 *RecurringDuration;	/* optional element of type xsd:duration */
	enum tt__PTZPresetTourDirection *Direction;	/* optional element of type tt:PTZPresetTourDirection */
	class tt__PTZPresetTourStartingConditionExtension *Extension;	/* optional element of type tt:PTZPresetTourStartingConditionExtension */
	bool *RandomPresetOrder;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 442; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourStartingCondition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingCondition() { tt__PTZPresetTourStartingCondition::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingCondition() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension (443)
/* tt:PTZPresetTourStartingConditionExtension */
class SOAP_CMAC tt__PTZPresetTourStartingConditionExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 443; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingConditionExtension() { tt__PTZPresetTourStartingConditionExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingConditionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOptions
#define SOAP_TYPE_tt__PTZPresetTourOptions (444)
/* tt:PTZPresetTourOptions */
class SOAP_CMAC tt__PTZPresetTourOptions
{
public:
	bool AutoStart;	/* required element of type xsd:boolean */
	class tt__PTZPresetTourStartingConditionOptions *StartingCondition;	/* required element of type tt:PTZPresetTourStartingConditionOptions */
	class tt__PTZPresetTourSpotOptions *TourSpot;	/* required element of type tt:PTZPresetTourSpotOptions */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 444; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourOptions() { tt__PTZPresetTourOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotOptions
#define SOAP_TYPE_tt__PTZPresetTourSpotOptions (445)
/* tt:PTZPresetTourSpotOptions */
class SOAP_CMAC tt__PTZPresetTourSpotOptions
{
public:
	class tt__PTZPresetTourPresetDetailOptions *PresetDetail;	/* required element of type tt:PTZPresetTourPresetDetailOptions */
	tt__DurationRange *StayTime;	/* required element of type tt:DurationRange */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 445; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourSpotOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSpotOptions() { tt__PTZPresetTourSpotOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSpotOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions (446)
/* tt:PTZPresetTourPresetDetailOptions */
class SOAP_CMAC tt__PTZPresetTourPresetDetailOptions
{
public:
	std::vector<std::string >PresetToken;	/* optional element of type tt:ReferenceToken */
	bool *Home;	/* optional element of type xsd:boolean */
	tt__Space2DDescription *PanTiltPositionSpace;	/* optional element of type tt:Space2DDescription */
	tt__Space1DDescription *ZoomPositionSpace;	/* optional element of type tt:Space1DDescription */
	class tt__PTZPresetTourPresetDetailOptionsExtension *Extension;	/* optional element of type tt:PTZPresetTourPresetDetailOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 446; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourPresetDetailOptions() { tt__PTZPresetTourPresetDetailOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourPresetDetailOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension (447)
/* tt:PTZPresetTourPresetDetailOptionsExtension */
class SOAP_CMAC tt__PTZPresetTourPresetDetailOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 447; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourPresetDetailOptionsExtension() { tt__PTZPresetTourPresetDetailOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourPresetDetailOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions (448)
/* tt:PTZPresetTourStartingConditionOptions */
class SOAP_CMAC tt__PTZPresetTourStartingConditionOptions
{
public:
	tt__IntRange *RecurringTime;	/* optional element of type tt:IntRange */
	tt__DurationRange *RecurringDuration;	/* optional element of type tt:DurationRange */
	std::vector<enum tt__PTZPresetTourDirection >Direction;	/* optional element of type tt:PTZPresetTourDirection */
	class tt__PTZPresetTourStartingConditionOptionsExtension *Extension;	/* optional element of type tt:PTZPresetTourStartingConditionOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 448; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingConditionOptions() { tt__PTZPresetTourStartingConditionOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingConditionOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension (449)
/* tt:PTZPresetTourStartingConditionOptionsExtension */
class SOAP_CMAC tt__PTZPresetTourStartingConditionOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 449; } /* = unique type id SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingConditionOptionsExtension() { tt__PTZPresetTourStartingConditionOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingConditionOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingStatus
#define SOAP_TYPE_tt__ImagingStatus (450)
/* tt:ImagingStatus */
class SOAP_CMAC tt__ImagingStatus
{
public:
	class tt__FocusStatus *FocusStatus;	/* required element of type tt:FocusStatus */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 450; } /* = unique type id SOAP_TYPE_tt__ImagingStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingStatus() { tt__ImagingStatus::soap_default(NULL); }
	virtual ~tt__ImagingStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusStatus
#define SOAP_TYPE_tt__FocusStatus (451)
/* tt:FocusStatus */
class SOAP_CMAC tt__FocusStatus
{
public:
	float Position;	/* required element of type xsd:float */
	enum tt__MoveStatus MoveStatus;	/* required element of type tt:MoveStatus */
	std::string Error;	/* required element of type xsd:string */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 451; } /* = unique type id SOAP_TYPE_tt__FocusStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusStatus() { tt__FocusStatus::soap_default(NULL); }
	virtual ~tt__FocusStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration
#define SOAP_TYPE_tt__FocusConfiguration (452)
/* tt:FocusConfiguration */
class SOAP_CMAC tt__FocusConfiguration
{
public:
	enum tt__AutoFocusMode AutoFocusMode;	/* required element of type tt:AutoFocusMode */
	float DefaultSpeed;	/* required element of type xsd:float */
	float NearLimit;	/* required element of type xsd:float */
	float FarLimit;	/* required element of type xsd:float */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 452; } /* = unique type id SOAP_TYPE_tt__FocusConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusConfiguration() { tt__FocusConfiguration::soap_default(NULL); }
	virtual ~tt__FocusConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettings
#define SOAP_TYPE_tt__ImagingSettings (453)
/* tt:ImagingSettings */
class SOAP_CMAC tt__ImagingSettings
{
public:
	class tt__BacklightCompensation *BacklightCompensation;	/* optional element of type tt:BacklightCompensation */
	float *Brightness;	/* optional element of type xsd:float */
	float *ColorSaturation;	/* optional element of type xsd:float */
	float *Contrast;	/* optional element of type xsd:float */
	class tt__Exposure *Exposure;	/* optional element of type tt:Exposure */
	tt__FocusConfiguration *Focus;	/* optional element of type tt:FocusConfiguration */
	enum tt__IrCutFilterMode *IrCutFilter;	/* optional element of type tt:IrCutFilterMode */
	float *Sharpness;	/* optional element of type xsd:float */
	class tt__WideDynamicRange *WideDynamicRange;	/* optional element of type tt:WideDynamicRange */
	class tt__WhiteBalance *WhiteBalance;	/* optional element of type tt:WhiteBalance */
	class tt__ImagingSettingsExtension *Extension;	/* optional element of type tt:ImagingSettingsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 453; } /* = unique type id SOAP_TYPE_tt__ImagingSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettings() { tt__ImagingSettings::soap_default(NULL); }
	virtual ~tt__ImagingSettings() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension
#define SOAP_TYPE_tt__ImagingSettingsExtension (454)
/* tt:ImagingSettingsExtension */
class SOAP_CMAC tt__ImagingSettingsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 454; } /* = unique type id SOAP_TYPE_tt__ImagingSettingsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension() { tt__ImagingSettingsExtension::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Exposure
#define SOAP_TYPE_tt__Exposure (455)
/* tt:Exposure */
class SOAP_CMAC tt__Exposure
{
public:
	enum tt__ExposureMode Mode;	/* required element of type tt:ExposureMode */
	enum tt__ExposurePriority Priority;	/* required element of type tt:ExposurePriority */
	class tt__Rectangle *Window;	/* required element of type tt:Rectangle */
	float MinExposureTime;	/* required element of type xsd:float */
	float MaxExposureTime;	/* required element of type xsd:float */
	float MinGain;	/* required element of type xsd:float */
	float MaxGain;	/* required element of type xsd:float */
	float MinIris;	/* required element of type xsd:float */
	float MaxIris;	/* required element of type xsd:float */
	float ExposureTime;	/* required element of type xsd:float */
	float Gain;	/* required element of type xsd:float */
	float Iris;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 455; } /* = unique type id SOAP_TYPE_tt__Exposure */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Exposure() { tt__Exposure::soap_default(NULL); }
	virtual ~tt__Exposure() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRange
#define SOAP_TYPE_tt__WideDynamicRange (456)
/* tt:WideDynamicRange */
class SOAP_CMAC tt__WideDynamicRange
{
public:
	enum tt__WideDynamicMode Mode;	/* required element of type tt:WideDynamicMode */
	float Level;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 456; } /* = unique type id SOAP_TYPE_tt__WideDynamicRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRange() { tt__WideDynamicRange::soap_default(NULL); }
	virtual ~tt__WideDynamicRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensation
#define SOAP_TYPE_tt__BacklightCompensation (457)
/* tt:BacklightCompensation */
class SOAP_CMAC tt__BacklightCompensation
{
public:
	enum tt__BacklightCompensationMode Mode;	/* required element of type tt:BacklightCompensationMode */
	float Level;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 457; } /* = unique type id SOAP_TYPE_tt__BacklightCompensation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensation() { tt__BacklightCompensation::soap_default(NULL); }
	virtual ~tt__BacklightCompensation() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions
#define SOAP_TYPE_tt__ImagingOptions (458)
/* tt:ImagingOptions */
class SOAP_CMAC tt__ImagingOptions
{
public:
	class tt__BacklightCompensationOptions *BacklightCompensation;	/* required element of type tt:BacklightCompensationOptions */
	tt__FloatRange *Brightness;	/* required element of type tt:FloatRange */
	tt__FloatRange *ColorSaturation;	/* required element of type tt:FloatRange */
	tt__FloatRange *Contrast;	/* required element of type tt:FloatRange */
	class tt__ExposureOptions *Exposure;	/* required element of type tt:ExposureOptions */
	class tt__FocusOptions *Focus;	/* required element of type tt:FocusOptions */
	std::vector<enum tt__IrCutFilterMode >IrCutFilterModes;	/* required element of type tt:IrCutFilterMode */
	tt__FloatRange *Sharpness;	/* required element of type tt:FloatRange */
	class tt__WideDynamicRangeOptions *WideDynamicRange;	/* required element of type tt:WideDynamicRangeOptions */
	class tt__WhiteBalanceOptions *WhiteBalance;	/* required element of type tt:WhiteBalanceOptions */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 458; } /* = unique type id SOAP_TYPE_tt__ImagingOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions() { tt__ImagingOptions::soap_default(NULL); }
	virtual ~tt__ImagingOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions
#define SOAP_TYPE_tt__WideDynamicRangeOptions (459)
/* tt:WideDynamicRangeOptions */
class SOAP_CMAC tt__WideDynamicRangeOptions
{
public:
	std::vector<enum tt__WideDynamicMode >Mode;	/* required element of type tt:WideDynamicMode */
	tt__FloatRange *Level;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 459; } /* = unique type id SOAP_TYPE_tt__WideDynamicRangeOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRangeOptions() { tt__WideDynamicRangeOptions::soap_default(NULL); }
	virtual ~tt__WideDynamicRangeOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationOptions
#define SOAP_TYPE_tt__BacklightCompensationOptions (460)
/* tt:BacklightCompensationOptions */
class SOAP_CMAC tt__BacklightCompensationOptions
{
public:
	std::vector<enum tt__WideDynamicMode >Mode;	/* required element of type tt:WideDynamicMode */
	tt__FloatRange *Level;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 460; } /* = unique type id SOAP_TYPE_tt__BacklightCompensationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensationOptions() { tt__BacklightCompensationOptions::soap_default(NULL); }
	virtual ~tt__BacklightCompensationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusOptions
#define SOAP_TYPE_tt__FocusOptions (461)
/* tt:FocusOptions */
class SOAP_CMAC tt__FocusOptions
{
public:
	std::vector<enum tt__AutoFocusMode >AutoFocusModes;	/* optional element of type tt:AutoFocusMode */
	tt__FloatRange *DefaultSpeed;	/* required element of type tt:FloatRange */
	tt__FloatRange *NearLimit;	/* required element of type tt:FloatRange */
	tt__FloatRange *FarLimit;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 461; } /* = unique type id SOAP_TYPE_tt__FocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusOptions() { tt__FocusOptions::soap_default(NULL); }
	virtual ~tt__FocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ExposureOptions
#define SOAP_TYPE_tt__ExposureOptions (462)
/* tt:ExposureOptions */
class SOAP_CMAC tt__ExposureOptions
{
public:
	std::vector<enum tt__ExposureMode >Mode;	/* required element of type tt:ExposureMode */
	std::vector<enum tt__ExposurePriority >Priority;	/* required element of type tt:ExposurePriority */
	tt__FloatRange *MinExposureTime;	/* required element of type tt:FloatRange */
	tt__FloatRange *MaxExposureTime;	/* required element of type tt:FloatRange */
	tt__FloatRange *MinGain;	/* required element of type tt:FloatRange */
	tt__FloatRange *MaxGain;	/* required element of type tt:FloatRange */
	tt__FloatRange *MinIris;	/* required element of type tt:FloatRange */
	tt__FloatRange *MaxIris;	/* required element of type tt:FloatRange */
	tt__FloatRange *ExposureTime;	/* required element of type tt:FloatRange */
	tt__FloatRange *Gain;	/* required element of type tt:FloatRange */
	tt__FloatRange *Iris;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 462; } /* = unique type id SOAP_TYPE_tt__ExposureOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ExposureOptions() { tt__ExposureOptions::soap_default(NULL); }
	virtual ~tt__ExposureOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions
#define SOAP_TYPE_tt__WhiteBalanceOptions (463)
/* tt:WhiteBalanceOptions */
class SOAP_CMAC tt__WhiteBalanceOptions
{
public:
	std::vector<enum tt__WhiteBalanceMode >Mode;	/* required element of type tt:WhiteBalanceMode */
	tt__FloatRange *YrGain;	/* required element of type tt:FloatRange */
	tt__FloatRange *YbGain;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 463; } /* = unique type id SOAP_TYPE_tt__WhiteBalanceOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalanceOptions() { tt__WhiteBalanceOptions::soap_default(NULL); }
	virtual ~tt__WhiteBalanceOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusMove
#define SOAP_TYPE_tt__FocusMove (464)
/* tt:FocusMove */
class SOAP_CMAC tt__FocusMove
{
public:
	class tt__AbsoluteFocus *Absolute;	/* optional element of type tt:AbsoluteFocus */
	class tt__RelativeFocus *Relative;	/* optional element of type tt:RelativeFocus */
	class tt__ContinuousFocus *Continuous;	/* optional element of type tt:ContinuousFocus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 464; } /* = unique type id SOAP_TYPE_tt__FocusMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusMove() { tt__FocusMove::soap_default(NULL); }
	virtual ~tt__FocusMove() { }
};
#endif

#ifndef SOAP_TYPE_tt__AbsoluteFocus
#define SOAP_TYPE_tt__AbsoluteFocus (465)
/* tt:AbsoluteFocus */
class SOAP_CMAC tt__AbsoluteFocus
{
public:
	float Position;	/* required element of type xsd:float */
	float *Speed;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 465; } /* = unique type id SOAP_TYPE_tt__AbsoluteFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AbsoluteFocus() { tt__AbsoluteFocus::soap_default(NULL); }
	virtual ~tt__AbsoluteFocus() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelativeFocus
#define SOAP_TYPE_tt__RelativeFocus (466)
/* tt:RelativeFocus */
class SOAP_CMAC tt__RelativeFocus
{
public:
	float Distance;	/* required element of type xsd:float */
	float *Speed;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 466; } /* = unique type id SOAP_TYPE_tt__RelativeFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelativeFocus() { tt__RelativeFocus::soap_default(NULL); }
	virtual ~tt__RelativeFocus() { }
};
#endif

#ifndef SOAP_TYPE_tt__ContinuousFocus
#define SOAP_TYPE_tt__ContinuousFocus (467)
/* tt:ContinuousFocus */
class SOAP_CMAC tt__ContinuousFocus
{
public:
	float Speed;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 467; } /* = unique type id SOAP_TYPE_tt__ContinuousFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ContinuousFocus() { tt__ContinuousFocus::soap_default(NULL); }
	virtual ~tt__ContinuousFocus() { }
};
#endif

#ifndef SOAP_TYPE_tt__MoveOptions
#define SOAP_TYPE_tt__MoveOptions (468)
/* tt:MoveOptions */
class SOAP_CMAC tt__MoveOptions
{
public:
	class tt__AbsoluteFocusOptions *Absolute;	/* optional element of type tt:AbsoluteFocusOptions */
	class tt__RelativeFocusOptions *Relative;	/* optional element of type tt:RelativeFocusOptions */
	class tt__ContinuousFocusOptions *Continuous;	/* optional element of type tt:ContinuousFocusOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 468; } /* = unique type id SOAP_TYPE_tt__MoveOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MoveOptions() { tt__MoveOptions::soap_default(NULL); }
	virtual ~tt__MoveOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AbsoluteFocusOptions
#define SOAP_TYPE_tt__AbsoluteFocusOptions (469)
/* tt:AbsoluteFocusOptions */
class SOAP_CMAC tt__AbsoluteFocusOptions
{
public:
	tt__FloatRange *Position;	/* required element of type tt:FloatRange */
	tt__FloatRange *Speed;	/* optional element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 469; } /* = unique type id SOAP_TYPE_tt__AbsoluteFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AbsoluteFocusOptions() { tt__AbsoluteFocusOptions::soap_default(NULL); }
	virtual ~tt__AbsoluteFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelativeFocusOptions
#define SOAP_TYPE_tt__RelativeFocusOptions (470)
/* tt:RelativeFocusOptions */
class SOAP_CMAC tt__RelativeFocusOptions
{
public:
	tt__FloatRange *Distance;	/* required element of type tt:FloatRange */
	tt__FloatRange *Speed;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 470; } /* = unique type id SOAP_TYPE_tt__RelativeFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelativeFocusOptions() { tt__RelativeFocusOptions::soap_default(NULL); }
	virtual ~tt__RelativeFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ContinuousFocusOptions
#define SOAP_TYPE_tt__ContinuousFocusOptions (471)
/* tt:ContinuousFocusOptions */
class SOAP_CMAC tt__ContinuousFocusOptions
{
public:
	tt__FloatRange *Speed;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 471; } /* = unique type id SOAP_TYPE_tt__ContinuousFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ContinuousFocusOptions() { tt__ContinuousFocusOptions::soap_default(NULL); }
	virtual ~tt__ContinuousFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance
#define SOAP_TYPE_tt__WhiteBalance (472)
/* tt:WhiteBalance */
class SOAP_CMAC tt__WhiteBalance
{
public:
	enum tt__WhiteBalanceMode Mode;	/* required element of type tt:WhiteBalanceMode */
	float CrGain;	/* required element of type xsd:float */
	float CbGain;	/* required element of type xsd:float */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 472; } /* = unique type id SOAP_TYPE_tt__WhiteBalance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalance() { tt__WhiteBalance::soap_default(NULL); }
	virtual ~tt__WhiteBalance() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingStatus20
#define SOAP_TYPE_tt__ImagingStatus20 (473)
/* tt:ImagingStatus20 */
class SOAP_CMAC tt__ImagingStatus20
{
public:
	class tt__FocusStatus20 *FocusStatus20;	/* optional element of type tt:FocusStatus20 */
	class tt__ImagingStatus20Extension *Extension;	/* optional element of type tt:ImagingStatus20Extension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 473; } /* = unique type id SOAP_TYPE_tt__ImagingStatus20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingStatus20() { tt__ImagingStatus20::soap_default(NULL); }
	virtual ~tt__ImagingStatus20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingStatus20Extension
#define SOAP_TYPE_tt__ImagingStatus20Extension (474)
/* tt:ImagingStatus20Extension */
class SOAP_CMAC tt__ImagingStatus20Extension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 474; } /* = unique type id SOAP_TYPE_tt__ImagingStatus20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingStatus20Extension() { tt__ImagingStatus20Extension::soap_default(NULL); }
	virtual ~tt__ImagingStatus20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusStatus20
#define SOAP_TYPE_tt__FocusStatus20 (475)
/* tt:FocusStatus20 */
class SOAP_CMAC tt__FocusStatus20
{
public:
	float Position;	/* required element of type xsd:float */
	enum tt__MoveStatus MoveStatus;	/* required element of type tt:MoveStatus */
	std::string *Error;	/* optional element of type xsd:string */
	class tt__FocusStatus20Extension *Extension;	/* optional element of type tt:FocusStatus20Extension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 475; } /* = unique type id SOAP_TYPE_tt__FocusStatus20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusStatus20() { tt__FocusStatus20::soap_default(NULL); }
	virtual ~tt__FocusStatus20() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusStatus20Extension
#define SOAP_TYPE_tt__FocusStatus20Extension (476)
/* tt:FocusStatus20Extension */
class SOAP_CMAC tt__FocusStatus20Extension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 476; } /* = unique type id SOAP_TYPE_tt__FocusStatus20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusStatus20Extension() { tt__FocusStatus20Extension::soap_default(NULL); }
	virtual ~tt__FocusStatus20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettings20
#define SOAP_TYPE_tt__ImagingSettings20 (477)
/* tt:ImagingSettings20 */
class SOAP_CMAC tt__ImagingSettings20
{
public:
	class tt__BacklightCompensation20 *BacklightCompensation;	/* optional element of type tt:BacklightCompensation20 */
	float *Brightness;	/* optional element of type xsd:float */
	float *ColorSaturation;	/* optional element of type xsd:float */
	float *Contrast;	/* optional element of type xsd:float */
	class tt__Exposure20 *Exposure;	/* optional element of type tt:Exposure20 */
	class tt__FocusConfiguration20 *Focus;	/* optional element of type tt:FocusConfiguration20 */
	enum tt__IrCutFilterMode *IrCutFilter;	/* optional element of type tt:IrCutFilterMode */
	float *Sharpness;	/* optional element of type xsd:float */
	class tt__WideDynamicRange20 *WideDynamicRange;	/* optional element of type tt:WideDynamicRange20 */
	class tt__WhiteBalance20 *WhiteBalance;	/* optional element of type tt:WhiteBalance20 */
	class tt__ImagingSettingsExtension20 *Extension;	/* optional element of type tt:ImagingSettingsExtension20 */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 477; } /* = unique type id SOAP_TYPE_tt__ImagingSettings20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettings20() { tt__ImagingSettings20::soap_default(NULL); }
	virtual ~tt__ImagingSettings20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension20
#define SOAP_TYPE_tt__ImagingSettingsExtension20 (478)
/* tt:ImagingSettingsExtension20 */
class SOAP_CMAC tt__ImagingSettingsExtension20
{
public:
	std::vector<struct soap_dom_element >__any;
	class tt__ImageStabilization *ImageStabilization;	/* optional element of type tt:ImageStabilization */
	class tt__ImagingSettingsExtension202 *Extension;	/* optional element of type tt:ImagingSettingsExtension202 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 478; } /* = unique type id SOAP_TYPE_tt__ImagingSettingsExtension20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension20() { tt__ImagingSettingsExtension20::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension202
#define SOAP_TYPE_tt__ImagingSettingsExtension202 (479)
/* tt:ImagingSettingsExtension202 */
class SOAP_CMAC tt__ImagingSettingsExtension202
{
public:
	std::vector<class tt__IrCutFilterAutoAdjustment * >IrCutFilterAutoAdjustment;	/* optional element of type tt:IrCutFilterAutoAdjustment */
	class tt__ImagingSettingsExtension203 *Extension;	/* optional element of type tt:ImagingSettingsExtension203 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 479; } /* = unique type id SOAP_TYPE_tt__ImagingSettingsExtension202 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension202() { tt__ImagingSettingsExtension202::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension202() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension203
#define SOAP_TYPE_tt__ImagingSettingsExtension203 (480)
/* tt:ImagingSettingsExtension203 */
class SOAP_CMAC tt__ImagingSettingsExtension203
{
public:
	class tt__ToneCompensation *ToneCompensation;	/* optional element of type tt:ToneCompensation */
	class tt__Defogging *Defogging;	/* optional element of type tt:Defogging */
	class tt__NoiseReduction *NoiseReduction;	/* optional element of type tt:NoiseReduction */
	class tt__ImagingSettingsExtension204 *Extension;	/* optional element of type tt:ImagingSettingsExtension204 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 480; } /* = unique type id SOAP_TYPE_tt__ImagingSettingsExtension203 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension203() { tt__ImagingSettingsExtension203::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension203() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension204
#define SOAP_TYPE_tt__ImagingSettingsExtension204 (481)
/* tt:ImagingSettingsExtension204 */
class SOAP_CMAC tt__ImagingSettingsExtension204
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 481; } /* = unique type id SOAP_TYPE_tt__ImagingSettingsExtension204 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension204() { tt__ImagingSettingsExtension204::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension204() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilization
#define SOAP_TYPE_tt__ImageStabilization (482)
/* tt:ImageStabilization */
class SOAP_CMAC tt__ImageStabilization
{
public:
	enum tt__ImageStabilizationMode Mode;	/* required element of type tt:ImageStabilizationMode */
	float *Level;	/* optional element of type xsd:float */
	class tt__ImageStabilizationExtension *Extension;	/* optional element of type tt:ImageStabilizationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 482; } /* = unique type id SOAP_TYPE_tt__ImageStabilization */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilization() { tt__ImageStabilization::soap_default(NULL); }
	virtual ~tt__ImageStabilization() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationExtension
#define SOAP_TYPE_tt__ImageStabilizationExtension (483)
/* tt:ImageStabilizationExtension */
class SOAP_CMAC tt__ImageStabilizationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 483; } /* = unique type id SOAP_TYPE_tt__ImageStabilizationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilizationExtension() { tt__ImageStabilizationExtension::soap_default(NULL); }
	virtual ~tt__ImageStabilizationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustment
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustment (484)
/* tt:IrCutFilterAutoAdjustment */
class SOAP_CMAC tt__IrCutFilterAutoAdjustment
{
public:
	std::string BoundaryType;	/* required element of type xsd:string */
	float *BoundaryOffset;	/* optional element of type xsd:float */
	LONG64 *ResponseTime;	/* optional element of type xsd:duration */
	class tt__IrCutFilterAutoAdjustmentExtension *Extension;	/* optional element of type tt:IrCutFilterAutoAdjustmentExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 484; } /* = unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IrCutFilterAutoAdjustment() { tt__IrCutFilterAutoAdjustment::soap_default(NULL); }
	virtual ~tt__IrCutFilterAutoAdjustment() { }
};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension (485)
/* tt:IrCutFilterAutoAdjustmentExtension */
class SOAP_CMAC tt__IrCutFilterAutoAdjustmentExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 485; } /* = unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustmentExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IrCutFilterAutoAdjustmentExtension() { tt__IrCutFilterAutoAdjustmentExtension::soap_default(NULL); }
	virtual ~tt__IrCutFilterAutoAdjustmentExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRange20
#define SOAP_TYPE_tt__WideDynamicRange20 (486)
/* tt:WideDynamicRange20 */
class SOAP_CMAC tt__WideDynamicRange20
{
public:
	enum tt__WideDynamicMode Mode;	/* required element of type tt:WideDynamicMode */
	float *Level;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 486; } /* = unique type id SOAP_TYPE_tt__WideDynamicRange20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRange20() { tt__WideDynamicRange20::soap_default(NULL); }
	virtual ~tt__WideDynamicRange20() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensation20
#define SOAP_TYPE_tt__BacklightCompensation20 (487)
/* tt:BacklightCompensation20 */
class SOAP_CMAC tt__BacklightCompensation20
{
public:
	enum tt__BacklightCompensationMode Mode;	/* required element of type tt:BacklightCompensationMode */
	float *Level;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 487; } /* = unique type id SOAP_TYPE_tt__BacklightCompensation20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensation20() { tt__BacklightCompensation20::soap_default(NULL); }
	virtual ~tt__BacklightCompensation20() { }
};
#endif

#ifndef SOAP_TYPE_tt__Exposure20
#define SOAP_TYPE_tt__Exposure20 (488)
/* tt:Exposure20 */
class SOAP_CMAC tt__Exposure20
{
public:
	enum tt__ExposureMode Mode;	/* required element of type tt:ExposureMode */
	enum tt__ExposurePriority *Priority;	/* optional element of type tt:ExposurePriority */
	tt__Rectangle *Window;	/* optional element of type tt:Rectangle */
	float *MinExposureTime;	/* optional element of type xsd:float */
	float *MaxExposureTime;	/* optional element of type xsd:float */
	float *MinGain;	/* optional element of type xsd:float */
	float *MaxGain;	/* optional element of type xsd:float */
	float *MinIris;	/* optional element of type xsd:float */
	float *MaxIris;	/* optional element of type xsd:float */
	float *ExposureTime;	/* optional element of type xsd:float */
	float *Gain;	/* optional element of type xsd:float */
	float *Iris;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 488; } /* = unique type id SOAP_TYPE_tt__Exposure20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Exposure20() { tt__Exposure20::soap_default(NULL); }
	virtual ~tt__Exposure20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ToneCompensation
#define SOAP_TYPE_tt__ToneCompensation (489)
/* tt:ToneCompensation */
class SOAP_CMAC tt__ToneCompensation
{
public:
	std::string Mode;	/* required element of type xsd:string */
	float *Level;	/* optional element of type xsd:float */
	class tt__ToneCompensationExtension *Extension;	/* optional element of type tt:ToneCompensationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 489; } /* = unique type id SOAP_TYPE_tt__ToneCompensation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ToneCompensation() { tt__ToneCompensation::soap_default(NULL); }
	virtual ~tt__ToneCompensation() { }
};
#endif

#ifndef SOAP_TYPE_tt__ToneCompensationExtension
#define SOAP_TYPE_tt__ToneCompensationExtension (490)
/* tt:ToneCompensationExtension */
class SOAP_CMAC tt__ToneCompensationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 490; } /* = unique type id SOAP_TYPE_tt__ToneCompensationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ToneCompensationExtension() { tt__ToneCompensationExtension::soap_default(NULL); }
	virtual ~tt__ToneCompensationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Defogging
#define SOAP_TYPE_tt__Defogging (491)
/* tt:Defogging */
class SOAP_CMAC tt__Defogging
{
public:
	std::string Mode;	/* required element of type xsd:string */
	float *Level;	/* optional element of type xsd:float */
	class tt__DefoggingExtension *Extension;	/* optional element of type tt:DefoggingExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 491; } /* = unique type id SOAP_TYPE_tt__Defogging */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Defogging() { tt__Defogging::soap_default(NULL); }
	virtual ~tt__Defogging() { }
};
#endif

#ifndef SOAP_TYPE_tt__DefoggingExtension
#define SOAP_TYPE_tt__DefoggingExtension (492)
/* tt:DefoggingExtension */
class SOAP_CMAC tt__DefoggingExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 492; } /* = unique type id SOAP_TYPE_tt__DefoggingExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DefoggingExtension() { tt__DefoggingExtension::soap_default(NULL); }
	virtual ~tt__DefoggingExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NoiseReduction
#define SOAP_TYPE_tt__NoiseReduction (493)
/* tt:NoiseReduction */
class SOAP_CMAC tt__NoiseReduction
{
public:
	float Level;	/* required element of type xsd:float */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 493; } /* = unique type id SOAP_TYPE_tt__NoiseReduction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NoiseReduction() { tt__NoiseReduction::soap_default(NULL); }
	virtual ~tt__NoiseReduction() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20
#define SOAP_TYPE_tt__ImagingOptions20 (494)
/* tt:ImagingOptions20 */
class SOAP_CMAC tt__ImagingOptions20
{
public:
	class tt__BacklightCompensationOptions20 *BacklightCompensation;	/* optional element of type tt:BacklightCompensationOptions20 */
	tt__FloatRange *Brightness;	/* optional element of type tt:FloatRange */
	tt__FloatRange *ColorSaturation;	/* optional element of type tt:FloatRange */
	tt__FloatRange *Contrast;	/* optional element of type tt:FloatRange */
	class tt__ExposureOptions20 *Exposure;	/* optional element of type tt:ExposureOptions20 */
	class tt__FocusOptions20 *Focus;	/* optional element of type tt:FocusOptions20 */
	std::vector<enum tt__IrCutFilterMode >IrCutFilterModes;	/* optional element of type tt:IrCutFilterMode */
	tt__FloatRange *Sharpness;	/* optional element of type tt:FloatRange */
	class tt__WideDynamicRangeOptions20 *WideDynamicRange;	/* optional element of type tt:WideDynamicRangeOptions20 */
	class tt__WhiteBalanceOptions20 *WhiteBalance;	/* optional element of type tt:WhiteBalanceOptions20 */
	class tt__ImagingOptions20Extension *Extension;	/* optional element of type tt:ImagingOptions20Extension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 494; } /* = unique type id SOAP_TYPE_tt__ImagingOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20() { tt__ImagingOptions20::soap_default(NULL); }
	virtual ~tt__ImagingOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension
#define SOAP_TYPE_tt__ImagingOptions20Extension (495)
/* tt:ImagingOptions20Extension */
class SOAP_CMAC tt__ImagingOptions20Extension
{
public:
	std::vector<struct soap_dom_element >__any;
	class tt__ImageStabilizationOptions *ImageStabilization;	/* optional element of type tt:ImageStabilizationOptions */
	class tt__ImagingOptions20Extension2 *Extension;	/* optional element of type tt:ImagingOptions20Extension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 495; } /* = unique type id SOAP_TYPE_tt__ImagingOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20Extension() { tt__ImagingOptions20Extension::soap_default(NULL); }
	virtual ~tt__ImagingOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension2
#define SOAP_TYPE_tt__ImagingOptions20Extension2 (496)
/* tt:ImagingOptions20Extension2 */
class SOAP_CMAC tt__ImagingOptions20Extension2
{
public:
	class tt__IrCutFilterAutoAdjustmentOptions *IrCutFilterAutoAdjustment;	/* optional element of type tt:IrCutFilterAutoAdjustmentOptions */
	class tt__ImagingOptions20Extension3 *Extension;	/* optional element of type tt:ImagingOptions20Extension3 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 496; } /* = unique type id SOAP_TYPE_tt__ImagingOptions20Extension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20Extension2() { tt__ImagingOptions20Extension2::soap_default(NULL); }
	virtual ~tt__ImagingOptions20Extension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension3
#define SOAP_TYPE_tt__ImagingOptions20Extension3 (497)
/* tt:ImagingOptions20Extension3 */
class SOAP_CMAC tt__ImagingOptions20Extension3
{
public:
	class tt__ToneCompensationOptions *ToneCompensationOptions;	/* optional element of type tt:ToneCompensationOptions */
	class tt__DefoggingOptions *DefoggingOptions;	/* optional element of type tt:DefoggingOptions */
	class tt__NoiseReductionOptions *NoiseReductionOptions;	/* optional element of type tt:NoiseReductionOptions */
	class tt__ImagingOptions20Extension4 *Extension;	/* optional element of type tt:ImagingOptions20Extension4 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 497; } /* = unique type id SOAP_TYPE_tt__ImagingOptions20Extension3 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20Extension3() { tt__ImagingOptions20Extension3::soap_default(NULL); }
	virtual ~tt__ImagingOptions20Extension3() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension4
#define SOAP_TYPE_tt__ImagingOptions20Extension4 (498)
/* tt:ImagingOptions20Extension4 */
class SOAP_CMAC tt__ImagingOptions20Extension4
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 498; } /* = unique type id SOAP_TYPE_tt__ImagingOptions20Extension4 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20Extension4() { tt__ImagingOptions20Extension4::soap_default(NULL); }
	virtual ~tt__ImagingOptions20Extension4() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationOptions
#define SOAP_TYPE_tt__ImageStabilizationOptions (499)
/* tt:ImageStabilizationOptions */
class SOAP_CMAC tt__ImageStabilizationOptions
{
public:
	std::vector<enum tt__ImageStabilizationMode >Mode;	/* required element of type tt:ImageStabilizationMode */
	tt__FloatRange *Level;	/* optional element of type tt:FloatRange */
	class tt__ImageStabilizationOptionsExtension *Extension;	/* optional element of type tt:ImageStabilizationOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 499; } /* = unique type id SOAP_TYPE_tt__ImageStabilizationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilizationOptions() { tt__ImageStabilizationOptions::soap_default(NULL); }
	virtual ~tt__ImageStabilizationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationOptionsExtension
#define SOAP_TYPE_tt__ImageStabilizationOptionsExtension (500)
/* tt:ImageStabilizationOptionsExtension */
class SOAP_CMAC tt__ImageStabilizationOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 500; } /* = unique type id SOAP_TYPE_tt__ImageStabilizationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilizationOptionsExtension() { tt__ImageStabilizationOptionsExtension::soap_default(NULL); }
	virtual ~tt__ImageStabilizationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions (501)
/* tt:IrCutFilterAutoAdjustmentOptions */
class SOAP_CMAC tt__IrCutFilterAutoAdjustmentOptions
{
public:
	std::vector<std::string >BoundaryType;	/* required element of type xsd:string */
	bool *BoundaryOffset;	/* optional element of type xsd:boolean */
	tt__DurationRange *ResponseTimeRange;	/* optional element of type tt:DurationRange */
	class tt__IrCutFilterAutoAdjustmentOptionsExtension *Extension;	/* optional element of type tt:IrCutFilterAutoAdjustmentOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 501; } /* = unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IrCutFilterAutoAdjustmentOptions() { tt__IrCutFilterAutoAdjustmentOptions::soap_default(NULL); }
	virtual ~tt__IrCutFilterAutoAdjustmentOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension
#define SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension (502)
/* tt:IrCutFilterAutoAdjustmentOptionsExtension */
class SOAP_CMAC tt__IrCutFilterAutoAdjustmentOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 502; } /* = unique type id SOAP_TYPE_tt__IrCutFilterAutoAdjustmentOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IrCutFilterAutoAdjustmentOptionsExtension() { tt__IrCutFilterAutoAdjustmentOptionsExtension::soap_default(NULL); }
	virtual ~tt__IrCutFilterAutoAdjustmentOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions20
#define SOAP_TYPE_tt__WideDynamicRangeOptions20 (503)
/* tt:WideDynamicRangeOptions20 */
class SOAP_CMAC tt__WideDynamicRangeOptions20
{
public:
	std::vector<enum tt__WideDynamicMode >Mode;	/* required element of type tt:WideDynamicMode */
	tt__FloatRange *Level;	/* optional element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 503; } /* = unique type id SOAP_TYPE_tt__WideDynamicRangeOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRangeOptions20() { tt__WideDynamicRangeOptions20::soap_default(NULL); }
	virtual ~tt__WideDynamicRangeOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationOptions20
#define SOAP_TYPE_tt__BacklightCompensationOptions20 (504)
/* tt:BacklightCompensationOptions20 */
class SOAP_CMAC tt__BacklightCompensationOptions20
{
public:
	std::vector<enum tt__BacklightCompensationMode >Mode;	/* required element of type tt:BacklightCompensationMode */
	tt__FloatRange *Level;	/* optional element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 504; } /* = unique type id SOAP_TYPE_tt__BacklightCompensationOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensationOptions20() { tt__BacklightCompensationOptions20::soap_default(NULL); }
	virtual ~tt__BacklightCompensationOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ExposureOptions20
#define SOAP_TYPE_tt__ExposureOptions20 (505)
/* tt:ExposureOptions20 */
class SOAP_CMAC tt__ExposureOptions20
{
public:
	std::vector<enum tt__ExposureMode >Mode;	/* required element of type tt:ExposureMode */
	std::vector<enum tt__ExposurePriority >Priority;	/* optional element of type tt:ExposurePriority */
	tt__FloatRange *MinExposureTime;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MaxExposureTime;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MinGain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MaxGain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MinIris;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MaxIris;	/* optional element of type tt:FloatRange */
	tt__FloatRange *ExposureTime;	/* optional element of type tt:FloatRange */
	tt__FloatRange *Gain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *Iris;	/* optional element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 505; } /* = unique type id SOAP_TYPE_tt__ExposureOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ExposureOptions20() { tt__ExposureOptions20::soap_default(NULL); }
	virtual ~tt__ExposureOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__MoveOptions20
#define SOAP_TYPE_tt__MoveOptions20 (506)
/* tt:MoveOptions20 */
class SOAP_CMAC tt__MoveOptions20
{
public:
	tt__AbsoluteFocusOptions *Absolute;	/* optional element of type tt:AbsoluteFocusOptions */
	class tt__RelativeFocusOptions20 *Relative;	/* optional element of type tt:RelativeFocusOptions20 */
	tt__ContinuousFocusOptions *Continuous;	/* optional element of type tt:ContinuousFocusOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 506; } /* = unique type id SOAP_TYPE_tt__MoveOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MoveOptions20() { tt__MoveOptions20::soap_default(NULL); }
	virtual ~tt__MoveOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelativeFocusOptions20
#define SOAP_TYPE_tt__RelativeFocusOptions20 (507)
/* tt:RelativeFocusOptions20 */
class SOAP_CMAC tt__RelativeFocusOptions20
{
public:
	tt__FloatRange *Distance;	/* required element of type tt:FloatRange */
	tt__FloatRange *Speed;	/* optional element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 507; } /* = unique type id SOAP_TYPE_tt__RelativeFocusOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelativeFocusOptions20() { tt__RelativeFocusOptions20::soap_default(NULL); }
	virtual ~tt__RelativeFocusOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance20
#define SOAP_TYPE_tt__WhiteBalance20 (508)
/* tt:WhiteBalance20 */
class SOAP_CMAC tt__WhiteBalance20
{
public:
	enum tt__WhiteBalanceMode Mode;	/* required element of type tt:WhiteBalanceMode */
	float *CrGain;	/* optional element of type xsd:float */
	float *CbGain;	/* optional element of type xsd:float */
	class tt__WhiteBalance20Extension *Extension;	/* optional element of type tt:WhiteBalance20Extension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 508; } /* = unique type id SOAP_TYPE_tt__WhiteBalance20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalance20() { tt__WhiteBalance20::soap_default(NULL); }
	virtual ~tt__WhiteBalance20() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance20Extension
#define SOAP_TYPE_tt__WhiteBalance20Extension (509)
/* tt:WhiteBalance20Extension */
class SOAP_CMAC tt__WhiteBalance20Extension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 509; } /* = unique type id SOAP_TYPE_tt__WhiteBalance20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalance20Extension() { tt__WhiteBalance20Extension::soap_default(NULL); }
	virtual ~tt__WhiteBalance20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration20
#define SOAP_TYPE_tt__FocusConfiguration20 (510)
/* tt:FocusConfiguration20 */
class SOAP_CMAC tt__FocusConfiguration20
{
public:
	enum tt__AutoFocusMode AutoFocusMode;	/* required element of type tt:AutoFocusMode */
	float *DefaultSpeed;	/* optional element of type xsd:float */
	float *NearLimit;	/* optional element of type xsd:float */
	float *FarLimit;	/* optional element of type xsd:float */
	class tt__FocusConfiguration20Extension *Extension;	/* optional element of type tt:FocusConfiguration20Extension */
	std::string *AFMode;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 510; } /* = unique type id SOAP_TYPE_tt__FocusConfiguration20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusConfiguration20() { tt__FocusConfiguration20::soap_default(NULL); }
	virtual ~tt__FocusConfiguration20() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration20Extension
#define SOAP_TYPE_tt__FocusConfiguration20Extension (511)
/* tt:FocusConfiguration20Extension */
class SOAP_CMAC tt__FocusConfiguration20Extension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 511; } /* = unique type id SOAP_TYPE_tt__FocusConfiguration20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusConfiguration20Extension() { tt__FocusConfiguration20Extension::soap_default(NULL); }
	virtual ~tt__FocusConfiguration20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20
#define SOAP_TYPE_tt__WhiteBalanceOptions20 (512)
/* tt:WhiteBalanceOptions20 */
class SOAP_CMAC tt__WhiteBalanceOptions20
{
public:
	std::vector<enum tt__WhiteBalanceMode >Mode;	/* required element of type tt:WhiteBalanceMode */
	tt__FloatRange *YrGain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *YbGain;	/* optional element of type tt:FloatRange */
	class tt__WhiteBalanceOptions20Extension *Extension;	/* optional element of type tt:WhiteBalanceOptions20Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 512; } /* = unique type id SOAP_TYPE_tt__WhiteBalanceOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalanceOptions20() { tt__WhiteBalanceOptions20::soap_default(NULL); }
	virtual ~tt__WhiteBalanceOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20Extension
#define SOAP_TYPE_tt__WhiteBalanceOptions20Extension (513)
/* tt:WhiteBalanceOptions20Extension */
class SOAP_CMAC tt__WhiteBalanceOptions20Extension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 513; } /* = unique type id SOAP_TYPE_tt__WhiteBalanceOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalanceOptions20Extension() { tt__WhiteBalanceOptions20Extension::soap_default(NULL); }
	virtual ~tt__WhiteBalanceOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusOptions20
#define SOAP_TYPE_tt__FocusOptions20 (514)
/* tt:FocusOptions20 */
class SOAP_CMAC tt__FocusOptions20
{
public:
	std::vector<enum tt__AutoFocusMode >AutoFocusModes;	/* optional element of type tt:AutoFocusMode */
	tt__FloatRange *DefaultSpeed;	/* optional element of type tt:FloatRange */
	tt__FloatRange *NearLimit;	/* optional element of type tt:FloatRange */
	tt__FloatRange *FarLimit;	/* optional element of type tt:FloatRange */
	class tt__FocusOptions20Extension *Extension;	/* optional element of type tt:FocusOptions20Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 514; } /* = unique type id SOAP_TYPE_tt__FocusOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusOptions20() { tt__FocusOptions20::soap_default(NULL); }
	virtual ~tt__FocusOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusOptions20Extension
#define SOAP_TYPE_tt__FocusOptions20Extension (515)
/* tt:FocusOptions20Extension */
class SOAP_CMAC tt__FocusOptions20Extension
{
public:
	std::vector<struct soap_dom_element >__any;
	std::string *AFModes;	/* optional element of type tt:StringAttrList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 515; } /* = unique type id SOAP_TYPE_tt__FocusOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusOptions20Extension() { tt__FocusOptions20Extension::soap_default(NULL); }
	virtual ~tt__FocusOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ToneCompensationOptions
#define SOAP_TYPE_tt__ToneCompensationOptions (516)
/* tt:ToneCompensationOptions */
class SOAP_CMAC tt__ToneCompensationOptions
{
public:
	std::vector<std::string >Mode;	/* required element of type xsd:string */
	bool Level;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 516; } /* = unique type id SOAP_TYPE_tt__ToneCompensationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ToneCompensationOptions() { tt__ToneCompensationOptions::soap_default(NULL); }
	virtual ~tt__ToneCompensationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__DefoggingOptions
#define SOAP_TYPE_tt__DefoggingOptions (517)
/* tt:DefoggingOptions */
class SOAP_CMAC tt__DefoggingOptions
{
public:
	std::vector<std::string >Mode;	/* required element of type xsd:string */
	bool Level;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 517; } /* = unique type id SOAP_TYPE_tt__DefoggingOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DefoggingOptions() { tt__DefoggingOptions::soap_default(NULL); }
	virtual ~tt__DefoggingOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__NoiseReductionOptions
#define SOAP_TYPE_tt__NoiseReductionOptions (518)
/* tt:NoiseReductionOptions */
class SOAP_CMAC tt__NoiseReductionOptions
{
public:
	bool Level;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 518; } /* = unique type id SOAP_TYPE_tt__NoiseReductionOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NoiseReductionOptions() { tt__NoiseReductionOptions::soap_default(NULL); }
	virtual ~tt__NoiseReductionOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__MessageExtension
#define SOAP_TYPE_tt__MessageExtension (519)
/* tt:MessageExtension */
class SOAP_CMAC tt__MessageExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 519; } /* = unique type id SOAP_TYPE_tt__MessageExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MessageExtension() { tt__MessageExtension::soap_default(NULL); }
	virtual ~tt__MessageExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemList_SimpleItem
#define SOAP_TYPE__tt__ItemList_SimpleItem (1652)
/* tt:ItemList-SimpleItem */
class SOAP_CMAC _tt__ItemList_SimpleItem
{
public:
	std::string Name;	/* required attribute */
	std::string Value;	/* required attribute */
public:
	virtual int soap_type() const { return 1652; } /* = unique type id SOAP_TYPE__tt__ItemList_SimpleItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemList_SimpleItem() { _tt__ItemList_SimpleItem::soap_default(NULL); }
	virtual ~_tt__ItemList_SimpleItem() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemList_ElementItem
#define SOAP_TYPE__tt__ItemList_ElementItem (1655)
/* tt:ItemList-ElementItem */
class SOAP_CMAC _tt__ItemList_ElementItem
{
public:
	struct soap_dom_element __any;	/* external */
	std::string Name;	/* required attribute */
public:
	virtual int soap_type() const { return 1655; } /* = unique type id SOAP_TYPE__tt__ItemList_ElementItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemList_ElementItem() { _tt__ItemList_ElementItem::soap_default(NULL); }
	virtual ~_tt__ItemList_ElementItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemList
#define SOAP_TYPE_tt__ItemList (520)
/* tt:ItemList */
class SOAP_CMAC tt__ItemList
{
public:
	std::vector<_tt__ItemList_SimpleItem >*SimpleItem;	/* optional element of type tt:ItemList-SimpleItem */
	std::vector<_tt__ItemList_ElementItem >*ElementItem;	/* optional element of type tt:ItemList-ElementItem */
	class tt__ItemListExtension *Extension;	/* optional element of type tt:ItemListExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 520; } /* = unique type id SOAP_TYPE_tt__ItemList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemList() { tt__ItemList::soap_default(NULL); }
	virtual ~tt__ItemList() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemListExtension
#define SOAP_TYPE_tt__ItemListExtension (521)
/* tt:ItemListExtension */
class SOAP_CMAC tt__ItemListExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 521; } /* = unique type id SOAP_TYPE_tt__ItemListExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemListExtension() { tt__ItemListExtension::soap_default(NULL); }
	virtual ~tt__ItemListExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MessageDescription
#define SOAP_TYPE_tt__MessageDescription (522)
/* tt:MessageDescription */
class SOAP_CMAC tt__MessageDescription
{
public:
	class tt__ItemListDescription *Source;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Key;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Data;	/* optional element of type tt:ItemListDescription */
	class tt__MessageDescriptionExtension *Extension;	/* optional element of type tt:MessageDescriptionExtension */
	bool *IsProperty;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 522; } /* = unique type id SOAP_TYPE_tt__MessageDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MessageDescription() { tt__MessageDescription::soap_default(NULL); }
	virtual ~tt__MessageDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__MessageDescriptionExtension
#define SOAP_TYPE_tt__MessageDescriptionExtension (523)
/* tt:MessageDescriptionExtension */
class SOAP_CMAC tt__MessageDescriptionExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 523; } /* = unique type id SOAP_TYPE_tt__MessageDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MessageDescriptionExtension() { tt__MessageDescriptionExtension::soap_default(NULL); }
	virtual ~tt__MessageDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription (1661)
/* tt:ItemListDescription-SimpleItemDescription */
class SOAP_CMAC _tt__ItemListDescription_SimpleItemDescription
{
public:
	std::string Name;	/* required attribute */
	std::string Type;	/* required attribute */
public:
	virtual int soap_type() const { return 1661; } /* = unique type id SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemListDescription_SimpleItemDescription() { _tt__ItemListDescription_SimpleItemDescription::soap_default(NULL); }
	virtual ~_tt__ItemListDescription_SimpleItemDescription() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemListDescription_ElementItemDescription
#define SOAP_TYPE__tt__ItemListDescription_ElementItemDescription (1664)
/* tt:ItemListDescription-ElementItemDescription */
class SOAP_CMAC _tt__ItemListDescription_ElementItemDescription
{
public:
	std::string Name;	/* required attribute */
	std::string Type;	/* required attribute */
public:
	virtual int soap_type() const { return 1664; } /* = unique type id SOAP_TYPE__tt__ItemListDescription_ElementItemDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemListDescription_ElementItemDescription() { _tt__ItemListDescription_ElementItemDescription::soap_default(NULL); }
	virtual ~_tt__ItemListDescription_ElementItemDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemListDescription
#define SOAP_TYPE_tt__ItemListDescription (524)
/* tt:ItemListDescription */
class SOAP_CMAC tt__ItemListDescription
{
public:
	std::vector<_tt__ItemListDescription_SimpleItemDescription >*SimpleItemDescription;	/* optional element of type tt:ItemListDescription-SimpleItemDescription */
	std::vector<_tt__ItemListDescription_ElementItemDescription >*ElementItemDescription;	/* optional element of type tt:ItemListDescription-ElementItemDescription */
	class tt__ItemListDescriptionExtension *Extension;	/* optional element of type tt:ItemListDescriptionExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 524; } /* = unique type id SOAP_TYPE_tt__ItemListDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemListDescription() { tt__ItemListDescription::soap_default(NULL); }
	virtual ~tt__ItemListDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemListDescriptionExtension
#define SOAP_TYPE_tt__ItemListDescriptionExtension (525)
/* tt:ItemListDescriptionExtension */
class SOAP_CMAC tt__ItemListDescriptionExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 525; } /* = unique type id SOAP_TYPE_tt__ItemListDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemListDescriptionExtension() { tt__ItemListDescriptionExtension::soap_default(NULL); }
	virtual ~tt__ItemListDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Polyline
#define SOAP_TYPE_tt__Polyline (526)
/* tt:Polyline */
class SOAP_CMAC tt__Polyline
{
public:
	std::vector<class tt__Vector * >Point;	/* required element of type tt:Vector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 526; } /* = unique type id SOAP_TYPE_tt__Polyline */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Polyline() { tt__Polyline::soap_default(NULL); }
	virtual ~tt__Polyline() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsEngineConfiguration (527)
/* tt:AnalyticsEngineConfiguration */
class SOAP_CMAC tt__AnalyticsEngineConfiguration
{
public:
	std::vector<class tt__Config * >AnalyticsModule;	/* optional element of type tt:Config */
	class tt__AnalyticsEngineConfigurationExtension *Extension;	/* optional element of type tt:AnalyticsEngineConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 527; } /* = unique type id SOAP_TYPE_tt__AnalyticsEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineConfiguration() { tt__AnalyticsEngineConfiguration::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension (528)
/* tt:AnalyticsEngineConfigurationExtension */
class SOAP_CMAC tt__AnalyticsEngineConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 528; } /* = unique type id SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineConfigurationExtension() { tt__AnalyticsEngineConfigurationExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RuleEngineConfiguration
#define SOAP_TYPE_tt__RuleEngineConfiguration (529)
/* tt:RuleEngineConfiguration */
class SOAP_CMAC tt__RuleEngineConfiguration
{
public:
	std::vector<tt__Config * >Rule;	/* optional element of type tt:Config */
	class tt__RuleEngineConfigurationExtension *Extension;	/* optional element of type tt:RuleEngineConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 529; } /* = unique type id SOAP_TYPE_tt__RuleEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RuleEngineConfiguration() { tt__RuleEngineConfiguration::soap_default(NULL); }
	virtual ~tt__RuleEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__RuleEngineConfigurationExtension
#define SOAP_TYPE_tt__RuleEngineConfigurationExtension (530)
/* tt:RuleEngineConfigurationExtension */
class SOAP_CMAC tt__RuleEngineConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 530; } /* = unique type id SOAP_TYPE_tt__RuleEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RuleEngineConfigurationExtension() { tt__RuleEngineConfigurationExtension::soap_default(NULL); }
	virtual ~tt__RuleEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Config
#define SOAP_TYPE_tt__Config (531)
/* tt:Config */
class SOAP_CMAC tt__Config
{
public:
	tt__ItemList *Parameters;	/* required element of type tt:ItemList */
	std::string Name;	/* required attribute */
	std::string Type;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 531; } /* = unique type id SOAP_TYPE_tt__Config */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Config() { tt__Config::soap_default(NULL); }
	virtual ~tt__Config() { }
};
#endif

#ifndef SOAP_TYPE__tt__ConfigDescription_Messages
#define SOAP_TYPE__tt__ConfigDescription_Messages (1675)
/* tt:ConfigDescription-Messages */
class SOAP_CMAC _tt__ConfigDescription_Messages
{
public:
	tt__ItemListDescription *Source;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Key;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Data;	/* optional element of type tt:ItemListDescription */
	tt__MessageDescriptionExtension *Extension;	/* optional element of type tt:MessageDescriptionExtension */
	bool *IsProperty;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	std::string ParentTopic;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1675; } /* = unique type id SOAP_TYPE__tt__ConfigDescription_Messages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ConfigDescription_Messages() { _tt__ConfigDescription_Messages::soap_default(NULL); }
	virtual ~_tt__ConfigDescription_Messages() { }
};
#endif

#ifndef SOAP_TYPE_tt__ConfigDescription
#define SOAP_TYPE_tt__ConfigDescription (532)
/* tt:ConfigDescription */
class SOAP_CMAC tt__ConfigDescription
{
public:
	tt__ItemListDescription *Parameters;	/* required element of type tt:ItemListDescription */
	std::vector<_tt__ConfigDescription_Messages >*Messages;	/* optional element of type tt:ConfigDescription-Messages */
	class tt__ConfigDescriptionExtension *Extension;	/* optional element of type tt:ConfigDescriptionExtension */
	std::string Name;	/* required attribute */
	bool *fixed;	/* optional attribute */
	std::string *maxInstances;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 532; } /* = unique type id SOAP_TYPE_tt__ConfigDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ConfigDescription() { tt__ConfigDescription::soap_default(NULL); }
	virtual ~tt__ConfigDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__ConfigDescriptionExtension
#define SOAP_TYPE_tt__ConfigDescriptionExtension (533)
/* tt:ConfigDescriptionExtension */
class SOAP_CMAC tt__ConfigDescriptionExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 533; } /* = unique type id SOAP_TYPE_tt__ConfigDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ConfigDescriptionExtension() { tt__ConfigDescriptionExtension::soap_default(NULL); }
	virtual ~tt__ConfigDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedRules
#define SOAP_TYPE_tt__SupportedRules (534)
/* tt:SupportedRules */
class SOAP_CMAC tt__SupportedRules
{
public:
	std::vector<std::string >RuleContentSchemaLocation;	/* optional element of type xsd:anyURI */
	std::vector<tt__ConfigDescription * >RuleDescription;	/* optional element of type tt:ConfigDescription */
	class tt__SupportedRulesExtension *Extension;	/* optional element of type tt:SupportedRulesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 534; } /* = unique type id SOAP_TYPE_tt__SupportedRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedRules() { tt__SupportedRules::soap_default(NULL); }
	virtual ~tt__SupportedRules() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedRulesExtension
#define SOAP_TYPE_tt__SupportedRulesExtension (535)
/* tt:SupportedRulesExtension */
class SOAP_CMAC tt__SupportedRulesExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 535; } /* = unique type id SOAP_TYPE_tt__SupportedRulesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedRulesExtension() { tt__SupportedRulesExtension::soap_default(NULL); }
	virtual ~tt__SupportedRulesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedAnalyticsModules
#define SOAP_TYPE_tt__SupportedAnalyticsModules (536)
/* tt:SupportedAnalyticsModules */
class SOAP_CMAC tt__SupportedAnalyticsModules
{
public:
	std::vector<std::string >AnalyticsModuleContentSchemaLocation;	/* optional element of type xsd:anyURI */
	std::vector<tt__ConfigDescription * >AnalyticsModuleDescription;	/* optional element of type tt:ConfigDescription */
	class tt__SupportedAnalyticsModulesExtension *Extension;	/* optional element of type tt:SupportedAnalyticsModulesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 536; } /* = unique type id SOAP_TYPE_tt__SupportedAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedAnalyticsModules() { tt__SupportedAnalyticsModules::soap_default(NULL); }
	virtual ~tt__SupportedAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_tt__SupportedAnalyticsModulesExtension (537)
/* tt:SupportedAnalyticsModulesExtension */
class SOAP_CMAC tt__SupportedAnalyticsModulesExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 537; } /* = unique type id SOAP_TYPE_tt__SupportedAnalyticsModulesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedAnalyticsModulesExtension() { tt__SupportedAnalyticsModulesExtension::soap_default(NULL); }
	virtual ~tt__SupportedAnalyticsModulesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolygonConfiguration
#define SOAP_TYPE_tt__PolygonConfiguration (538)
/* tt:PolygonConfiguration */
class SOAP_CMAC tt__PolygonConfiguration
{
public:
	class tt__Polygon *Polygon;	/* required element of type tt:Polygon */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 538; } /* = unique type id SOAP_TYPE_tt__PolygonConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolygonConfiguration() { tt__PolygonConfiguration::soap_default(NULL); }
	virtual ~tt__PolygonConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolylineArray
#define SOAP_TYPE_tt__PolylineArray (539)
/* tt:PolylineArray */
class SOAP_CMAC tt__PolylineArray
{
public:
	std::vector<tt__Polyline * >Segment;	/* required element of type tt:Polyline */
	class tt__PolylineArrayExtension *Extension;	/* optional element of type tt:PolylineArrayExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 539; } /* = unique type id SOAP_TYPE_tt__PolylineArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolylineArray() { tt__PolylineArray::soap_default(NULL); }
	virtual ~tt__PolylineArray() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolylineArrayExtension
#define SOAP_TYPE_tt__PolylineArrayExtension (540)
/* tt:PolylineArrayExtension */
class SOAP_CMAC tt__PolylineArrayExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 540; } /* = unique type id SOAP_TYPE_tt__PolylineArrayExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolylineArrayExtension() { tt__PolylineArrayExtension::soap_default(NULL); }
	virtual ~tt__PolylineArrayExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolylineArrayConfiguration
#define SOAP_TYPE_tt__PolylineArrayConfiguration (541)
/* tt:PolylineArrayConfiguration */
class SOAP_CMAC tt__PolylineArrayConfiguration
{
public:
	tt__PolylineArray *PolylineArray;	/* required element of type tt:PolylineArray */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 541; } /* = unique type id SOAP_TYPE_tt__PolylineArrayConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolylineArrayConfiguration() { tt__PolylineArrayConfiguration::soap_default(NULL); }
	virtual ~tt__PolylineArrayConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__MotionExpression
#define SOAP_TYPE_tt__MotionExpression (542)
/* tt:MotionExpression */
class SOAP_CMAC tt__MotionExpression
{
public:
	std::string Expression;	/* required element of type xsd:string */
	std::vector<struct soap_dom_element >__any;
	std::string *Type;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 542; } /* = unique type id SOAP_TYPE_tt__MotionExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MotionExpression() { tt__MotionExpression::soap_default(NULL); }
	virtual ~tt__MotionExpression() { }
};
#endif

#ifndef SOAP_TYPE_tt__MotionExpressionConfiguration
#define SOAP_TYPE_tt__MotionExpressionConfiguration (543)
/* tt:MotionExpressionConfiguration */
class SOAP_CMAC tt__MotionExpressionConfiguration
{
public:
	tt__MotionExpression *MotionExpression;	/* required element of type tt:MotionExpression */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 543; } /* = unique type id SOAP_TYPE_tt__MotionExpressionConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MotionExpressionConfiguration() { tt__MotionExpressionConfiguration::soap_default(NULL); }
	virtual ~tt__MotionExpressionConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__CellLayout
#define SOAP_TYPE_tt__CellLayout (544)
/* tt:CellLayout */
class SOAP_CMAC tt__CellLayout
{
public:
	class tt__Transformation *Transformation;	/* required element of type tt:Transformation */
	std::vector<struct soap_dom_element >__any;
	std::string Columns;	/* required attribute */
	std::string Rows;	/* required attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 544; } /* = unique type id SOAP_TYPE_tt__CellLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CellLayout() { tt__CellLayout::soap_default(NULL); }
	virtual ~tt__CellLayout() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneConfiguration
#define SOAP_TYPE_tt__PaneConfiguration (545)
/* tt:PaneConfiguration */
class SOAP_CMAC tt__PaneConfiguration
{
public:
	std::string *PaneName;	/* optional element of type xsd:string */
	std::string *AudioOutputToken;	/* optional element of type tt:ReferenceToken */
	std::string *AudioSourceToken;	/* optional element of type tt:ReferenceToken */
	tt__AudioEncoderConfiguration *AudioEncoderConfiguration;	/* optional element of type tt:AudioEncoderConfiguration */
	std::string *ReceiverToken;	/* optional element of type tt:ReferenceToken */
	std::string Token;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 545; } /* = unique type id SOAP_TYPE_tt__PaneConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneConfiguration() { tt__PaneConfiguration::soap_default(NULL); }
	virtual ~tt__PaneConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneLayout
#define SOAP_TYPE_tt__PaneLayout (546)
/* tt:PaneLayout */
class SOAP_CMAC tt__PaneLayout
{
public:
	std::string Pane;	/* required element of type tt:ReferenceToken */
	tt__Rectangle *Area;	/* required element of type tt:Rectangle */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 546; } /* = unique type id SOAP_TYPE_tt__PaneLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneLayout() { tt__PaneLayout::soap_default(NULL); }
	virtual ~tt__PaneLayout() { }
};
#endif

#ifndef SOAP_TYPE_tt__Layout
#define SOAP_TYPE_tt__Layout (547)
/* tt:Layout */
class SOAP_CMAC tt__Layout
{
public:
	std::vector<tt__PaneLayout * >PaneLayout;	/* required element of type tt:PaneLayout */
	class tt__LayoutExtension *Extension;	/* optional element of type tt:LayoutExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 547; } /* = unique type id SOAP_TYPE_tt__Layout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Layout() { tt__Layout::soap_default(NULL); }
	virtual ~tt__Layout() { }
};
#endif

#ifndef SOAP_TYPE_tt__LayoutExtension
#define SOAP_TYPE_tt__LayoutExtension (548)
/* tt:LayoutExtension */
class SOAP_CMAC tt__LayoutExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 548; } /* = unique type id SOAP_TYPE_tt__LayoutExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LayoutExtension() { tt__LayoutExtension::soap_default(NULL); }
	virtual ~tt__LayoutExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__CodingCapabilities
#define SOAP_TYPE_tt__CodingCapabilities (549)
/* tt:CodingCapabilities */
class SOAP_CMAC tt__CodingCapabilities
{
public:
	tt__AudioEncoderConfigurationOptions *AudioEncodingCapabilities;	/* optional element of type tt:AudioEncoderConfigurationOptions */
	tt__AudioDecoderConfigurationOptions *AudioDecodingCapabilities;	/* optional element of type tt:AudioDecoderConfigurationOptions */
	tt__VideoDecoderConfigurationOptions *VideoDecodingCapabilities;	/* required element of type tt:VideoDecoderConfigurationOptions */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 549; } /* = unique type id SOAP_TYPE_tt__CodingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CodingCapabilities() { tt__CodingCapabilities::soap_default(NULL); }
	virtual ~tt__CodingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__LayoutOptions
#define SOAP_TYPE_tt__LayoutOptions (550)
/* tt:LayoutOptions */
class SOAP_CMAC tt__LayoutOptions
{
public:
	std::vector<class tt__PaneLayoutOptions * >PaneLayoutOptions;	/* required element of type tt:PaneLayoutOptions */
	class tt__LayoutOptionsExtension *Extension;	/* optional element of type tt:LayoutOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 550; } /* = unique type id SOAP_TYPE_tt__LayoutOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LayoutOptions() { tt__LayoutOptions::soap_default(NULL); }
	virtual ~tt__LayoutOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__LayoutOptionsExtension
#define SOAP_TYPE_tt__LayoutOptionsExtension (551)
/* tt:LayoutOptionsExtension */
class SOAP_CMAC tt__LayoutOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 551; } /* = unique type id SOAP_TYPE_tt__LayoutOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LayoutOptionsExtension() { tt__LayoutOptionsExtension::soap_default(NULL); }
	virtual ~tt__LayoutOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneLayoutOptions
#define SOAP_TYPE_tt__PaneLayoutOptions (552)
/* tt:PaneLayoutOptions */
class SOAP_CMAC tt__PaneLayoutOptions
{
public:
	std::vector<tt__Rectangle * >Area;	/* required element of type tt:Rectangle */
	class tt__PaneOptionExtension *Extension;	/* optional element of type tt:PaneOptionExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 552; } /* = unique type id SOAP_TYPE_tt__PaneLayoutOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneLayoutOptions() { tt__PaneLayoutOptions::soap_default(NULL); }
	virtual ~tt__PaneLayoutOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneOptionExtension
#define SOAP_TYPE_tt__PaneOptionExtension (553)
/* tt:PaneOptionExtension */
class SOAP_CMAC tt__PaneOptionExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 553; } /* = unique type id SOAP_TYPE_tt__PaneOptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneOptionExtension() { tt__PaneOptionExtension::soap_default(NULL); }
	virtual ~tt__PaneOptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Receiver
#define SOAP_TYPE_tt__Receiver (554)
/* tt:Receiver */
class SOAP_CMAC tt__Receiver
{
public:
	std::string Token;	/* required element of type tt:ReferenceToken */
	class tt__ReceiverConfiguration *Configuration;	/* required element of type tt:ReceiverConfiguration */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 554; } /* = unique type id SOAP_TYPE_tt__Receiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Receiver() { tt__Receiver::soap_default(NULL); }
	virtual ~tt__Receiver() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReceiverConfiguration
#define SOAP_TYPE_tt__ReceiverConfiguration (555)
/* tt:ReceiverConfiguration */
class SOAP_CMAC tt__ReceiverConfiguration
{
public:
	enum tt__ReceiverMode Mode;	/* required element of type tt:ReceiverMode */
	std::string MediaUri;	/* required element of type xsd:anyURI */
	tt__StreamSetup *StreamSetup;	/* required element of type tt:StreamSetup */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 555; } /* = unique type id SOAP_TYPE_tt__ReceiverConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReceiverConfiguration() { tt__ReceiverConfiguration::soap_default(NULL); }
	virtual ~tt__ReceiverConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReceiverStateInformation
#define SOAP_TYPE_tt__ReceiverStateInformation (556)
/* tt:ReceiverStateInformation */
class SOAP_CMAC tt__ReceiverStateInformation
{
public:
	enum tt__ReceiverState State;	/* required element of type tt:ReceiverState */
	bool AutoCreated;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 556; } /* = unique type id SOAP_TYPE_tt__ReceiverStateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReceiverStateInformation() { tt__ReceiverStateInformation::soap_default(NULL); }
	virtual ~tt__ReceiverStateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__SourceReference
#define SOAP_TYPE_tt__SourceReference (557)
/* tt:SourceReference */
class SOAP_CMAC tt__SourceReference
{
public:
	std::string Token;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	std::string Type;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 557; } /* = unique type id SOAP_TYPE_tt__SourceReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SourceReference() { tt__SourceReference::soap_default(NULL); }
	virtual ~tt__SourceReference() { }
};
#endif

#ifndef SOAP_TYPE_tt__DateTimeRange
#define SOAP_TYPE_tt__DateTimeRange (558)
/* tt:DateTimeRange */
class SOAP_CMAC tt__DateTimeRange
{
public:
	time_t From;	/* required element of type xsd:dateTime */
	time_t Until;	/* required element of type xsd:dateTime */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 558; } /* = unique type id SOAP_TYPE_tt__DateTimeRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DateTimeRange() { tt__DateTimeRange::soap_default(NULL); }
	virtual ~tt__DateTimeRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingSummary
#define SOAP_TYPE_tt__RecordingSummary (559)
/* tt:RecordingSummary */
class SOAP_CMAC tt__RecordingSummary
{
public:
	time_t DataFrom;	/* required element of type xsd:dateTime */
	time_t DataUntil;	/* required element of type xsd:dateTime */
	int NumberRecordings;	/* required element of type xsd:int */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 559; } /* = unique type id SOAP_TYPE_tt__RecordingSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingSummary() { tt__RecordingSummary::soap_default(NULL); }
	virtual ~tt__RecordingSummary() { }
};
#endif

#ifndef SOAP_TYPE_tt__SearchScope
#define SOAP_TYPE_tt__SearchScope (560)
/* tt:SearchScope */
class SOAP_CMAC tt__SearchScope
{
public:
	std::vector<tt__SourceReference * >IncludedSources;	/* optional element of type tt:SourceReference */
	std::vector<std::string >IncludedRecordings;	/* optional element of type tt:RecordingReference */
	std::string *RecordingInformationFilter;	/* optional element of type tt:XPathExpression */
	class tt__SearchScopeExtension *Extension;	/* optional element of type tt:SearchScopeExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 560; } /* = unique type id SOAP_TYPE_tt__SearchScope */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SearchScope() { tt__SearchScope::soap_default(NULL); }
	virtual ~tt__SearchScope() { }
};
#endif

#ifndef SOAP_TYPE_tt__SearchScopeExtension
#define SOAP_TYPE_tt__SearchScopeExtension (561)
/* tt:SearchScopeExtension */
class SOAP_CMAC tt__SearchScopeExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 561; } /* = unique type id SOAP_TYPE_tt__SearchScopeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SearchScopeExtension() { tt__SearchScopeExtension::soap_default(NULL); }
	virtual ~tt__SearchScopeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPositionFilter
#define SOAP_TYPE_tt__PTZPositionFilter (563)
/* tt:PTZPositionFilter */
class SOAP_CMAC tt__PTZPositionFilter
{
public:
	tt__PTZVector *MinPosition;	/* required element of type tt:PTZVector */
	tt__PTZVector *MaxPosition;	/* required element of type tt:PTZVector */
	bool EnterOrExit;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 563; } /* = unique type id SOAP_TYPE_tt__PTZPositionFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPositionFilter() { tt__PTZPositionFilter::soap_default(NULL); }
	virtual ~tt__PTZPositionFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataFilter
#define SOAP_TYPE_tt__MetadataFilter (564)
/* tt:MetadataFilter */
class SOAP_CMAC tt__MetadataFilter
{
public:
	std::string MetadataStreamFilter;	/* required element of type tt:XPathExpression */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 564; } /* = unique type id SOAP_TYPE_tt__MetadataFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataFilter() { tt__MetadataFilter::soap_default(NULL); }
	virtual ~tt__MetadataFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindRecordingResultList
#define SOAP_TYPE_tt__FindRecordingResultList (565)
/* tt:FindRecordingResultList */
class SOAP_CMAC tt__FindRecordingResultList
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	std::vector<class tt__RecordingInformation * >RecordingInformation;	/* optional element of type tt:RecordingInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 565; } /* = unique type id SOAP_TYPE_tt__FindRecordingResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindRecordingResultList() { tt__FindRecordingResultList::soap_default(NULL); }
	virtual ~tt__FindRecordingResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindEventResultList
#define SOAP_TYPE_tt__FindEventResultList (566)
/* tt:FindEventResultList */
class SOAP_CMAC tt__FindEventResultList
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	std::vector<class tt__FindEventResult * >Result;	/* optional element of type tt:FindEventResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 566; } /* = unique type id SOAP_TYPE_tt__FindEventResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindEventResultList() { tt__FindEventResultList::soap_default(NULL); }
	virtual ~tt__FindEventResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindEventResult
#define SOAP_TYPE_tt__FindEventResult (567)
/* tt:FindEventResult */
class SOAP_CMAC tt__FindEventResult
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string TrackToken;	/* required element of type tt:TrackReference */
	time_t Time;	/* required element of type xsd:dateTime */
	class wsnt__NotificationMessageHolderType *Event;	/* required element of type wsnt:NotificationMessageHolderType */
	bool StartStateEvent;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 567; } /* = unique type id SOAP_TYPE_tt__FindEventResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindEventResult() { tt__FindEventResult::soap_default(NULL); }
	virtual ~tt__FindEventResult() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindPTZPositionResultList
#define SOAP_TYPE_tt__FindPTZPositionResultList (568)
/* tt:FindPTZPositionResultList */
class SOAP_CMAC tt__FindPTZPositionResultList
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	std::vector<class tt__FindPTZPositionResult * >Result;	/* optional element of type tt:FindPTZPositionResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 568; } /* = unique type id SOAP_TYPE_tt__FindPTZPositionResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindPTZPositionResultList() { tt__FindPTZPositionResultList::soap_default(NULL); }
	virtual ~tt__FindPTZPositionResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindPTZPositionResult
#define SOAP_TYPE_tt__FindPTZPositionResult (569)
/* tt:FindPTZPositionResult */
class SOAP_CMAC tt__FindPTZPositionResult
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string TrackToken;	/* required element of type tt:TrackReference */
	time_t Time;	/* required element of type xsd:dateTime */
	tt__PTZVector *Position;	/* required element of type tt:PTZVector */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 569; } /* = unique type id SOAP_TYPE_tt__FindPTZPositionResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindPTZPositionResult() { tt__FindPTZPositionResult::soap_default(NULL); }
	virtual ~tt__FindPTZPositionResult() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindMetadataResultList
#define SOAP_TYPE_tt__FindMetadataResultList (570)
/* tt:FindMetadataResultList */
class SOAP_CMAC tt__FindMetadataResultList
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	std::vector<class tt__FindMetadataResult * >Result;	/* optional element of type tt:FindMetadataResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 570; } /* = unique type id SOAP_TYPE_tt__FindMetadataResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindMetadataResultList() { tt__FindMetadataResultList::soap_default(NULL); }
	virtual ~tt__FindMetadataResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindMetadataResult
#define SOAP_TYPE_tt__FindMetadataResult (571)
/* tt:FindMetadataResult */
class SOAP_CMAC tt__FindMetadataResult
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string TrackToken;	/* required element of type tt:TrackReference */
	time_t Time;	/* required element of type xsd:dateTime */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 571; } /* = unique type id SOAP_TYPE_tt__FindMetadataResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindMetadataResult() { tt__FindMetadataResult::soap_default(NULL); }
	virtual ~tt__FindMetadataResult() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingInformation
#define SOAP_TYPE_tt__RecordingInformation (572)
/* tt:RecordingInformation */
class SOAP_CMAC tt__RecordingInformation
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	class tt__RecordingSourceInformation *Source;	/* required element of type tt:RecordingSourceInformation */
	time_t *EarliestRecording;	/* optional element of type xsd:dateTime */
	time_t *LatestRecording;	/* optional element of type xsd:dateTime */
	std::string Content;	/* required element of type tt:Description */
	std::vector<class tt__TrackInformation * >Track;	/* optional element of type tt:TrackInformation */
	enum tt__RecordingStatus RecordingStatus;	/* required element of type tt:RecordingStatus */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 572; } /* = unique type id SOAP_TYPE_tt__RecordingInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingInformation() { tt__RecordingInformation::soap_default(NULL); }
	virtual ~tt__RecordingInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingSourceInformation
#define SOAP_TYPE_tt__RecordingSourceInformation (573)
/* tt:RecordingSourceInformation */
class SOAP_CMAC tt__RecordingSourceInformation
{
public:
	std::string SourceId;	/* required element of type xsd:anyURI */
	std::string Name;	/* required element of type tt:Name */
	std::string Location;	/* required element of type tt:Description */
	std::string Description;	/* required element of type tt:Description */
	std::string Address;	/* required element of type xsd:anyURI */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 573; } /* = unique type id SOAP_TYPE_tt__RecordingSourceInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingSourceInformation() { tt__RecordingSourceInformation::soap_default(NULL); }
	virtual ~tt__RecordingSourceInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackInformation
#define SOAP_TYPE_tt__TrackInformation (574)
/* tt:TrackInformation */
class SOAP_CMAC tt__TrackInformation
{
public:
	std::string TrackToken;	/* required element of type tt:TrackReference */
	enum tt__TrackType TrackType;	/* required element of type tt:TrackType */
	std::string Description;	/* required element of type tt:Description */
	time_t DataFrom;	/* required element of type xsd:dateTime */
	time_t DataTo;	/* required element of type xsd:dateTime */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 574; } /* = unique type id SOAP_TYPE_tt__TrackInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackInformation() { tt__TrackInformation::soap_default(NULL); }
	virtual ~tt__TrackInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaAttributes
#define SOAP_TYPE_tt__MediaAttributes (575)
/* tt:MediaAttributes */
class SOAP_CMAC tt__MediaAttributes
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::vector<class tt__TrackAttributes * >TrackAttributes;	/* optional element of type tt:TrackAttributes */
	time_t From;	/* required element of type xsd:dateTime */
	time_t Until;	/* required element of type xsd:dateTime */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 575; } /* = unique type id SOAP_TYPE_tt__MediaAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaAttributes() { tt__MediaAttributes::soap_default(NULL); }
	virtual ~tt__MediaAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackAttributes
#define SOAP_TYPE_tt__TrackAttributes (576)
/* tt:TrackAttributes */
class SOAP_CMAC tt__TrackAttributes
{
public:
	tt__TrackInformation *TrackInformation;	/* required element of type tt:TrackInformation */
	class tt__VideoAttributes *VideoAttributes;	/* optional element of type tt:VideoAttributes */
	class tt__AudioAttributes *AudioAttributes;	/* optional element of type tt:AudioAttributes */
	class tt__MetadataAttributes *MetadataAttributes;	/* optional element of type tt:MetadataAttributes */
	class tt__TrackAttributesExtension *Extension;	/* optional element of type tt:TrackAttributesExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 576; } /* = unique type id SOAP_TYPE_tt__TrackAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackAttributes() { tt__TrackAttributes::soap_default(NULL); }
	virtual ~tt__TrackAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackAttributesExtension
#define SOAP_TYPE_tt__TrackAttributesExtension (577)
/* tt:TrackAttributesExtension */
class SOAP_CMAC tt__TrackAttributesExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 577; } /* = unique type id SOAP_TYPE_tt__TrackAttributesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackAttributesExtension() { tt__TrackAttributesExtension::soap_default(NULL); }
	virtual ~tt__TrackAttributesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoAttributes
#define SOAP_TYPE_tt__VideoAttributes (578)
/* tt:VideoAttributes */
class SOAP_CMAC tt__VideoAttributes
{
public:
	int *Bitrate;	/* optional element of type xsd:int */
	int Width;	/* required element of type xsd:int */
	int Height;	/* required element of type xsd:int */
	std::string Encoding;	/* required element of type xsd:string */
	float Framerate;	/* required element of type xsd:float */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 578; } /* = unique type id SOAP_TYPE_tt__VideoAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoAttributes() { tt__VideoAttributes::soap_default(NULL); }
	virtual ~tt__VideoAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioAttributes
#define SOAP_TYPE_tt__AudioAttributes (579)
/* tt:AudioAttributes */
class SOAP_CMAC tt__AudioAttributes
{
public:
	int *Bitrate;	/* optional element of type xsd:int */
	std::string Encoding;	/* required element of type xsd:string */
	int Samplerate;	/* required element of type xsd:int */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 579; } /* = unique type id SOAP_TYPE_tt__AudioAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioAttributes() { tt__AudioAttributes::soap_default(NULL); }
	virtual ~tt__AudioAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataAttributes
#define SOAP_TYPE_tt__MetadataAttributes (580)
/* tt:MetadataAttributes */
class SOAP_CMAC tt__MetadataAttributes
{
public:
	bool CanContainPTZ;	/* required element of type xsd:boolean */
	bool CanContainAnalytics;	/* required element of type xsd:boolean */
	bool CanContainNotifications;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	std::string *PtzSpaces;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 580; } /* = unique type id SOAP_TYPE_tt__MetadataAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataAttributes() { tt__MetadataAttributes::soap_default(NULL); }
	virtual ~tt__MetadataAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingConfiguration
#define SOAP_TYPE_tt__RecordingConfiguration (581)
/* tt:RecordingConfiguration */
class SOAP_CMAC tt__RecordingConfiguration
{
public:
	tt__RecordingSourceInformation *Source;	/* required element of type tt:RecordingSourceInformation */
	std::string Content;	/* required element of type tt:Description */
	LONG64 MaximumRetentionTime;	/* external */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 581; } /* = unique type id SOAP_TYPE_tt__RecordingConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingConfiguration() { tt__RecordingConfiguration::soap_default(NULL); }
	virtual ~tt__RecordingConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackConfiguration
#define SOAP_TYPE_tt__TrackConfiguration (582)
/* tt:TrackConfiguration */
class SOAP_CMAC tt__TrackConfiguration
{
public:
	enum tt__TrackType TrackType;	/* required element of type tt:TrackType */
	std::string Description;	/* required element of type tt:Description */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 582; } /* = unique type id SOAP_TYPE_tt__TrackConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackConfiguration() { tt__TrackConfiguration::soap_default(NULL); }
	virtual ~tt__TrackConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetRecordingsResponseItem
#define SOAP_TYPE_tt__GetRecordingsResponseItem (583)
/* tt:GetRecordingsResponseItem */
class SOAP_CMAC tt__GetRecordingsResponseItem
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	tt__RecordingConfiguration *Configuration;	/* required element of type tt:RecordingConfiguration */
	class tt__GetTracksResponseList *Tracks;	/* required element of type tt:GetTracksResponseList */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 583; } /* = unique type id SOAP_TYPE_tt__GetRecordingsResponseItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetRecordingsResponseItem() { tt__GetRecordingsResponseItem::soap_default(NULL); }
	virtual ~tt__GetRecordingsResponseItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetTracksResponseList
#define SOAP_TYPE_tt__GetTracksResponseList (584)
/* tt:GetTracksResponseList */
class SOAP_CMAC tt__GetTracksResponseList
{
public:
	std::vector<class tt__GetTracksResponseItem * >Track;	/* optional element of type tt:GetTracksResponseItem */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 584; } /* = unique type id SOAP_TYPE_tt__GetTracksResponseList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetTracksResponseList() { tt__GetTracksResponseList::soap_default(NULL); }
	virtual ~tt__GetTracksResponseList() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetTracksResponseItem
#define SOAP_TYPE_tt__GetTracksResponseItem (585)
/* tt:GetTracksResponseItem */
class SOAP_CMAC tt__GetTracksResponseItem
{
public:
	std::string TrackToken;	/* required element of type tt:TrackReference */
	tt__TrackConfiguration *Configuration;	/* required element of type tt:TrackConfiguration */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 585; } /* = unique type id SOAP_TYPE_tt__GetTracksResponseItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetTracksResponseItem() { tt__GetTracksResponseItem::soap_default(NULL); }
	virtual ~tt__GetTracksResponseItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobConfiguration
#define SOAP_TYPE_tt__RecordingJobConfiguration (586)
/* tt:RecordingJobConfiguration */
class SOAP_CMAC tt__RecordingJobConfiguration
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string Mode;	/* required element of type tt:RecordingJobMode */
	int Priority;	/* required element of type xsd:int */
	std::vector<class tt__RecordingJobSource * >Source;	/* optional element of type tt:RecordingJobSource */
	class tt__RecordingJobConfigurationExtension *Extension;	/* optional element of type tt:RecordingJobConfigurationExtension */
	std::string ScheduleToken;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 586; } /* = unique type id SOAP_TYPE_tt__RecordingJobConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobConfiguration() { tt__RecordingJobConfiguration::soap_default(NULL); }
	virtual ~tt__RecordingJobConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobConfigurationExtension
#define SOAP_TYPE_tt__RecordingJobConfigurationExtension (587)
/* tt:RecordingJobConfigurationExtension */
class SOAP_CMAC tt__RecordingJobConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 587; } /* = unique type id SOAP_TYPE_tt__RecordingJobConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobConfigurationExtension() { tt__RecordingJobConfigurationExtension::soap_default(NULL); }
	virtual ~tt__RecordingJobConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobSource
#define SOAP_TYPE_tt__RecordingJobSource (588)
/* tt:RecordingJobSource */
class SOAP_CMAC tt__RecordingJobSource
{
public:
	tt__SourceReference *SourceToken;	/* optional element of type tt:SourceReference */
	bool *AutoCreateReceiver;	/* optional element of type xsd:boolean */
	std::vector<class tt__RecordingJobTrack * >Tracks;	/* optional element of type tt:RecordingJobTrack */
	class tt__RecordingJobSourceExtension *Extension;	/* optional element of type tt:RecordingJobSourceExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 588; } /* = unique type id SOAP_TYPE_tt__RecordingJobSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobSource() { tt__RecordingJobSource::soap_default(NULL); }
	virtual ~tt__RecordingJobSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobSourceExtension
#define SOAP_TYPE_tt__RecordingJobSourceExtension (589)
/* tt:RecordingJobSourceExtension */
class SOAP_CMAC tt__RecordingJobSourceExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 589; } /* = unique type id SOAP_TYPE_tt__RecordingJobSourceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobSourceExtension() { tt__RecordingJobSourceExtension::soap_default(NULL); }
	virtual ~tt__RecordingJobSourceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobTrack
#define SOAP_TYPE_tt__RecordingJobTrack (590)
/* tt:RecordingJobTrack */
class SOAP_CMAC tt__RecordingJobTrack
{
public:
	std::string SourceTag;	/* required element of type xsd:string */
	std::string Destination;	/* required element of type tt:TrackReference */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 590; } /* = unique type id SOAP_TYPE_tt__RecordingJobTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobTrack() { tt__RecordingJobTrack::soap_default(NULL); }
	virtual ~tt__RecordingJobTrack() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateInformation
#define SOAP_TYPE_tt__RecordingJobStateInformation (591)
/* tt:RecordingJobStateInformation */
class SOAP_CMAC tt__RecordingJobStateInformation
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string State;	/* required element of type tt:RecordingJobState */
	std::vector<class tt__RecordingJobStateSource * >Sources;	/* optional element of type tt:RecordingJobStateSource */
	class tt__RecordingJobStateInformationExtension *Extension;	/* optional element of type tt:RecordingJobStateInformationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 591; } /* = unique type id SOAP_TYPE_tt__RecordingJobStateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateInformation() { tt__RecordingJobStateInformation::soap_default(NULL); }
	virtual ~tt__RecordingJobStateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateInformationExtension
#define SOAP_TYPE_tt__RecordingJobStateInformationExtension (592)
/* tt:RecordingJobStateInformationExtension */
class SOAP_CMAC tt__RecordingJobStateInformationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 592; } /* = unique type id SOAP_TYPE_tt__RecordingJobStateInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateInformationExtension() { tt__RecordingJobStateInformationExtension::soap_default(NULL); }
	virtual ~tt__RecordingJobStateInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateSource
#define SOAP_TYPE_tt__RecordingJobStateSource (593)
/* tt:RecordingJobStateSource */
class SOAP_CMAC tt__RecordingJobStateSource
{
public:
	tt__SourceReference *SourceToken;	/* required element of type tt:SourceReference */
	std::string State;	/* required element of type tt:RecordingJobState */
	class tt__RecordingJobStateTracks *Tracks;	/* required element of type tt:RecordingJobStateTracks */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 593; } /* = unique type id SOAP_TYPE_tt__RecordingJobStateSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateSource() { tt__RecordingJobStateSource::soap_default(NULL); }
	virtual ~tt__RecordingJobStateSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateTracks
#define SOAP_TYPE_tt__RecordingJobStateTracks (594)
/* tt:RecordingJobStateTracks */
class SOAP_CMAC tt__RecordingJobStateTracks
{
public:
	std::vector<class tt__RecordingJobStateTrack * >Track;	/* optional element of type tt:RecordingJobStateTrack */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 594; } /* = unique type id SOAP_TYPE_tt__RecordingJobStateTracks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateTracks() { tt__RecordingJobStateTracks::soap_default(NULL); }
	virtual ~tt__RecordingJobStateTracks() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateTrack
#define SOAP_TYPE_tt__RecordingJobStateTrack (595)
/* tt:RecordingJobStateTrack */
class SOAP_CMAC tt__RecordingJobStateTrack
{
public:
	std::string SourceTag;	/* required element of type xsd:string */
	std::string Destination;	/* required element of type tt:TrackReference */
	std::string *Error;	/* optional element of type xsd:string */
	std::string State;	/* required element of type tt:RecordingJobState */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 595; } /* = unique type id SOAP_TYPE_tt__RecordingJobStateTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateTrack() { tt__RecordingJobStateTrack::soap_default(NULL); }
	virtual ~tt__RecordingJobStateTrack() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetRecordingJobsResponseItem
#define SOAP_TYPE_tt__GetRecordingJobsResponseItem (596)
/* tt:GetRecordingJobsResponseItem */
class SOAP_CMAC tt__GetRecordingJobsResponseItem
{
public:
	std::string JobToken;	/* required element of type tt:RecordingJobReference */
	tt__RecordingJobConfiguration *JobConfiguration;	/* required element of type tt:RecordingJobConfiguration */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 596; } /* = unique type id SOAP_TYPE_tt__GetRecordingJobsResponseItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetRecordingJobsResponseItem() { tt__GetRecordingJobsResponseItem::soap_default(NULL); }
	virtual ~tt__GetRecordingJobsResponseItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReplayConfiguration
#define SOAP_TYPE_tt__ReplayConfiguration (597)
/* tt:ReplayConfiguration */
class SOAP_CMAC tt__ReplayConfiguration
{
public:
	LONG64 SessionTimeout;	/* external */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 597; } /* = unique type id SOAP_TYPE_tt__ReplayConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReplayConfiguration() { tt__ReplayConfiguration::soap_default(NULL); }
	virtual ~tt__ReplayConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration (599)
/* tt:AnalyticsDeviceEngineConfiguration */
class SOAP_CMAC tt__AnalyticsDeviceEngineConfiguration
{
public:
	std::vector<class tt__EngineConfiguration * >EngineConfiguration;	/* required element of type tt:EngineConfiguration */
	class tt__AnalyticsDeviceEngineConfigurationExtension *Extension;	/* optional element of type tt:AnalyticsDeviceEngineConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 599; } /* = unique type id SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceEngineConfiguration() { tt__AnalyticsDeviceEngineConfiguration::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension (600)
/* tt:AnalyticsDeviceEngineConfigurationExtension */
class SOAP_CMAC tt__AnalyticsDeviceEngineConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 600; } /* = unique type id SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceEngineConfigurationExtension() { tt__AnalyticsDeviceEngineConfigurationExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EngineConfiguration
#define SOAP_TYPE_tt__EngineConfiguration (601)
/* tt:EngineConfiguration */
class SOAP_CMAC tt__EngineConfiguration
{
public:
	tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration;	/* required element of type tt:VideoAnalyticsConfiguration */
	class tt__AnalyticsEngineInputInfo *AnalyticsEngineInputInfo;	/* required element of type tt:AnalyticsEngineInputInfo */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 601; } /* = unique type id SOAP_TYPE_tt__EngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EngineConfiguration() { tt__EngineConfiguration::soap_default(NULL); }
	virtual ~tt__EngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfo
#define SOAP_TYPE_tt__AnalyticsEngineInputInfo (602)
/* tt:AnalyticsEngineInputInfo */
class SOAP_CMAC tt__AnalyticsEngineInputInfo
{
public:
	tt__Config *InputInfo;	/* optional element of type tt:Config */
	class tt__AnalyticsEngineInputInfoExtension *Extension;	/* optional element of type tt:AnalyticsEngineInputInfoExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 602; } /* = unique type id SOAP_TYPE_tt__AnalyticsEngineInputInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineInputInfo() { tt__AnalyticsEngineInputInfo::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineInputInfo() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension
#define SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension (603)
/* tt:AnalyticsEngineInputInfoExtension */
class SOAP_CMAC tt__AnalyticsEngineInputInfoExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 603; } /* = unique type id SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineInputInfoExtension() { tt__AnalyticsEngineInputInfoExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineInputInfoExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SourceIdentification
#define SOAP_TYPE_tt__SourceIdentification (605)
/* tt:SourceIdentification */
class SOAP_CMAC tt__SourceIdentification
{
public:
	std::string Name;	/* required element of type xsd:string */
	std::vector<std::string >Token;	/* required element of type tt:ReferenceToken */
	class tt__SourceIdentificationExtension *Extension;	/* optional element of type tt:SourceIdentificationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 605; } /* = unique type id SOAP_TYPE_tt__SourceIdentification */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SourceIdentification() { tt__SourceIdentification::soap_default(NULL); }
	virtual ~tt__SourceIdentification() { }
};
#endif

#ifndef SOAP_TYPE_tt__SourceIdentificationExtension
#define SOAP_TYPE_tt__SourceIdentificationExtension (606)
/* tt:SourceIdentificationExtension */
class SOAP_CMAC tt__SourceIdentificationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 606; } /* = unique type id SOAP_TYPE_tt__SourceIdentificationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SourceIdentificationExtension() { tt__SourceIdentificationExtension::soap_default(NULL); }
	virtual ~tt__SourceIdentificationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataInput
#define SOAP_TYPE_tt__MetadataInput (607)
/* tt:MetadataInput */
class SOAP_CMAC tt__MetadataInput
{
public:
	std::vector<tt__Config * >MetadataConfig;	/* optional element of type tt:Config */
	class tt__MetadataInputExtension *Extension;	/* optional element of type tt:MetadataInputExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 607; } /* = unique type id SOAP_TYPE_tt__MetadataInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataInput() { tt__MetadataInput::soap_default(NULL); }
	virtual ~tt__MetadataInput() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataInputExtension
#define SOAP_TYPE_tt__MetadataInputExtension (608)
/* tt:MetadataInputExtension */
class SOAP_CMAC tt__MetadataInputExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 608; } /* = unique type id SOAP_TYPE_tt__MetadataInputExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataInputExtension() { tt__MetadataInputExtension::soap_default(NULL); }
	virtual ~tt__MetadataInputExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsStateInformation
#define SOAP_TYPE_tt__AnalyticsStateInformation (610)
/* tt:AnalyticsStateInformation */
class SOAP_CMAC tt__AnalyticsStateInformation
{
public:
	std::string AnalyticsEngineControlToken;	/* required element of type tt:ReferenceToken */
	class tt__AnalyticsState *State;	/* required element of type tt:AnalyticsState */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 610; } /* = unique type id SOAP_TYPE_tt__AnalyticsStateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsStateInformation() { tt__AnalyticsStateInformation::soap_default(NULL); }
	virtual ~tt__AnalyticsStateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsState
#define SOAP_TYPE_tt__AnalyticsState (611)
/* tt:AnalyticsState */
class SOAP_CMAC tt__AnalyticsState
{
public:
	std::string *Error;	/* optional element of type xsd:string */
	std::string State;	/* required element of type xsd:string */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 611; } /* = unique type id SOAP_TYPE_tt__AnalyticsState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsState() { tt__AnalyticsState::soap_default(NULL); }
	virtual ~tt__AnalyticsState() { }
};
#endif

#ifndef SOAP_TYPE_tt__ActionEngineEventPayload
#define SOAP_TYPE_tt__ActionEngineEventPayload (612)
/* tt:ActionEngineEventPayload */
class SOAP_CMAC tt__ActionEngineEventPayload
{
public:
	struct SOAP_ENV__Envelope *RequestInfo;	/* optional element of type SOAP-ENV:Envelope */
	struct SOAP_ENV__Envelope *ResponseInfo;	/* optional element of type SOAP-ENV:Envelope */
	struct SOAP_ENV__Fault *Fault;	/* optional element of type SOAP-ENV:Fault */
	class tt__ActionEngineEventPayloadExtension *Extension;	/* optional element of type tt:ActionEngineEventPayloadExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 612; } /* = unique type id SOAP_TYPE_tt__ActionEngineEventPayload */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ActionEngineEventPayload() { tt__ActionEngineEventPayload::soap_default(NULL); }
	virtual ~tt__ActionEngineEventPayload() { }
};
#endif

#ifndef SOAP_TYPE_tt__ActionEngineEventPayloadExtension
#define SOAP_TYPE_tt__ActionEngineEventPayloadExtension (613)
/* tt:ActionEngineEventPayloadExtension */
class SOAP_CMAC tt__ActionEngineEventPayloadExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 613; } /* = unique type id SOAP_TYPE_tt__ActionEngineEventPayloadExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ActionEngineEventPayloadExtension() { tt__ActionEngineEventPayloadExtension::soap_default(NULL); }
	virtual ~tt__ActionEngineEventPayloadExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioClassCandidate
#define SOAP_TYPE_tt__AudioClassCandidate (614)
/* tt:AudioClassCandidate */
class SOAP_CMAC tt__AudioClassCandidate
{
public:
	std::string Type;	/* required element of type tt:AudioClassType */
	float Likelihood;	/* required element of type xsd:float */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 614; } /* = unique type id SOAP_TYPE_tt__AudioClassCandidate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioClassCandidate() { tt__AudioClassCandidate::soap_default(NULL); }
	virtual ~tt__AudioClassCandidate() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioClassDescriptor
#define SOAP_TYPE_tt__AudioClassDescriptor (615)
/* tt:AudioClassDescriptor */
class SOAP_CMAC tt__AudioClassDescriptor
{
public:
	std::vector<tt__AudioClassCandidate * >ClassCandidate;	/* optional element of type tt:AudioClassCandidate */
	class tt__AudioClassDescriptorExtension *Extension;	/* optional element of type tt:AudioClassDescriptorExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 615; } /* = unique type id SOAP_TYPE_tt__AudioClassDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioClassDescriptor() { tt__AudioClassDescriptor::soap_default(NULL); }
	virtual ~tt__AudioClassDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioClassDescriptorExtension
#define SOAP_TYPE_tt__AudioClassDescriptorExtension (616)
/* tt:AudioClassDescriptorExtension */
class SOAP_CMAC tt__AudioClassDescriptorExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 616; } /* = unique type id SOAP_TYPE_tt__AudioClassDescriptorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioClassDescriptorExtension() { tt__AudioClassDescriptorExtension::soap_default(NULL); }
	virtual ~tt__AudioClassDescriptorExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ActiveConnection
#define SOAP_TYPE_tt__ActiveConnection (617)
/* tt:ActiveConnection */
class SOAP_CMAC tt__ActiveConnection
{
public:
	float CurrentBitrate;	/* required element of type xsd:float */
	float CurrentFps;	/* required element of type xsd:float */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 617; } /* = unique type id SOAP_TYPE_tt__ActiveConnection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ActiveConnection() { tt__ActiveConnection::soap_default(NULL); }
	virtual ~tt__ActiveConnection() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileStatus
#define SOAP_TYPE_tt__ProfileStatus (618)
/* tt:ProfileStatus */
class SOAP_CMAC tt__ProfileStatus
{
public:
	std::vector<tt__ActiveConnection * >ActiveConnections;	/* optional element of type tt:ActiveConnection */
	class tt__ProfileStatusExtension *Extension;	/* optional element of type tt:ProfileStatusExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 618; } /* = unique type id SOAP_TYPE_tt__ProfileStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileStatus() { tt__ProfileStatus::soap_default(NULL); }
	virtual ~tt__ProfileStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileStatusExtension
#define SOAP_TYPE_tt__ProfileStatusExtension (619)
/* tt:ProfileStatusExtension */
class SOAP_CMAC tt__ProfileStatusExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 619; } /* = unique type id SOAP_TYPE_tt__ProfileStatusExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileStatusExtension() { tt__ProfileStatusExtension::soap_default(NULL); }
	virtual ~tt__ProfileStatusExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDPosConfiguration
#define SOAP_TYPE_tt__OSDPosConfiguration (621)
/* tt:OSDPosConfiguration */
class SOAP_CMAC tt__OSDPosConfiguration
{
public:
	std::string Type;	/* required element of type xsd:string */
	tt__Vector *Pos;	/* optional element of type tt:Vector */
	class tt__OSDPosConfigurationExtension *Extension;	/* optional element of type tt:OSDPosConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 621; } /* = unique type id SOAP_TYPE_tt__OSDPosConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDPosConfiguration() { tt__OSDPosConfiguration::soap_default(NULL); }
	virtual ~tt__OSDPosConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDPosConfigurationExtension
#define SOAP_TYPE_tt__OSDPosConfigurationExtension (622)
/* tt:OSDPosConfigurationExtension */
class SOAP_CMAC tt__OSDPosConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 622; } /* = unique type id SOAP_TYPE_tt__OSDPosConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDPosConfigurationExtension() { tt__OSDPosConfigurationExtension::soap_default(NULL); }
	virtual ~tt__OSDPosConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDColor
#define SOAP_TYPE_tt__OSDColor (623)
/* tt:OSDColor */
class SOAP_CMAC tt__OSDColor
{
public:
	class tt__Color *Color;	/* required element of type tt:Color */
	int *Transparent;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 623; } /* = unique type id SOAP_TYPE_tt__OSDColor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDColor() { tt__OSDColor::soap_default(NULL); }
	virtual ~tt__OSDColor() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDTextConfiguration
#define SOAP_TYPE_tt__OSDTextConfiguration (624)
/* tt:OSDTextConfiguration */
class SOAP_CMAC tt__OSDTextConfiguration
{
public:
	std::string Type;	/* required element of type xsd:string */
	std::string *DateFormat;	/* optional element of type xsd:string */
	std::string *TimeFormat;	/* optional element of type xsd:string */
	int *FontSize;	/* optional element of type xsd:int */
	tt__OSDColor *FontColor;	/* optional element of type tt:OSDColor */
	tt__OSDColor *BackgroundColor;	/* optional element of type tt:OSDColor */
	std::string *PlainText;	/* optional element of type xsd:string */
	class tt__OSDTextConfigurationExtension *Extension;	/* optional element of type tt:OSDTextConfigurationExtension */
	bool *IsPersistentText;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 624; } /* = unique type id SOAP_TYPE_tt__OSDTextConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDTextConfiguration() { tt__OSDTextConfiguration::soap_default(NULL); }
	virtual ~tt__OSDTextConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDTextConfigurationExtension
#define SOAP_TYPE_tt__OSDTextConfigurationExtension (625)
/* tt:OSDTextConfigurationExtension */
class SOAP_CMAC tt__OSDTextConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 625; } /* = unique type id SOAP_TYPE_tt__OSDTextConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDTextConfigurationExtension() { tt__OSDTextConfigurationExtension::soap_default(NULL); }
	virtual ~tt__OSDTextConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDImgConfiguration
#define SOAP_TYPE_tt__OSDImgConfiguration (626)
/* tt:OSDImgConfiguration */
class SOAP_CMAC tt__OSDImgConfiguration
{
public:
	std::string ImgPath;	/* required element of type xsd:anyURI */
	class tt__OSDImgConfigurationExtension *Extension;	/* optional element of type tt:OSDImgConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 626; } /* = unique type id SOAP_TYPE_tt__OSDImgConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDImgConfiguration() { tt__OSDImgConfiguration::soap_default(NULL); }
	virtual ~tt__OSDImgConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDImgConfigurationExtension
#define SOAP_TYPE_tt__OSDImgConfigurationExtension (627)
/* tt:OSDImgConfigurationExtension */
class SOAP_CMAC tt__OSDImgConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 627; } /* = unique type id SOAP_TYPE_tt__OSDImgConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDImgConfigurationExtension() { tt__OSDImgConfigurationExtension::soap_default(NULL); }
	virtual ~tt__OSDImgConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ColorspaceRange
#define SOAP_TYPE_tt__ColorspaceRange (628)
/* tt:ColorspaceRange */
class SOAP_CMAC tt__ColorspaceRange
{
public:
	tt__FloatRange *X;	/* required element of type tt:FloatRange */
	tt__FloatRange *Y;	/* required element of type tt:FloatRange */
	tt__FloatRange *Z;	/* required element of type tt:FloatRange */
	std::string Colorspace;	/* required element of type xsd:anyURI */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 628; } /* = unique type id SOAP_TYPE_tt__ColorspaceRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ColorspaceRange() { tt__ColorspaceRange::soap_default(NULL); }
	virtual ~tt__ColorspaceRange() { }
};
#endif

#ifndef SOAP_TYPE__tt__union_ColorOptions
#define SOAP_TYPE__tt__union_ColorOptions (1774)
/* xsd:choice */
union _tt__union_ColorOptions
{
#define SOAP_UNION__tt__union_ColorOptions_ColorList	(1)
	std::vector<tt__Color * >*ColorList;
#define SOAP_UNION__tt__union_ColorOptions_ColorspaceRange	(2)
	std::vector<tt__ColorspaceRange * >*ColorspaceRange;
};
#endif

#ifndef SOAP_TYPE_tt__ColorOptions
#define SOAP_TYPE_tt__ColorOptions (629)
/* tt:ColorOptions */
class SOAP_CMAC tt__ColorOptions
{
public:
	int __union_ColorOptions;	/* union discriminant (of union defined below) */
	union _tt__union_ColorOptions union_ColorOptions;	/* required element of type xsd:choice */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 629; } /* = unique type id SOAP_TYPE_tt__ColorOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ColorOptions() { tt__ColorOptions::soap_default(NULL); }
	virtual ~tt__ColorOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDColorOptions
#define SOAP_TYPE_tt__OSDColorOptions (630)
/* tt:OSDColorOptions */
class SOAP_CMAC tt__OSDColorOptions
{
public:
	tt__ColorOptions *Color;	/* optional element of type tt:ColorOptions */
	tt__IntRange *Transparent;	/* optional element of type tt:IntRange */
	class tt__OSDColorOptionsExtension *Extension;	/* optional element of type tt:OSDColorOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 630; } /* = unique type id SOAP_TYPE_tt__OSDColorOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDColorOptions() { tt__OSDColorOptions::soap_default(NULL); }
	virtual ~tt__OSDColorOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDColorOptionsExtension
#define SOAP_TYPE_tt__OSDColorOptionsExtension (631)
/* tt:OSDColorOptionsExtension */
class SOAP_CMAC tt__OSDColorOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 631; } /* = unique type id SOAP_TYPE_tt__OSDColorOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDColorOptionsExtension() { tt__OSDColorOptionsExtension::soap_default(NULL); }
	virtual ~tt__OSDColorOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDTextOptions
#define SOAP_TYPE_tt__OSDTextOptions (632)
/* tt:OSDTextOptions */
class SOAP_CMAC tt__OSDTextOptions
{
public:
	std::vector<std::string >Type;	/* required element of type xsd:string */
	tt__IntRange *FontSizeRange;	/* optional element of type tt:IntRange */
	std::vector<std::string >DateFormat;	/* optional element of type xsd:string */
	std::vector<std::string >TimeFormat;	/* optional element of type xsd:string */
	tt__OSDColorOptions *FontColor;	/* optional element of type tt:OSDColorOptions */
	tt__OSDColorOptions *BackgroundColor;	/* optional element of type tt:OSDColorOptions */
	class tt__OSDTextOptionsExtension *Extension;	/* optional element of type tt:OSDTextOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 632; } /* = unique type id SOAP_TYPE_tt__OSDTextOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDTextOptions() { tt__OSDTextOptions::soap_default(NULL); }
	virtual ~tt__OSDTextOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDTextOptionsExtension
#define SOAP_TYPE_tt__OSDTextOptionsExtension (633)
/* tt:OSDTextOptionsExtension */
class SOAP_CMAC tt__OSDTextOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 633; } /* = unique type id SOAP_TYPE_tt__OSDTextOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDTextOptionsExtension() { tt__OSDTextOptionsExtension::soap_default(NULL); }
	virtual ~tt__OSDTextOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDImgOptions
#define SOAP_TYPE_tt__OSDImgOptions (634)
/* tt:OSDImgOptions */
class SOAP_CMAC tt__OSDImgOptions
{
public:
	std::vector<std::string >ImagePath;	/* required element of type xsd:anyURI */
	class tt__OSDImgOptionsExtension *Extension;	/* optional element of type tt:OSDImgOptionsExtension */
	std::string *FormatsSupported;	/* optional attribute */
	int *MaxSize;	/* optional attribute */
	int *MaxWidth;	/* optional attribute */
	int *MaxHeight;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 634; } /* = unique type id SOAP_TYPE_tt__OSDImgOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDImgOptions() { tt__OSDImgOptions::soap_default(NULL); }
	virtual ~tt__OSDImgOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDImgOptionsExtension
#define SOAP_TYPE_tt__OSDImgOptionsExtension (635)
/* tt:OSDImgOptionsExtension */
class SOAP_CMAC tt__OSDImgOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 635; } /* = unique type id SOAP_TYPE_tt__OSDImgOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDImgOptionsExtension() { tt__OSDImgOptionsExtension::soap_default(NULL); }
	virtual ~tt__OSDImgOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDConfigurationExtension
#define SOAP_TYPE_tt__OSDConfigurationExtension (637)
/* tt:OSDConfigurationExtension */
class SOAP_CMAC tt__OSDConfigurationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 637; } /* = unique type id SOAP_TYPE_tt__OSDConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDConfigurationExtension() { tt__OSDConfigurationExtension::soap_default(NULL); }
	virtual ~tt__OSDConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MaximumNumberOfOSDs
#define SOAP_TYPE_tt__MaximumNumberOfOSDs (638)
/* tt:MaximumNumberOfOSDs */
class SOAP_CMAC tt__MaximumNumberOfOSDs
{
public:
	int Total;	/* required attribute */
	int *Image;	/* optional attribute */
	int *PlainText;	/* optional attribute */
	int *Date;	/* optional attribute */
	int *Time;	/* optional attribute */
	int *DateAndTime;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 638; } /* = unique type id SOAP_TYPE_tt__MaximumNumberOfOSDs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MaximumNumberOfOSDs() { tt__MaximumNumberOfOSDs::soap_default(NULL); }
	virtual ~tt__MaximumNumberOfOSDs() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDConfigurationOptions
#define SOAP_TYPE_tt__OSDConfigurationOptions (639)
/* tt:OSDConfigurationOptions */
class SOAP_CMAC tt__OSDConfigurationOptions
{
public:
	tt__MaximumNumberOfOSDs *MaximumNumberOfOSDs;	/* required element of type tt:MaximumNumberOfOSDs */
	std::vector<enum tt__OSDType >Type;	/* required element of type tt:OSDType */
	std::vector<std::string >PositionOption;	/* required element of type xsd:string */
	tt__OSDTextOptions *TextOption;	/* optional element of type tt:OSDTextOptions */
	tt__OSDImgOptions *ImageOption;	/* optional element of type tt:OSDImgOptions */
	class tt__OSDConfigurationOptionsExtension *Extension;	/* optional element of type tt:OSDConfigurationOptionsExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 639; } /* = unique type id SOAP_TYPE_tt__OSDConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDConfigurationOptions() { tt__OSDConfigurationOptions::soap_default(NULL); }
	virtual ~tt__OSDConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDConfigurationOptionsExtension
#define SOAP_TYPE_tt__OSDConfigurationOptionsExtension (640)
/* tt:OSDConfigurationOptionsExtension */
class SOAP_CMAC tt__OSDConfigurationOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 640; } /* = unique type id SOAP_TYPE_tt__OSDConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDConfigurationOptionsExtension() { tt__OSDConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__OSDConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FileProgress
#define SOAP_TYPE_tt__FileProgress (641)
/* tt:FileProgress */
class SOAP_CMAC tt__FileProgress
{
public:
	std::string FileName;	/* required element of type xsd:string */
	float Progress;	/* required element of type xsd:float */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 641; } /* = unique type id SOAP_TYPE_tt__FileProgress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FileProgress() { tt__FileProgress::soap_default(NULL); }
	virtual ~tt__FileProgress() { }
};
#endif

#ifndef SOAP_TYPE_tt__ArrayOfFileProgress
#define SOAP_TYPE_tt__ArrayOfFileProgress (642)
/* tt:ArrayOfFileProgress */
class SOAP_CMAC tt__ArrayOfFileProgress
{
public:
	std::vector<tt__FileProgress * >FileProgress;	/* optional element of type tt:FileProgress */
	class tt__ArrayOfFileProgressExtension *Extension;	/* optional element of type tt:ArrayOfFileProgressExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 642; } /* = unique type id SOAP_TYPE_tt__ArrayOfFileProgress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ArrayOfFileProgress() { tt__ArrayOfFileProgress::soap_default(NULL); }
	virtual ~tt__ArrayOfFileProgress() { }
};
#endif

#ifndef SOAP_TYPE_tt__ArrayOfFileProgressExtension
#define SOAP_TYPE_tt__ArrayOfFileProgressExtension (643)
/* tt:ArrayOfFileProgressExtension */
class SOAP_CMAC tt__ArrayOfFileProgressExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 643; } /* = unique type id SOAP_TYPE_tt__ArrayOfFileProgressExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ArrayOfFileProgressExtension() { tt__ArrayOfFileProgressExtension::soap_default(NULL); }
	virtual ~tt__ArrayOfFileProgressExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__StorageReferencePath
#define SOAP_TYPE_tt__StorageReferencePath (644)
/* tt:StorageReferencePath */
class SOAP_CMAC tt__StorageReferencePath
{
public:
	std::string StorageToken;	/* required element of type tt:ReferenceToken */
	std::string *RelativePath;	/* optional element of type xsd:string */
	class tt__StorageReferencePathExtension *Extension;	/* optional element of type tt:StorageReferencePathExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 644; } /* = unique type id SOAP_TYPE_tt__StorageReferencePath */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__StorageReferencePath() { tt__StorageReferencePath::soap_default(NULL); }
	virtual ~tt__StorageReferencePath() { }
};
#endif

#ifndef SOAP_TYPE_tt__StorageReferencePathExtension
#define SOAP_TYPE_tt__StorageReferencePathExtension (645)
/* tt:StorageReferencePathExtension */
class SOAP_CMAC tt__StorageReferencePathExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 645; } /* = unique type id SOAP_TYPE_tt__StorageReferencePathExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__StorageReferencePathExtension() { tt__StorageReferencePathExtension::soap_default(NULL); }
	virtual ~tt__StorageReferencePathExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntRange
#define SOAP_TYPE_tt__IntRange (646)
/* tt:IntRange */
class SOAP_CMAC tt__IntRange
{
public:
	int Min;	/* required element of type xsd:int */
	int Max;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 646; } /* = unique type id SOAP_TYPE_tt__IntRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntRange() { tt__IntRange::soap_default(NULL); }
	virtual ~tt__IntRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__Vector2D
#define SOAP_TYPE_tt__Vector2D (647)
/* tt:Vector2D */
class SOAP_CMAC tt__Vector2D
{
public:
	float x;	/* required attribute */
	float y;	/* required attribute */
	std::string *space;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 647; } /* = unique type id SOAP_TYPE_tt__Vector2D */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Vector2D() { tt__Vector2D::soap_default(NULL); }
	virtual ~tt__Vector2D() { }
};
#endif

#ifndef SOAP_TYPE_tt__Vector1D
#define SOAP_TYPE_tt__Vector1D (648)
/* tt:Vector1D */
class SOAP_CMAC tt__Vector1D
{
public:
	float x;	/* required attribute */
	std::string *space;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 648; } /* = unique type id SOAP_TYPE_tt__Vector1D */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Vector1D() { tt__Vector1D::soap_default(NULL); }
	virtual ~tt__Vector1D() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZVector
#define SOAP_TYPE_tt__PTZVector (649)
/* tt:PTZVector */
class SOAP_CMAC tt__PTZVector
{
public:
	tt__Vector2D *PanTilt;	/* optional element of type tt:Vector2D */
	tt__Vector1D *Zoom;	/* optional element of type tt:Vector1D */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 649; } /* = unique type id SOAP_TYPE_tt__PTZVector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZVector() { tt__PTZVector::soap_default(NULL); }
	virtual ~tt__PTZVector() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStatus
#define SOAP_TYPE_tt__PTZStatus (650)
/* tt:PTZStatus */
class SOAP_CMAC tt__PTZStatus
{
public:
	tt__PTZVector *Position;	/* optional element of type tt:PTZVector */
	class tt__PTZMoveStatus *MoveStatus;	/* optional element of type tt:PTZMoveStatus */
	std::string *Error;	/* optional element of type xsd:string */
	time_t UtcTime;	/* required element of type xsd:dateTime */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 650; } /* = unique type id SOAP_TYPE_tt__PTZStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStatus() { tt__PTZStatus::soap_default(NULL); }
	virtual ~tt__PTZStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZMoveStatus
#define SOAP_TYPE_tt__PTZMoveStatus (651)
/* tt:PTZMoveStatus */
class SOAP_CMAC tt__PTZMoveStatus
{
public:
	enum tt__MoveStatus *PanTilt;	/* optional element of type tt:MoveStatus */
	enum tt__MoveStatus *Zoom;	/* optional element of type tt:MoveStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 651; } /* = unique type id SOAP_TYPE_tt__PTZMoveStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZMoveStatus() { tt__PTZMoveStatus::soap_default(NULL); }
	virtual ~tt__PTZMoveStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__Vector
#define SOAP_TYPE_tt__Vector (652)
/* tt:Vector */
class SOAP_CMAC tt__Vector
{
public:
	float *x;	/* optional attribute */
	float *y;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 652; } /* = unique type id SOAP_TYPE_tt__Vector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Vector() { tt__Vector::soap_default(NULL); }
	virtual ~tt__Vector() { }
};
#endif

#ifndef SOAP_TYPE_tt__Rectangle
#define SOAP_TYPE_tt__Rectangle (653)
/* tt:Rectangle */
class SOAP_CMAC tt__Rectangle
{
public:
	float *bottom;	/* optional attribute */
	float *top;	/* optional attribute */
	float *right;	/* optional attribute */
	float *left;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 653; } /* = unique type id SOAP_TYPE_tt__Rectangle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Rectangle() { tt__Rectangle::soap_default(NULL); }
	virtual ~tt__Rectangle() { }
};
#endif

#ifndef SOAP_TYPE_tt__Polygon
#define SOAP_TYPE_tt__Polygon (654)
/* tt:Polygon */
class SOAP_CMAC tt__Polygon
{
public:
	std::vector<tt__Vector * >Point;	/* required element of type tt:Vector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 654; } /* = unique type id SOAP_TYPE_tt__Polygon */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Polygon() { tt__Polygon::soap_default(NULL); }
	virtual ~tt__Polygon() { }
};
#endif

#ifndef SOAP_TYPE_tt__Color
#define SOAP_TYPE_tt__Color (655)
/* tt:Color */
class SOAP_CMAC tt__Color
{
public:
	float X;	/* required attribute */
	float Y;	/* required attribute */
	float Z;	/* required attribute */
	std::string *Colorspace;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 655; } /* = unique type id SOAP_TYPE_tt__Color */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Color() { tt__Color::soap_default(NULL); }
	virtual ~tt__Color() { }
};
#endif

#ifndef SOAP_TYPE_tt__ColorCovariance
#define SOAP_TYPE_tt__ColorCovariance (656)
/* tt:ColorCovariance */
class SOAP_CMAC tt__ColorCovariance
{
public:
	float XX;	/* required attribute */
	float YY;	/* required attribute */
	float ZZ;	/* required attribute */
	float *XY;	/* optional attribute */
	float *XZ;	/* optional attribute */
	float *YZ;	/* optional attribute */
	std::string *Colorspace;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 656; } /* = unique type id SOAP_TYPE_tt__ColorCovariance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ColorCovariance() { tt__ColorCovariance::soap_default(NULL); }
	virtual ~tt__ColorCovariance() { }
};
#endif

#ifndef SOAP_TYPE__tt__ColorDescriptor_ColorCluster
#define SOAP_TYPE__tt__ColorDescriptor_ColorCluster (1792)
/* tt:ColorDescriptor-ColorCluster */
class SOAP_CMAC _tt__ColorDescriptor_ColorCluster
{
public:
	tt__Color *Color;	/* required element of type tt:Color */
	float *Weight;	/* optional element of type xsd:float */
	tt__ColorCovariance *Covariance;	/* optional element of type tt:ColorCovariance */
	std::vector<struct soap_dom_element >__any;
public:
	virtual int soap_type() const { return 1792; } /* = unique type id SOAP_TYPE__tt__ColorDescriptor_ColorCluster */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ColorDescriptor_ColorCluster() { _tt__ColorDescriptor_ColorCluster::soap_default(NULL); }
	virtual ~_tt__ColorDescriptor_ColorCluster() { }
};
#endif

#ifndef SOAP_TYPE_tt__ColorDescriptor
#define SOAP_TYPE_tt__ColorDescriptor (657)
/* tt:ColorDescriptor */
class SOAP_CMAC tt__ColorDescriptor
{
public:
	std::vector<_tt__ColorDescriptor_ColorCluster >*ColorCluster;	/* optional element of type tt:ColorDescriptor-ColorCluster */
	struct soap_dom_element *Extension;	/* optional element of type xsd:anyType */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 657; } /* = unique type id SOAP_TYPE_tt__ColorDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ColorDescriptor() { tt__ColorDescriptor::soap_default(NULL); }
	virtual ~tt__ColorDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_tt__Transformation
#define SOAP_TYPE_tt__Transformation (658)
/* tt:Transformation */
class SOAP_CMAC tt__Transformation
{
public:
	tt__Vector *Translate;	/* optional element of type tt:Vector */
	tt__Vector *Scale;	/* optional element of type tt:Vector */
	class tt__TransformationExtension *Extension;	/* optional element of type tt:TransformationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 658; } /* = unique type id SOAP_TYPE_tt__Transformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Transformation() { tt__Transformation::soap_default(NULL); }
	virtual ~tt__Transformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__TransformationExtension
#define SOAP_TYPE_tt__TransformationExtension (659)
/* tt:TransformationExtension */
class SOAP_CMAC tt__TransformationExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 659; } /* = unique type id SOAP_TYPE_tt__TransformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TransformationExtension() { tt__TransformationExtension::soap_default(NULL); }
	virtual ~tt__TransformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__GeoLocation
#define SOAP_TYPE_tt__GeoLocation (660)
/* tt:GeoLocation */
class SOAP_CMAC tt__GeoLocation
{
public:
	std::vector<struct soap_dom_element >__any;
	double *lon;	/* optional attribute */
	double *lat;	/* optional attribute */
	float *elevation;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 660; } /* = unique type id SOAP_TYPE_tt__GeoLocation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GeoLocation() { tt__GeoLocation::soap_default(NULL); }
	virtual ~tt__GeoLocation() { }
};
#endif

#ifndef SOAP_TYPE_tt__GeoOrientation
#define SOAP_TYPE_tt__GeoOrientation (661)
/* tt:GeoOrientation */
class SOAP_CMAC tt__GeoOrientation
{
public:
	std::vector<struct soap_dom_element >__any;
	float *roll;	/* optional attribute */
	float *pitch;	/* optional attribute */
	float *yaw;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 661; } /* = unique type id SOAP_TYPE_tt__GeoOrientation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GeoOrientation() { tt__GeoOrientation::soap_default(NULL); }
	virtual ~tt__GeoOrientation() { }
};
#endif

#ifndef SOAP_TYPE_tt__LocalLocation
#define SOAP_TYPE_tt__LocalLocation (662)
/* tt:LocalLocation */
class SOAP_CMAC tt__LocalLocation
{
public:
	std::vector<struct soap_dom_element >__any;
	float *x;	/* optional attribute */
	float *y;	/* optional attribute */
	float *z;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 662; } /* = unique type id SOAP_TYPE_tt__LocalLocation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LocalLocation() { tt__LocalLocation::soap_default(NULL); }
	virtual ~tt__LocalLocation() { }
};
#endif

#ifndef SOAP_TYPE_tt__LocalOrientation
#define SOAP_TYPE_tt__LocalOrientation (663)
/* tt:LocalOrientation */
class SOAP_CMAC tt__LocalOrientation
{
public:
	std::vector<struct soap_dom_element >__any;
	float *pan;	/* optional attribute */
	float *tilt;	/* optional attribute */
	float *roll;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 663; } /* = unique type id SOAP_TYPE_tt__LocalOrientation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LocalOrientation() { tt__LocalOrientation::soap_default(NULL); }
	virtual ~tt__LocalOrientation() { }
};
#endif

#ifndef SOAP_TYPE_tt__LocationEntity
#define SOAP_TYPE_tt__LocationEntity (664)
/* tt:LocationEntity */
class SOAP_CMAC tt__LocationEntity
{
public:
	tt__GeoLocation *GeoLocation;	/* optional element of type tt:GeoLocation */
	tt__GeoOrientation *GeoOrientation;	/* optional element of type tt:GeoOrientation */
	tt__LocalLocation *LocalLocation;	/* optional element of type tt:LocalLocation */
	tt__LocalOrientation *LocalOrientation;	/* optional element of type tt:LocalOrientation */
	std::string *Entity;	/* optional attribute */
	std::string *Token;	/* optional attribute */
	bool *Fixed;	/* optional attribute */
	std::string *GeoSource;	/* optional attribute */
	bool *AutoGeo;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 664; } /* = unique type id SOAP_TYPE_tt__LocationEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LocationEntity() { tt__LocationEntity::soap_default(NULL); }
	virtual ~tt__LocationEntity() { }
};
#endif

#ifndef SOAP_TYPE__tt__StringItems
#define SOAP_TYPE__tt__StringItems (665)
/* tt:StringItems */
class SOAP_CMAC _tt__StringItems
{
public:
	std::vector<std::string >Item;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 665; } /* = unique type id SOAP_TYPE__tt__StringItems */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__StringItems() { _tt__StringItems::soap_default(NULL); }
	virtual ~_tt__StringItems() { }
};
#endif

#ifndef SOAP_TYPE__tt__Message
#define SOAP_TYPE__tt__Message (666)
/* tt:Message */
class SOAP_CMAC _tt__Message
{
public:
	tt__ItemList *Source;	/* optional element of type tt:ItemList */
	tt__ItemList *Key;	/* optional element of type tt:ItemList */
	tt__ItemList *Data;	/* optional element of type tt:ItemList */
	tt__MessageExtension *Extension;	/* optional element of type tt:MessageExtension */
	time_t UtcTime;	/* required attribute */
	enum tt__PropertyOperation *PropertyOperation;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 666; } /* = unique type id SOAP_TYPE__tt__Message */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__Message() { _tt__Message::soap_default(NULL); }
	virtual ~_tt__Message() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__QueryExpressionType
#define SOAP_TYPE_wsnt__QueryExpressionType (667)
/* wsnt:QueryExpressionType */
class SOAP_CMAC wsnt__QueryExpressionType
{
public:
	struct soap_dom_element __any;	/* external */
	std::string Dialect;	/* required attribute */
	struct soap_dom_element __mixed;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 667; } /* = unique type id SOAP_TYPE_wsnt__QueryExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__QueryExpressionType() { wsnt__QueryExpressionType::soap_default(NULL); }
	virtual ~wsnt__QueryExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__TopicExpressionType
#define SOAP_TYPE_wsnt__TopicExpressionType (668)
/* wsnt:TopicExpressionType */
class SOAP_CMAC wsnt__TopicExpressionType
{
public:
	struct soap_dom_element __any;	/* external */
	std::string Dialect;	/* required attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap_dom_element __mixed;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 668; } /* = unique type id SOAP_TYPE_wsnt__TopicExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__TopicExpressionType() { wsnt__TopicExpressionType::soap_default(NULL); }
	virtual ~wsnt__TopicExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__FilterType
#define SOAP_TYPE_wsnt__FilterType (669)
/* wsnt:FilterType */
class SOAP_CMAC wsnt__FilterType
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 669; } /* = unique type id SOAP_TYPE_wsnt__FilterType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__FilterType() { wsnt__FilterType::soap_default(NULL); }
	virtual ~wsnt__FilterType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__SubscriptionPolicyType
#define SOAP_TYPE_wsnt__SubscriptionPolicyType (670)
/* wsnt:SubscriptionPolicyType */
class SOAP_CMAC wsnt__SubscriptionPolicyType
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 670; } /* = unique type id SOAP_TYPE_wsnt__SubscriptionPolicyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__SubscriptionPolicyType() { wsnt__SubscriptionPolicyType::soap_default(NULL); }
	virtual ~wsnt__SubscriptionPolicyType() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__NotificationMessageHolderType_Message
#define SOAP_TYPE__wsnt__NotificationMessageHolderType_Message (1807)
/* wsnt:NotificationMessageHolderType-Message */
class SOAP_CMAC _wsnt__NotificationMessageHolderType_Message
{
public:
	struct soap_dom_element __any;	/* external */
public:
	virtual int soap_type() const { return 1807; } /* = unique type id SOAP_TYPE__wsnt__NotificationMessageHolderType_Message */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__NotificationMessageHolderType_Message() { _wsnt__NotificationMessageHolderType_Message::soap_default(NULL); }
	virtual ~_wsnt__NotificationMessageHolderType_Message() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__NotificationMessageHolderType
#define SOAP_TYPE_wsnt__NotificationMessageHolderType (671)
/* wsnt:NotificationMessageHolderType */
class SOAP_CMAC wsnt__NotificationMessageHolderType
{
public:
	struct wsa5__EndpointReferenceType *SubscriptionReference;	/* optional element of type wsa5:EndpointReferenceType */
	wsnt__TopicExpressionType *Topic;	/* optional element of type wsnt:TopicExpressionType */
	struct wsa5__EndpointReferenceType *ProducerReference;	/* optional element of type wsa5:EndpointReferenceType */
	_wsnt__NotificationMessageHolderType_Message Message;	/* required element of type wsnt:NotificationMessageHolderType-Message */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 671; } /* = unique type id SOAP_TYPE_wsnt__NotificationMessageHolderType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__NotificationMessageHolderType() { wsnt__NotificationMessageHolderType::soap_default(NULL); }
	virtual ~wsnt__NotificationMessageHolderType() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__NotificationProducerRP
#define SOAP_TYPE__wsnt__NotificationProducerRP (692)
/* wsnt:NotificationProducerRP */
class SOAP_CMAC _wsnt__NotificationProducerRP
{
public:
	std::vector<wsnt__TopicExpressionType * >TopicExpression;	/* optional element of type wsnt:TopicExpressionType */
	bool *FixedTopicSet;	/* optional element of type xsd:boolean */
	std::vector<std::string >TopicExpressionDialect;	/* optional element of type xsd:anyURI */
	class wstop__TopicSetType *wstop__TopicSet;	/* optional element of type wstop:TopicSetType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 692; } /* = unique type id SOAP_TYPE__wsnt__NotificationProducerRP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__NotificationProducerRP() { _wsnt__NotificationProducerRP::soap_default(NULL); }
	virtual ~_wsnt__NotificationProducerRP() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__SubscriptionManagerRP
#define SOAP_TYPE__wsnt__SubscriptionManagerRP (693)
/* wsnt:SubscriptionManagerRP */
class SOAP_CMAC _wsnt__SubscriptionManagerRP
{
public:
	struct wsa5__EndpointReferenceType ConsumerReference;	/* required element of type wsa5:EndpointReferenceType */
	wsnt__FilterType *Filter;	/* optional element of type wsnt:FilterType */
	wsnt__SubscriptionPolicyType *SubscriptionPolicy;	/* optional element of type wsnt:SubscriptionPolicyType */
	time_t *CreationTime;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 693; } /* = unique type id SOAP_TYPE__wsnt__SubscriptionManagerRP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__SubscriptionManagerRP() { _wsnt__SubscriptionManagerRP::soap_default(NULL); }
	virtual ~_wsnt__SubscriptionManagerRP() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Notify
#define SOAP_TYPE__wsnt__Notify (694)
/* wsnt:Notify */
class SOAP_CMAC _wsnt__Notify
{
public:
	std::vector<wsnt__NotificationMessageHolderType * >NotificationMessage;	/* required element of type wsnt:NotificationMessageHolderType */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 694; } /* = unique type id SOAP_TYPE__wsnt__Notify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Notify() { _wsnt__Notify::soap_default(NULL); }
	virtual ~_wsnt__Notify() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__UseRaw
#define SOAP_TYPE__wsnt__UseRaw (695)
/* wsnt:UseRaw */
class SOAP_CMAC _wsnt__UseRaw
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 695; } /* = unique type id SOAP_TYPE__wsnt__UseRaw */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__UseRaw() { _wsnt__UseRaw::soap_default(NULL); }
	virtual ~_wsnt__UseRaw() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy (1813)
/* wsnt:Subscribe-SubscriptionPolicy */
class SOAP_CMAC _wsnt__Subscribe_SubscriptionPolicy
{
public:
	std::vector<struct soap_dom_element >__any;
public:
	virtual int soap_type() const { return 1813; } /* = unique type id SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Subscribe_SubscriptionPolicy() { _wsnt__Subscribe_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_wsnt__Subscribe_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Subscribe
#define SOAP_TYPE__wsnt__Subscribe (696)
/* wsnt:Subscribe */
class SOAP_CMAC _wsnt__Subscribe
{
public:
	struct wsa5__EndpointReferenceType ConsumerReference;	/* required element of type wsa5:EndpointReferenceType */
	wsnt__FilterType *Filter;	/* optional element of type wsnt:FilterType */
	std::string *InitialTerminationTime;	/* optional element of type wsnt:AbsoluteOrRelativeTimeType */
	_wsnt__Subscribe_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type wsnt:Subscribe-SubscriptionPolicy */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 696; } /* = unique type id SOAP_TYPE__wsnt__Subscribe */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Subscribe() { _wsnt__Subscribe::soap_default(NULL); }
	virtual ~_wsnt__Subscribe() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__SubscribeResponse
#define SOAP_TYPE__wsnt__SubscribeResponse (697)
/* wsnt:SubscribeResponse */
class SOAP_CMAC _wsnt__SubscribeResponse
{
public:
	struct wsa5__EndpointReferenceType SubscriptionReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type wsa5:EndpointReferenceType */
	time_t *CurrentTime;	/* optional element of type xsd:dateTime */
	time_t *TerminationTime;	/* optional element of type xsd:dateTime */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 697; } /* = unique type id SOAP_TYPE__wsnt__SubscribeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__SubscribeResponse() { _wsnt__SubscribeResponse::soap_default(NULL); }
	virtual ~_wsnt__SubscribeResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetCurrentMessage
#define SOAP_TYPE__wsnt__GetCurrentMessage (698)
/* wsnt:GetCurrentMessage */
class SOAP_CMAC _wsnt__GetCurrentMessage
{
public:
	wsnt__TopicExpressionType *Topic;	/* required element of type wsnt:TopicExpressionType */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 698; } /* = unique type id SOAP_TYPE__wsnt__GetCurrentMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetCurrentMessage() { _wsnt__GetCurrentMessage::soap_default(NULL); }
	virtual ~_wsnt__GetCurrentMessage() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetCurrentMessageResponse
#define SOAP_TYPE__wsnt__GetCurrentMessageResponse (699)
/* wsnt:GetCurrentMessageResponse */
class SOAP_CMAC _wsnt__GetCurrentMessageResponse
{
public:
	std::vector<struct soap_dom_element >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 699; } /* = unique type id SOAP_TYPE__wsnt__GetCurrentMessageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetCurrentMessageResponse() { _wsnt__GetCurrentMessageResponse::soap_default(NULL); }
	virtual ~_wsnt__GetCurrentMessageResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetMessages
#define SOAP_TYPE__wsnt__GetMessages (700)
/* wsnt:GetMessages */
class SOAP_CMAC _wsnt__GetMessages
{
public:
	std::string *MaximumNumber;	/* optional element of type xsd:nonNegativeInteger */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 700; } /* = unique type id SOAP_TYPE__wsnt__GetMessages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetMessages() { _wsnt__GetMessages::soap_default(NULL); }
	virtual ~_wsnt__GetMessages() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetMessagesResponse
#define SOAP_TYPE__wsnt__GetMessagesResponse (701)
/* wsnt:GetMessagesResponse */
class SOAP_CMAC _wsnt__GetMessagesResponse
{
public:
	std::vector<wsnt__NotificationMessageHolderType * >NotificationMessage;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type wsnt:NotificationMessageHolderType */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 701; } /* = unique type id SOAP_TYPE__wsnt__GetMessagesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetMessagesResponse() { _wsnt__GetMessagesResponse::soap_default(NULL); }
	virtual ~_wsnt__GetMessagesResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__DestroyPullPoint
#define SOAP_TYPE__wsnt__DestroyPullPoint (702)
/* wsnt:DestroyPullPoint */
class SOAP_CMAC _wsnt__DestroyPullPoint
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 702; } /* = unique type id SOAP_TYPE__wsnt__DestroyPullPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__DestroyPullPoint() { _wsnt__DestroyPullPoint::soap_default(NULL); }
	virtual ~_wsnt__DestroyPullPoint() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__DestroyPullPointResponse
#define SOAP_TYPE__wsnt__DestroyPullPointResponse (703)
/* wsnt:DestroyPullPointResponse */
class SOAP_CMAC _wsnt__DestroyPullPointResponse
{
public:
	std::vector<struct soap_dom_element >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 703; } /* = unique type id SOAP_TYPE__wsnt__DestroyPullPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__DestroyPullPointResponse() { _wsnt__DestroyPullPointResponse::soap_default(NULL); }
	virtual ~_wsnt__DestroyPullPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__CreatePullPoint
#define SOAP_TYPE__wsnt__CreatePullPoint (704)
/* wsnt:CreatePullPoint */
class SOAP_CMAC _wsnt__CreatePullPoint
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 704; } /* = unique type id SOAP_TYPE__wsnt__CreatePullPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__CreatePullPoint() { _wsnt__CreatePullPoint::soap_default(NULL); }
	virtual ~_wsnt__CreatePullPoint() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__CreatePullPointResponse
#define SOAP_TYPE__wsnt__CreatePullPointResponse (705)
/* wsnt:CreatePullPointResponse */
class SOAP_CMAC _wsnt__CreatePullPointResponse
{
public:
	struct wsa5__EndpointReferenceType PullPoint;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type wsa5:EndpointReferenceType */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 705; } /* = unique type id SOAP_TYPE__wsnt__CreatePullPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__CreatePullPointResponse() { _wsnt__CreatePullPointResponse::soap_default(NULL); }
	virtual ~_wsnt__CreatePullPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Renew
#define SOAP_TYPE__wsnt__Renew (706)
/* wsnt:Renew */
class SOAP_CMAC _wsnt__Renew
{
public:
	std::string *TerminationTime;	/* required element of type wsnt:AbsoluteOrRelativeTimeType */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 706; } /* = unique type id SOAP_TYPE__wsnt__Renew */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Renew() { _wsnt__Renew::soap_default(NULL); }
	virtual ~_wsnt__Renew() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__RenewResponse
#define SOAP_TYPE__wsnt__RenewResponse (707)
/* wsnt:RenewResponse */
class SOAP_CMAC _wsnt__RenewResponse
{
public:
	time_t TerminationTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
	time_t *CurrentTime;	/* optional element of type xsd:dateTime */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 707; } /* = unique type id SOAP_TYPE__wsnt__RenewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__RenewResponse() { _wsnt__RenewResponse::soap_default(NULL); }
	virtual ~_wsnt__RenewResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Unsubscribe
#define SOAP_TYPE__wsnt__Unsubscribe (708)
/* wsnt:Unsubscribe */
class SOAP_CMAC _wsnt__Unsubscribe
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 708; } /* = unique type id SOAP_TYPE__wsnt__Unsubscribe */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Unsubscribe() { _wsnt__Unsubscribe::soap_default(NULL); }
	virtual ~_wsnt__Unsubscribe() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__UnsubscribeResponse
#define SOAP_TYPE__wsnt__UnsubscribeResponse (709)
/* wsnt:UnsubscribeResponse */
class SOAP_CMAC _wsnt__UnsubscribeResponse
{
public:
	std::vector<struct soap_dom_element >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 709; } /* = unique type id SOAP_TYPE__wsnt__UnsubscribeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__UnsubscribeResponse() { _wsnt__UnsubscribeResponse::soap_default(NULL); }
	virtual ~_wsnt__UnsubscribeResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__PauseSubscription
#define SOAP_TYPE__wsnt__PauseSubscription (710)
/* wsnt:PauseSubscription */
class SOAP_CMAC _wsnt__PauseSubscription
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 710; } /* = unique type id SOAP_TYPE__wsnt__PauseSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__PauseSubscription() { _wsnt__PauseSubscription::soap_default(NULL); }
	virtual ~_wsnt__PauseSubscription() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__PauseSubscriptionResponse
#define SOAP_TYPE__wsnt__PauseSubscriptionResponse (711)
/* wsnt:PauseSubscriptionResponse */
class SOAP_CMAC _wsnt__PauseSubscriptionResponse
{
public:
	std::vector<struct soap_dom_element >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 711; } /* = unique type id SOAP_TYPE__wsnt__PauseSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__PauseSubscriptionResponse() { _wsnt__PauseSubscriptionResponse::soap_default(NULL); }
	virtual ~_wsnt__PauseSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__ResumeSubscription
#define SOAP_TYPE__wsnt__ResumeSubscription (712)
/* wsnt:ResumeSubscription */
class SOAP_CMAC _wsnt__ResumeSubscription
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 712; } /* = unique type id SOAP_TYPE__wsnt__ResumeSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__ResumeSubscription() { _wsnt__ResumeSubscription::soap_default(NULL); }
	virtual ~_wsnt__ResumeSubscription() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__ResumeSubscriptionResponse
#define SOAP_TYPE__wsnt__ResumeSubscriptionResponse (713)
/* wsnt:ResumeSubscriptionResponse */
class SOAP_CMAC _wsnt__ResumeSubscriptionResponse
{
public:
	std::vector<struct soap_dom_element >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 713; } /* = unique type id SOAP_TYPE__wsnt__ResumeSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__ResumeSubscriptionResponse() { _wsnt__ResumeSubscriptionResponse::soap_default(NULL); }
	virtual ~_wsnt__ResumeSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode (1816)
/* wsrfbf:BaseFaultType-ErrorCode */
class SOAP_CMAC _wsrfbf__BaseFaultType_ErrorCode
{
public:
	std::string dialect;	/* required attribute */
public:
	virtual int soap_type() const { return 1816; } /* = unique type id SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsrfbf__BaseFaultType_ErrorCode() { _wsrfbf__BaseFaultType_ErrorCode::soap_default(NULL); }
	virtual ~_wsrfbf__BaseFaultType_ErrorCode() { }
};
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_Description
#define SOAP_TYPE__wsrfbf__BaseFaultType_Description (1818)
/* Primitive wsrfbf:BaseFaultType-Description schema type: */
class SOAP_CMAC _wsrfbf__BaseFaultType_Description
{
public:
	std::string __item;
	std::string *xml__lang;	/* optional attribute */
public:
	virtual int soap_type() const { return 1818; } /* = unique type id SOAP_TYPE__wsrfbf__BaseFaultType_Description */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsrfbf__BaseFaultType_Description() { _wsrfbf__BaseFaultType_Description::soap_default(NULL); }
	virtual ~_wsrfbf__BaseFaultType_Description() { }
};
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause (1822)
/* wsrfbf:BaseFaultType-FaultCause */
class SOAP_CMAC _wsrfbf__BaseFaultType_FaultCause
{
public:
	struct soap_dom_element __any;	/* external */
public:
	virtual int soap_type() const { return 1822; } /* = unique type id SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsrfbf__BaseFaultType_FaultCause() { _wsrfbf__BaseFaultType_FaultCause::soap_default(NULL); }
	virtual ~_wsrfbf__BaseFaultType_FaultCause() { }
};
#endif

#ifndef SOAP_TYPE_wsrfbf__BaseFaultType
#define SOAP_TYPE_wsrfbf__BaseFaultType (714)
/* wsrfbf:BaseFaultType */
class SOAP_CMAC wsrfbf__BaseFaultType
{
public:
	std::vector<struct soap_dom_element >__any;
	time_t Timestamp;	/* required element of type xsd:dateTime */
	struct wsa5__EndpointReferenceType *Originator;	/* optional element of type wsa5:EndpointReferenceType */
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode;	/* optional element of type wsrfbf:BaseFaultType-ErrorCode */
	std::vector<_wsrfbf__BaseFaultType_Description >*Description;	/* optional element of type wsrfbf:BaseFaultType-Description */
	_wsrfbf__BaseFaultType_FaultCause *FaultCause;	/* optional element of type wsrfbf:BaseFaultType-FaultCause */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 714; } /* = unique type id SOAP_TYPE_wsrfbf__BaseFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsrfbf__BaseFaultType() { wsrfbf__BaseFaultType::soap_default(NULL); }
	virtual ~wsrfbf__BaseFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wstop__Documentation
#define SOAP_TYPE_wstop__Documentation (715)
/* wstop:Documentation */
class SOAP_CMAC wstop__Documentation
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_element __mixed;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 715; } /* = unique type id SOAP_TYPE_wstop__Documentation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__Documentation() { wstop__Documentation::soap_default(NULL); }
	virtual ~wstop__Documentation() { }
};
#endif

#ifndef SOAP_TYPE_wstop__ExtensibleDocumented
#define SOAP_TYPE_wstop__ExtensibleDocumented (716)
/* wstop:ExtensibleDocumented */
class SOAP_CMAC wstop__ExtensibleDocumented
{
public:
	wstop__Documentation *documentation;	/* optional element of type wstop:Documentation */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 716; } /* = unique type id SOAP_TYPE_wstop__ExtensibleDocumented */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__ExtensibleDocumented() { wstop__ExtensibleDocumented::soap_default(NULL); }
	virtual ~wstop__ExtensibleDocumented() { }
};
#endif

#ifndef SOAP_TYPE_wstop__QueryExpressionType
#define SOAP_TYPE_wstop__QueryExpressionType (717)
/* wstop:QueryExpressionType */
class SOAP_CMAC wstop__QueryExpressionType
{
public:
	struct soap_dom_element __any;	/* external */
	std::string Dialect;	/* required attribute */
	struct soap_dom_element __mixed;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 717; } /* = unique type id SOAP_TYPE_wstop__QueryExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__QueryExpressionType() { wstop__QueryExpressionType::soap_default(NULL); }
	virtual ~wstop__QueryExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_tmd__Capabilities
#define SOAP_TYPE_tmd__Capabilities (721)
/* tmd:Capabilities */
class SOAP_CMAC tmd__Capabilities
{
public:
	std::vector<struct soap_dom_element >__any;
	int VideoSources;	/* optional attribute */
	int VideoOutputs;	/* optional attribute */
	int AudioSources;	/* optional attribute */
	int AudioOutputs;	/* optional attribute */
	int RelayOutputs;	/* optional attribute */
	int SerialPorts;	/* optional attribute */
	int DigitalInputs;	/* optional attribute */
	bool DigitalInputOptions;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 721; } /* = unique type id SOAP_TYPE_tmd__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__Capabilities() { tmd__Capabilities::soap_default(NULL); }
	virtual ~tmd__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tmd__RelayOutputOptions
#define SOAP_TYPE_tmd__RelayOutputOptions (722)
/* tmd:RelayOutputOptions */
class SOAP_CMAC tmd__RelayOutputOptions
{
public:
	std::vector<enum tt__RelayMode >Mode;	/* required element of type tt:RelayMode */
	std::string *DelayTimes;	/* optional element of type tmd:DelayTimes */
	bool *Discrete;	/* optional element of type xsd:boolean */
	class tmd__RelayOutputOptionsExtension *Extension;	/* optional element of type tmd:RelayOutputOptionsExtension */
	std::string token;	/* required attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 722; } /* = unique type id SOAP_TYPE_tmd__RelayOutputOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__RelayOutputOptions() { tmd__RelayOutputOptions::soap_default(NULL); }
	virtual ~tmd__RelayOutputOptions() { }
};
#endif

#ifndef SOAP_TYPE_tmd__RelayOutputOptionsExtension
#define SOAP_TYPE_tmd__RelayOutputOptionsExtension (723)
/* tmd:RelayOutputOptionsExtension */
class SOAP_CMAC tmd__RelayOutputOptionsExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 723; } /* = unique type id SOAP_TYPE_tmd__RelayOutputOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__RelayOutputOptionsExtension() { tmd__RelayOutputOptionsExtension::soap_default(NULL); }
	virtual ~tmd__RelayOutputOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tmd__Get
#define SOAP_TYPE_tmd__Get (724)
/* tmd:Get */
class SOAP_CMAC tmd__Get
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 724; } /* = unique type id SOAP_TYPE_tmd__Get */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__Get() { tmd__Get::soap_default(NULL); }
	virtual ~tmd__Get() { }
};
#endif

#ifndef SOAP_TYPE_tmd__GetResponse
#define SOAP_TYPE_tmd__GetResponse (725)
/* tmd:GetResponse */
class SOAP_CMAC tmd__GetResponse
{
public:
	std::vector<std::string >Token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 725; } /* = unique type id SOAP_TYPE_tmd__GetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__GetResponse() { tmd__GetResponse::soap_default(NULL); }
	virtual ~tmd__GetResponse() { }
};
#endif

#ifndef SOAP_TYPE_tmd__DigitalInputConfigurationOptions
#define SOAP_TYPE_tmd__DigitalInputConfigurationOptions (726)
/* tmd:DigitalInputConfigurationOptions */
class SOAP_CMAC tmd__DigitalInputConfigurationOptions
{
public:
	std::vector<enum tt__DigitalIdleState >IdleState;	/* required element of type tt:DigitalIdleState */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 726; } /* = unique type id SOAP_TYPE_tmd__DigitalInputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__DigitalInputConfigurationOptions() { tmd__DigitalInputConfigurationOptions::soap_default(NULL); }
	virtual ~tmd__DigitalInputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__union_SerialData
#define SOAP_TYPE__tmd__union_SerialData (1830)
/* xsd:choice */
union _tmd__union_SerialData
{
#define SOAP_UNION__tmd__union_SerialData_Binary	(1)
	xsd__base64Binary *Binary;
#define SOAP_UNION__tmd__union_SerialData_String	(2)
	std::string *String;
};
#endif

#ifndef SOAP_TYPE_tmd__SerialData
#define SOAP_TYPE_tmd__SerialData (727)
/* tmd:SerialData */
class SOAP_CMAC tmd__SerialData
{
public:
	int __union_SerialData;	/* union discriminant (of union defined below) */
	union _tmd__union_SerialData union_SerialData;	/* required element of type xsd:choice */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 727; } /* = unique type id SOAP_TYPE_tmd__SerialData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__SerialData() { tmd__SerialData::soap_default(NULL); }
	virtual ~tmd__SerialData() { }
};
#endif

#ifndef SOAP_TYPE_tmd__SerialPortConfiguration
#define SOAP_TYPE_tmd__SerialPortConfiguration (729)
/* tmd:SerialPortConfiguration */
class SOAP_CMAC tmd__SerialPortConfiguration
{
public:
	int BaudRate;	/* required element of type xsd:int */
	enum tmd__ParityBit ParityBit;	/* required element of type tmd:ParityBit */
	int CharacterLength;	/* required element of type xsd:int */
	float StopBit;	/* required element of type xsd:float */
	std::vector<struct soap_dom_element >__any;
	std::string token;	/* required attribute */
	enum tmd__SerialPortType type;	/* required attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 729; } /* = unique type id SOAP_TYPE_tmd__SerialPortConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__SerialPortConfiguration() { tmd__SerialPortConfiguration::soap_default(NULL); }
	virtual ~tmd__SerialPortConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tmd__SerialPortConfigurationOptions
#define SOAP_TYPE_tmd__SerialPortConfigurationOptions (730)
/* tmd:SerialPortConfigurationOptions */
class SOAP_CMAC tmd__SerialPortConfigurationOptions
{
public:
	tt__IntItems *BaudRateList;	/* required element of type tt:IntItems */
	class tmd__ParityBitList *ParityBitList;	/* required element of type tmd:ParityBitList */
	tt__IntItems *CharacterLengthList;	/* required element of type tt:IntItems */
	tt__FloatItems *StopBitList;	/* required element of type tt:FloatItems */
	std::vector<struct soap_dom_element >__any;
	std::string token;	/* required attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 730; } /* = unique type id SOAP_TYPE_tmd__SerialPortConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__SerialPortConfigurationOptions() { tmd__SerialPortConfigurationOptions::soap_default(NULL); }
	virtual ~tmd__SerialPortConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tmd__ParityBitList
#define SOAP_TYPE_tmd__ParityBitList (731)
/* tmd:ParityBitList */
class SOAP_CMAC tmd__ParityBitList
{
public:
	std::vector<enum tmd__ParityBit >Items;	/* optional element of type tmd:ParityBit */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 731; } /* = unique type id SOAP_TYPE_tmd__ParityBitList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__ParityBitList() { tmd__ParityBitList::soap_default(NULL); }
	virtual ~tmd__ParityBitList() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetServiceCapabilities
#define SOAP_TYPE__tmd__GetServiceCapabilities (732)
/* tmd:GetServiceCapabilities */
class SOAP_CMAC _tmd__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 732; } /* = unique type id SOAP_TYPE__tmd__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetServiceCapabilities() { _tmd__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tmd__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tmd__GetServiceCapabilitiesResponse (733)
/* tmd:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tmd__GetServiceCapabilitiesResponse
{
public:
	tmd__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tmd:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 733; } /* = unique type id SOAP_TYPE__tmd__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetServiceCapabilitiesResponse() { _tmd__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tmd__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetRelayOutputOptions
#define SOAP_TYPE__tmd__GetRelayOutputOptions (734)
/* tmd:GetRelayOutputOptions */
class SOAP_CMAC _tmd__GetRelayOutputOptions
{
public:
	std::string *RelayOutputToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 734; } /* = unique type id SOAP_TYPE__tmd__GetRelayOutputOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetRelayOutputOptions() { _tmd__GetRelayOutputOptions::soap_default(NULL); }
	virtual ~_tmd__GetRelayOutputOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetRelayOutputOptionsResponse
#define SOAP_TYPE__tmd__GetRelayOutputOptionsResponse (735)
/* tmd:GetRelayOutputOptionsResponse */
class SOAP_CMAC _tmd__GetRelayOutputOptionsResponse
{
public:
	std::vector<tmd__RelayOutputOptions * >RelayOutputOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tmd:RelayOutputOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 735; } /* = unique type id SOAP_TYPE__tmd__GetRelayOutputOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetRelayOutputOptionsResponse() { _tmd__GetRelayOutputOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetRelayOutputOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputs
#define SOAP_TYPE__tmd__GetVideoOutputs (736)
/* tmd:GetVideoOutputs */
class SOAP_CMAC _tmd__GetVideoOutputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 736; } /* = unique type id SOAP_TYPE__tmd__GetVideoOutputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputs() { _tmd__GetVideoOutputs::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputs() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputsResponse
#define SOAP_TYPE__tmd__GetVideoOutputsResponse (737)
/* tmd:GetVideoOutputsResponse */
class SOAP_CMAC _tmd__GetVideoOutputsResponse
{
public:
	std::vector<class tt__VideoOutput * >VideoOutputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 737; } /* = unique type id SOAP_TYPE__tmd__GetVideoOutputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputsResponse() { _tmd__GetVideoOutputsResponse::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioSourceConfiguration
#define SOAP_TYPE__tmd__GetAudioSourceConfiguration (738)
/* tmd:GetAudioSourceConfiguration */
class SOAP_CMAC _tmd__GetAudioSourceConfiguration
{
public:
	std::string AudioSourceToken;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 738; } /* = unique type id SOAP_TYPE__tmd__GetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioSourceConfiguration() { _tmd__GetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_tmd__GetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioSourceConfigurationResponse
#define SOAP_TYPE__tmd__GetAudioSourceConfigurationResponse (739)
/* tmd:GetAudioSourceConfigurationResponse */
class SOAP_CMAC _tmd__GetAudioSourceConfigurationResponse
{
public:
	tt__AudioSourceConfiguration *AudioSourceConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioSourceConfiguration */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 739; } /* = unique type id SOAP_TYPE__tmd__GetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioSourceConfigurationResponse() { _tmd__GetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__GetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioOutputConfiguration
#define SOAP_TYPE__tmd__GetAudioOutputConfiguration (740)
/* tmd:GetAudioOutputConfiguration */
class SOAP_CMAC _tmd__GetAudioOutputConfiguration
{
public:
	std::string AudioOutputToken;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 740; } /* = unique type id SOAP_TYPE__tmd__GetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioOutputConfiguration() { _tmd__GetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_tmd__GetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioOutputConfigurationResponse
#define SOAP_TYPE__tmd__GetAudioOutputConfigurationResponse (741)
/* tmd:GetAudioOutputConfigurationResponse */
class SOAP_CMAC _tmd__GetAudioOutputConfigurationResponse
{
public:
	tt__AudioOutputConfiguration *AudioOutputConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioOutputConfiguration */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 741; } /* = unique type id SOAP_TYPE__tmd__GetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioOutputConfigurationResponse() { _tmd__GetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__GetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoSourceConfiguration
#define SOAP_TYPE__tmd__GetVideoSourceConfiguration (742)
/* tmd:GetVideoSourceConfiguration */
class SOAP_CMAC _tmd__GetVideoSourceConfiguration
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 742; } /* = unique type id SOAP_TYPE__tmd__GetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoSourceConfiguration() { _tmd__GetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_tmd__GetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoSourceConfigurationResponse
#define SOAP_TYPE__tmd__GetVideoSourceConfigurationResponse (743)
/* tmd:GetVideoSourceConfigurationResponse */
class SOAP_CMAC _tmd__GetVideoSourceConfigurationResponse
{
public:
	tt__VideoSourceConfiguration *VideoSourceConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoSourceConfiguration */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 743; } /* = unique type id SOAP_TYPE__tmd__GetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoSourceConfigurationResponse() { _tmd__GetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__GetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputConfiguration
#define SOAP_TYPE__tmd__GetVideoOutputConfiguration (744)
/* tmd:GetVideoOutputConfiguration */
class SOAP_CMAC _tmd__GetVideoOutputConfiguration
{
public:
	std::string VideoOutputToken;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 744; } /* = unique type id SOAP_TYPE__tmd__GetVideoOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputConfiguration() { _tmd__GetVideoOutputConfiguration::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputConfigurationResponse
#define SOAP_TYPE__tmd__GetVideoOutputConfigurationResponse (745)
/* tmd:GetVideoOutputConfigurationResponse */
class SOAP_CMAC _tmd__GetVideoOutputConfigurationResponse
{
public:
	class tt__VideoOutputConfiguration *VideoOutputConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoOutputConfiguration */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 745; } /* = unique type id SOAP_TYPE__tmd__GetVideoOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputConfigurationResponse() { _tmd__GetVideoOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetAudioSourceConfiguration
#define SOAP_TYPE__tmd__SetAudioSourceConfiguration (746)
/* tmd:SetAudioSourceConfiguration */
class SOAP_CMAC _tmd__SetAudioSourceConfiguration
{
public:
	tt__AudioSourceConfiguration *Configuration;	/* required element of type tt:AudioSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 746; } /* = unique type id SOAP_TYPE__tmd__SetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetAudioSourceConfiguration() { _tmd__SetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_tmd__SetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetAudioSourceConfigurationResponse
#define SOAP_TYPE__tmd__SetAudioSourceConfigurationResponse (747)
/* tmd:SetAudioSourceConfigurationResponse */
class SOAP_CMAC _tmd__SetAudioSourceConfigurationResponse
{
public:
	std::vector<struct soap_dom_element >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 747; } /* = unique type id SOAP_TYPE__tmd__SetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetAudioSourceConfigurationResponse() { _tmd__SetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__SetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetAudioOutputConfiguration
#define SOAP_TYPE__tmd__SetAudioOutputConfiguration (748)
/* tmd:SetAudioOutputConfiguration */
class SOAP_CMAC _tmd__SetAudioOutputConfiguration
{
public:
	tt__AudioOutputConfiguration *Configuration;	/* required element of type tt:AudioOutputConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 748; } /* = unique type id SOAP_TYPE__tmd__SetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetAudioOutputConfiguration() { _tmd__SetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_tmd__SetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetAudioOutputConfigurationResponse
#define SOAP_TYPE__tmd__SetAudioOutputConfigurationResponse (749)
/* tmd:SetAudioOutputConfigurationResponse */
class SOAP_CMAC _tmd__SetAudioOutputConfigurationResponse
{
public:
	std::vector<struct soap_dom_element >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 749; } /* = unique type id SOAP_TYPE__tmd__SetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetAudioOutputConfigurationResponse() { _tmd__SetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__SetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetVideoSourceConfiguration
#define SOAP_TYPE__tmd__SetVideoSourceConfiguration (750)
/* tmd:SetVideoSourceConfiguration */
class SOAP_CMAC _tmd__SetVideoSourceConfiguration
{
public:
	tt__VideoSourceConfiguration *Configuration;	/* required element of type tt:VideoSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 750; } /* = unique type id SOAP_TYPE__tmd__SetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetVideoSourceConfiguration() { _tmd__SetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_tmd__SetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetVideoSourceConfigurationResponse
#define SOAP_TYPE__tmd__SetVideoSourceConfigurationResponse (751)
/* tmd:SetVideoSourceConfigurationResponse */
class SOAP_CMAC _tmd__SetVideoSourceConfigurationResponse
{
public:
	std::vector<struct soap_dom_element >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 751; } /* = unique type id SOAP_TYPE__tmd__SetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetVideoSourceConfigurationResponse() { _tmd__SetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__SetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetVideoOutputConfiguration
#define SOAP_TYPE__tmd__SetVideoOutputConfiguration (752)
/* tmd:SetVideoOutputConfiguration */
class SOAP_CMAC _tmd__SetVideoOutputConfiguration
{
public:
	tt__VideoOutputConfiguration *Configuration;	/* required element of type tt:VideoOutputConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 752; } /* = unique type id SOAP_TYPE__tmd__SetVideoOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetVideoOutputConfiguration() { _tmd__SetVideoOutputConfiguration::soap_default(NULL); }
	virtual ~_tmd__SetVideoOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetVideoOutputConfigurationResponse
#define SOAP_TYPE__tmd__SetVideoOutputConfigurationResponse (753)
/* tmd:SetVideoOutputConfigurationResponse */
class SOAP_CMAC _tmd__SetVideoOutputConfigurationResponse
{
public:
	std::vector<struct soap_dom_element >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 753; } /* = unique type id SOAP_TYPE__tmd__SetVideoOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetVideoOutputConfigurationResponse() { _tmd__SetVideoOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__SetVideoOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoSourceConfigurationOptions
#define SOAP_TYPE__tmd__GetVideoSourceConfigurationOptions (754)
/* tmd:GetVideoSourceConfigurationOptions */
class SOAP_CMAC _tmd__GetVideoSourceConfigurationOptions
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 754; } /* = unique type id SOAP_TYPE__tmd__GetVideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoSourceConfigurationOptions() { _tmd__GetVideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetVideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetVideoSourceConfigurationOptionsResponse (755)
/* tmd:GetVideoSourceConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetVideoSourceConfigurationOptionsResponse
{
public:
	tt__VideoSourceConfigurationOptions *VideoSourceConfigurationOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoSourceConfigurationOptions */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 755; } /* = unique type id SOAP_TYPE__tmd__GetVideoSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoSourceConfigurationOptionsResponse() { _tmd__GetVideoSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetVideoSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputConfigurationOptions
#define SOAP_TYPE__tmd__GetVideoOutputConfigurationOptions (756)
/* tmd:GetVideoOutputConfigurationOptions */
class SOAP_CMAC _tmd__GetVideoOutputConfigurationOptions
{
public:
	std::string VideoOutputToken;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 756; } /* = unique type id SOAP_TYPE__tmd__GetVideoOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputConfigurationOptions() { _tmd__GetVideoOutputConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetVideoOutputConfigurationOptionsResponse (757)
/* tmd:GetVideoOutputConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetVideoOutputConfigurationOptionsResponse
{
public:
	tt__VideoOutputConfigurationOptions *VideoOutputConfigurationOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoOutputConfigurationOptions */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 757; } /* = unique type id SOAP_TYPE__tmd__GetVideoOutputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputConfigurationOptionsResponse() { _tmd__GetVideoOutputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioSourceConfigurationOptions
#define SOAP_TYPE__tmd__GetAudioSourceConfigurationOptions (758)
/* tmd:GetAudioSourceConfigurationOptions */
class SOAP_CMAC _tmd__GetAudioSourceConfigurationOptions
{
public:
	std::string AudioSourceToken;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 758; } /* = unique type id SOAP_TYPE__tmd__GetAudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioSourceConfigurationOptions() { _tmd__GetAudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetAudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetAudioSourceConfigurationOptionsResponse (759)
/* tmd:GetAudioSourceConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetAudioSourceConfigurationOptionsResponse
{
public:
	tt__AudioSourceConfigurationOptions *AudioSourceOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioSourceConfigurationOptions */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 759; } /* = unique type id SOAP_TYPE__tmd__GetAudioSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioSourceConfigurationOptionsResponse() { _tmd__GetAudioSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetAudioSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioOutputConfigurationOptions
#define SOAP_TYPE__tmd__GetAudioOutputConfigurationOptions (760)
/* tmd:GetAudioOutputConfigurationOptions */
class SOAP_CMAC _tmd__GetAudioOutputConfigurationOptions
{
public:
	std::string AudioOutputToken;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 760; } /* = unique type id SOAP_TYPE__tmd__GetAudioOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioOutputConfigurationOptions() { _tmd__GetAudioOutputConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetAudioOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetAudioOutputConfigurationOptionsResponse (761)
/* tmd:GetAudioOutputConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetAudioOutputConfigurationOptionsResponse
{
public:
	tt__AudioOutputConfigurationOptions *AudioOutputOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioOutputConfigurationOptions */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 761; } /* = unique type id SOAP_TYPE__tmd__GetAudioOutputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioOutputConfigurationOptionsResponse() { _tmd__GetAudioOutputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetAudioOutputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetRelayOutputSettings
#define SOAP_TYPE__tmd__SetRelayOutputSettings (762)
/* tmd:SetRelayOutputSettings */
class SOAP_CMAC _tmd__SetRelayOutputSettings
{
public:
	class tt__RelayOutput *RelayOutput;	/* required element of type tt:RelayOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 762; } /* = unique type id SOAP_TYPE__tmd__SetRelayOutputSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetRelayOutputSettings() { _tmd__SetRelayOutputSettings::soap_default(NULL); }
	virtual ~_tmd__SetRelayOutputSettings() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetRelayOutputSettingsResponse
#define SOAP_TYPE__tmd__SetRelayOutputSettingsResponse (763)
/* tmd:SetRelayOutputSettingsResponse */
class SOAP_CMAC _tmd__SetRelayOutputSettingsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 763; } /* = unique type id SOAP_TYPE__tmd__SetRelayOutputSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetRelayOutputSettingsResponse() { _tmd__SetRelayOutputSettingsResponse::soap_default(NULL); }
	virtual ~_tmd__SetRelayOutputSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetDigitalInputs
#define SOAP_TYPE__tmd__GetDigitalInputs (764)
/* tmd:GetDigitalInputs */
class SOAP_CMAC _tmd__GetDigitalInputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 764; } /* = unique type id SOAP_TYPE__tmd__GetDigitalInputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetDigitalInputs() { _tmd__GetDigitalInputs::soap_default(NULL); }
	virtual ~_tmd__GetDigitalInputs() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetDigitalInputsResponse
#define SOAP_TYPE__tmd__GetDigitalInputsResponse (765)
/* tmd:GetDigitalInputsResponse */
class SOAP_CMAC _tmd__GetDigitalInputsResponse
{
public:
	std::vector<class tt__DigitalInput * >DigitalInputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:DigitalInput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 765; } /* = unique type id SOAP_TYPE__tmd__GetDigitalInputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetDigitalInputsResponse() { _tmd__GetDigitalInputsResponse::soap_default(NULL); }
	virtual ~_tmd__GetDigitalInputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetDigitalInputConfigurationOptions
#define SOAP_TYPE__tmd__GetDigitalInputConfigurationOptions (766)
/* tmd:GetDigitalInputConfigurationOptions */
class SOAP_CMAC _tmd__GetDigitalInputConfigurationOptions
{
public:
	std::string *Token;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 766; } /* = unique type id SOAP_TYPE__tmd__GetDigitalInputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetDigitalInputConfigurationOptions() { _tmd__GetDigitalInputConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetDigitalInputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetDigitalInputConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetDigitalInputConfigurationOptionsResponse (767)
/* tmd:GetDigitalInputConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetDigitalInputConfigurationOptionsResponse
{
public:
	tmd__DigitalInputConfigurationOptions *DigitalInputOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tmd:DigitalInputConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 767; } /* = unique type id SOAP_TYPE__tmd__GetDigitalInputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetDigitalInputConfigurationOptionsResponse() { _tmd__GetDigitalInputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetDigitalInputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetDigitalInputConfigurations
#define SOAP_TYPE__tmd__SetDigitalInputConfigurations (768)
/* tmd:SetDigitalInputConfigurations */
class SOAP_CMAC _tmd__SetDigitalInputConfigurations
{
public:
	std::vector<tt__DigitalInput * >DigitalInputs;	/* required element of type tt:DigitalInput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 768; } /* = unique type id SOAP_TYPE__tmd__SetDigitalInputConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetDigitalInputConfigurations() { _tmd__SetDigitalInputConfigurations::soap_default(NULL); }
	virtual ~_tmd__SetDigitalInputConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetDigitalInputConfigurationsResponse
#define SOAP_TYPE__tmd__SetDigitalInputConfigurationsResponse (769)
/* tmd:SetDigitalInputConfigurationsResponse */
class SOAP_CMAC _tmd__SetDigitalInputConfigurationsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 769; } /* = unique type id SOAP_TYPE__tmd__SetDigitalInputConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetDigitalInputConfigurationsResponse() { _tmd__SetDigitalInputConfigurationsResponse::soap_default(NULL); }
	virtual ~_tmd__SetDigitalInputConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPorts
#define SOAP_TYPE__tmd__GetSerialPorts (770)
/* tmd:GetSerialPorts */
class SOAP_CMAC _tmd__GetSerialPorts
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 770; } /* = unique type id SOAP_TYPE__tmd__GetSerialPorts */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPorts() { _tmd__GetSerialPorts::soap_default(NULL); }
	virtual ~_tmd__GetSerialPorts() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPortsResponse
#define SOAP_TYPE__tmd__GetSerialPortsResponse (771)
/* tmd:GetSerialPortsResponse */
class SOAP_CMAC _tmd__GetSerialPortsResponse
{
public:
	std::vector<class tmd__SerialPort * >SerialPort;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tmd:SerialPort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 771; } /* = unique type id SOAP_TYPE__tmd__GetSerialPortsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPortsResponse() { _tmd__GetSerialPortsResponse::soap_default(NULL); }
	virtual ~_tmd__GetSerialPortsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPortConfiguration
#define SOAP_TYPE__tmd__GetSerialPortConfiguration (772)
/* tmd:GetSerialPortConfiguration */
class SOAP_CMAC _tmd__GetSerialPortConfiguration
{
public:
	std::string SerialPortToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 772; } /* = unique type id SOAP_TYPE__tmd__GetSerialPortConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPortConfiguration() { _tmd__GetSerialPortConfiguration::soap_default(NULL); }
	virtual ~_tmd__GetSerialPortConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPortConfigurationResponse
#define SOAP_TYPE__tmd__GetSerialPortConfigurationResponse (773)
/* tmd:GetSerialPortConfigurationResponse */
class SOAP_CMAC _tmd__GetSerialPortConfigurationResponse
{
public:
	tmd__SerialPortConfiguration *SerialPortConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tmd:SerialPortConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 773; } /* = unique type id SOAP_TYPE__tmd__GetSerialPortConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPortConfigurationResponse() { _tmd__GetSerialPortConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__GetSerialPortConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetSerialPortConfiguration
#define SOAP_TYPE__tmd__SetSerialPortConfiguration (774)
/* tmd:SetSerialPortConfiguration */
class SOAP_CMAC _tmd__SetSerialPortConfiguration
{
public:
	tmd__SerialPortConfiguration *SerialPortConfiguration;	/* required element of type tmd:SerialPortConfiguration */
	bool ForcePersistance;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 774; } /* = unique type id SOAP_TYPE__tmd__SetSerialPortConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetSerialPortConfiguration() { _tmd__SetSerialPortConfiguration::soap_default(NULL); }
	virtual ~_tmd__SetSerialPortConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetSerialPortConfigurationResponse
#define SOAP_TYPE__tmd__SetSerialPortConfigurationResponse (775)
/* tmd:SetSerialPortConfigurationResponse */
class SOAP_CMAC _tmd__SetSerialPortConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 775; } /* = unique type id SOAP_TYPE__tmd__SetSerialPortConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetSerialPortConfigurationResponse() { _tmd__SetSerialPortConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__SetSerialPortConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPortConfigurationOptions
#define SOAP_TYPE__tmd__GetSerialPortConfigurationOptions (776)
/* tmd:GetSerialPortConfigurationOptions */
class SOAP_CMAC _tmd__GetSerialPortConfigurationOptions
{
public:
	std::string SerialPortToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 776; } /* = unique type id SOAP_TYPE__tmd__GetSerialPortConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPortConfigurationOptions() { _tmd__GetSerialPortConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetSerialPortConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPortConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetSerialPortConfigurationOptionsResponse (777)
/* tmd:GetSerialPortConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetSerialPortConfigurationOptionsResponse
{
public:
	tmd__SerialPortConfigurationOptions *SerialPortOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tmd:SerialPortConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 777; } /* = unique type id SOAP_TYPE__tmd__GetSerialPortConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPortConfigurationOptionsResponse() { _tmd__GetSerialPortConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetSerialPortConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SendReceiveSerialCommand
#define SOAP_TYPE__tmd__SendReceiveSerialCommand (778)
/* tmd:SendReceiveSerialCommand */
class SOAP_CMAC _tmd__SendReceiveSerialCommand
{
public:
	std::string *Token;	/* optional element of type tt:ReferenceToken */
	tmd__SerialData *SerialData;	/* optional element of type tmd:SerialData */
	LONG64 *TimeOut;	/* optional element of type xsd:duration */
	std::string *DataLength;	/* optional element of type xsd:integer */
	std::string *Delimiter;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 778; } /* = unique type id SOAP_TYPE__tmd__SendReceiveSerialCommand */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SendReceiveSerialCommand() { _tmd__SendReceiveSerialCommand::soap_default(NULL); }
	virtual ~_tmd__SendReceiveSerialCommand() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SendReceiveSerialCommandResponse
#define SOAP_TYPE__tmd__SendReceiveSerialCommandResponse (779)
/* tmd:SendReceiveSerialCommandResponse */
class SOAP_CMAC _tmd__SendReceiveSerialCommandResponse
{
public:
	tmd__SerialData *SerialData;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tmd:SerialData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 779; } /* = unique type id SOAP_TYPE__tmd__SendReceiveSerialCommandResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SendReceiveSerialCommandResponse() { _tmd__SendReceiveSerialCommandResponse::soap_default(NULL); }
	virtual ~_tmd__SendReceiveSerialCommandResponse() { }
};
#endif

#ifndef SOAP_TYPE_tev__Capabilities
#define SOAP_TYPE_tev__Capabilities (780)
/* tev:Capabilities */
class SOAP_CMAC tev__Capabilities
{
public:
	std::vector<struct soap_dom_element >__any;
	bool *WSSubscriptionPolicySupport;	/* optional attribute */
	bool *WSPullPointSupport;	/* optional attribute */
	bool *WSPausableSubscriptionManagerInterfaceSupport;	/* optional attribute */
	int *MaxNotificationProducers;	/* optional attribute */
	int *MaxPullPoints;	/* optional attribute */
	bool *PersistentNotificationStorage;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 780; } /* = unique type id SOAP_TYPE_tev__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tev__Capabilities() { tev__Capabilities::soap_default(NULL); }
	virtual ~tev__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__tev__GetServiceCapabilities
#define SOAP_TYPE__tev__GetServiceCapabilities (781)
/* tev:GetServiceCapabilities */
class SOAP_CMAC _tev__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 781; } /* = unique type id SOAP_TYPE__tev__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__GetServiceCapabilities() { _tev__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tev__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tev__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tev__GetServiceCapabilitiesResponse (782)
/* tev:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tev__GetServiceCapabilitiesResponse
{
public:
	tev__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tev:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 782; } /* = unique type id SOAP_TYPE__tev__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__GetServiceCapabilitiesResponse() { _tev__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tev__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy
#define SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy (1854)
/* tev:CreatePullPointSubscription-SubscriptionPolicy */
class SOAP_CMAC _tev__CreatePullPointSubscription_SubscriptionPolicy
{
public:
	std::vector<struct soap_dom_element >__any;
public:
	virtual int soap_type() const { return 1854; } /* = unique type id SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__CreatePullPointSubscription_SubscriptionPolicy() { _tev__CreatePullPointSubscription_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_tev__CreatePullPointSubscription_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE__tev__CreatePullPointSubscription
#define SOAP_TYPE__tev__CreatePullPointSubscription (783)
/* tev:CreatePullPointSubscription */
class SOAP_CMAC _tev__CreatePullPointSubscription
{
public:
	wsnt__FilterType *Filter;	/* optional element of type wsnt:FilterType */
	std::string *InitialTerminationTime;	/* optional element of type wsnt:AbsoluteOrRelativeTimeType */
	_tev__CreatePullPointSubscription_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type tev:CreatePullPointSubscription-SubscriptionPolicy */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 783; } /* = unique type id SOAP_TYPE__tev__CreatePullPointSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__CreatePullPointSubscription() { _tev__CreatePullPointSubscription::soap_default(NULL); }
	virtual ~_tev__CreatePullPointSubscription() { }
};
#endif

#ifndef SOAP_TYPE__tev__CreatePullPointSubscriptionResponse
#define SOAP_TYPE__tev__CreatePullPointSubscriptionResponse (784)
/* tev:CreatePullPointSubscriptionResponse */
class SOAP_CMAC _tev__CreatePullPointSubscriptionResponse
{
public:
	struct wsa5__EndpointReferenceType SubscriptionReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type wsa5:EndpointReferenceType */
	time_t wsnt__CurrentTime;	/* required element of type xsd:dateTime */
	time_t wsnt__TerminationTime;	/* required element of type xsd:dateTime */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 784; } /* = unique type id SOAP_TYPE__tev__CreatePullPointSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__CreatePullPointSubscriptionResponse() { _tev__CreatePullPointSubscriptionResponse::soap_default(NULL); }
	virtual ~_tev__CreatePullPointSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__PullMessages
#define SOAP_TYPE__tev__PullMessages (785)
/* tev:PullMessages */
class SOAP_CMAC _tev__PullMessages
{
public:
	LONG64 Timeout;	/* external */
	int MessageLimit;	/* required element of type xsd:int */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 785; } /* = unique type id SOAP_TYPE__tev__PullMessages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__PullMessages() { _tev__PullMessages::soap_default(NULL); }
	virtual ~_tev__PullMessages() { }
};
#endif

#ifndef SOAP_TYPE__tev__PullMessagesResponse
#define SOAP_TYPE__tev__PullMessagesResponse (786)
/* tev:PullMessagesResponse */
class SOAP_CMAC _tev__PullMessagesResponse
{
public:
	time_t CurrentTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
	time_t TerminationTime;	/* required element of type xsd:dateTime */
	std::vector<wsnt__NotificationMessageHolderType * >wsnt__NotificationMessage;	/* optional element of type wsnt:NotificationMessageHolderType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 786; } /* = unique type id SOAP_TYPE__tev__PullMessagesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__PullMessagesResponse() { _tev__PullMessagesResponse::soap_default(NULL); }
	virtual ~_tev__PullMessagesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__PullMessagesFaultResponse
#define SOAP_TYPE__tev__PullMessagesFaultResponse (787)
/* tev:PullMessagesFaultResponse */
class SOAP_CMAC _tev__PullMessagesFaultResponse
{
public:
	LONG64 MaxTimeout;	/* external */
	int MaxMessageLimit;	/* required element of type xsd:int */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 787; } /* = unique type id SOAP_TYPE__tev__PullMessagesFaultResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__PullMessagesFaultResponse() { _tev__PullMessagesFaultResponse::soap_default(NULL); }
	virtual ~_tev__PullMessagesFaultResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__Seek
#define SOAP_TYPE__tev__Seek (788)
/* tev:Seek */
class SOAP_CMAC _tev__Seek
{
public:
	time_t UtcTime;	/* required element of type xsd:dateTime */
	bool *Reverse;	/* optional element of type xsd:boolean */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 788; } /* = unique type id SOAP_TYPE__tev__Seek */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__Seek() { _tev__Seek::soap_default(NULL); }
	virtual ~_tev__Seek() { }
};
#endif

#ifndef SOAP_TYPE__tev__SeekResponse
#define SOAP_TYPE__tev__SeekResponse (789)
/* tev:SeekResponse */
class SOAP_CMAC _tev__SeekResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 789; } /* = unique type id SOAP_TYPE__tev__SeekResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__SeekResponse() { _tev__SeekResponse::soap_default(NULL); }
	virtual ~_tev__SeekResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__SetSynchronizationPoint
#define SOAP_TYPE__tev__SetSynchronizationPoint (790)
/* tev:SetSynchronizationPoint */
class SOAP_CMAC _tev__SetSynchronizationPoint
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 790; } /* = unique type id SOAP_TYPE__tev__SetSynchronizationPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__SetSynchronizationPoint() { _tev__SetSynchronizationPoint::soap_default(NULL); }
	virtual ~_tev__SetSynchronizationPoint() { }
};
#endif

#ifndef SOAP_TYPE__tev__SetSynchronizationPointResponse
#define SOAP_TYPE__tev__SetSynchronizationPointResponse (791)
/* tev:SetSynchronizationPointResponse */
class SOAP_CMAC _tev__SetSynchronizationPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 791; } /* = unique type id SOAP_TYPE__tev__SetSynchronizationPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__SetSynchronizationPointResponse() { _tev__SetSynchronizationPointResponse::soap_default(NULL); }
	virtual ~_tev__SetSynchronizationPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__GetEventProperties
#define SOAP_TYPE__tev__GetEventProperties (792)
/* tev:GetEventProperties */
class SOAP_CMAC _tev__GetEventProperties
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 792; } /* = unique type id SOAP_TYPE__tev__GetEventProperties */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__GetEventProperties() { _tev__GetEventProperties::soap_default(NULL); }
	virtual ~_tev__GetEventProperties() { }
};
#endif

#ifndef SOAP_TYPE__tev__GetEventPropertiesResponse
#define SOAP_TYPE__tev__GetEventPropertiesResponse (793)
/* tev:GetEventPropertiesResponse */
class SOAP_CMAC _tev__GetEventPropertiesResponse
{
public:
	std::vector<std::string >TopicNamespaceLocation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	bool wsnt__FixedTopicSet;	/* required element of type xsd:boolean */
	wstop__TopicSetType *wstop__TopicSet;	/* required element of type wstop:TopicSetType */
	std::vector<std::string >wsnt__TopicExpressionDialect;	/* required element of type xsd:anyURI */
	std::vector<std::string >MessageContentFilterDialect;	/* required element of type xsd:anyURI */
	std::vector<std::string >ProducerPropertiesFilterDialect;	/* optional element of type xsd:anyURI */
	std::vector<std::string >MessageContentSchemaLocation;	/* required element of type xsd:anyURI */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 793; } /* = unique type id SOAP_TYPE__tev__GetEventPropertiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__GetEventPropertiesResponse() { _tev__GetEventPropertiesResponse::soap_default(NULL); }
	virtual ~_tev__GetEventPropertiesResponse() { }
};
#endif

#ifndef SOAP_TYPE_trv__Capabilities
#define SOAP_TYPE_trv__Capabilities (796)
/* trv:Capabilities */
class SOAP_CMAC trv__Capabilities
{
public:
	std::vector<struct soap_dom_element >__any;
	bool *RTP_USCOREMulticast;	/* optional attribute */
	bool *RTP_USCORETCP;	/* optional attribute */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional attribute */
	int SupportedReceivers;	/* required attribute */
	int *MaximumRTSPURILength;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 796; } /* = unique type id SOAP_TYPE_trv__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trv__Capabilities() { trv__Capabilities::soap_default(NULL); }
	virtual ~trv__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetServiceCapabilities
#define SOAP_TYPE__trv__GetServiceCapabilities (797)
/* trv:GetServiceCapabilities */
class SOAP_CMAC _trv__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 797; } /* = unique type id SOAP_TYPE__trv__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetServiceCapabilities() { _trv__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_trv__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetServiceCapabilitiesResponse
#define SOAP_TYPE__trv__GetServiceCapabilitiesResponse (798)
/* trv:GetServiceCapabilitiesResponse */
class SOAP_CMAC _trv__GetServiceCapabilitiesResponse
{
public:
	trv__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type trv:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 798; } /* = unique type id SOAP_TYPE__trv__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetServiceCapabilitiesResponse() { _trv__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_trv__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceivers
#define SOAP_TYPE__trv__GetReceivers (799)
/* trv:GetReceivers */
class SOAP_CMAC _trv__GetReceivers
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 799; } /* = unique type id SOAP_TYPE__trv__GetReceivers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceivers() { _trv__GetReceivers::soap_default(NULL); }
	virtual ~_trv__GetReceivers() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceiversResponse
#define SOAP_TYPE__trv__GetReceiversResponse (800)
/* trv:GetReceiversResponse */
class SOAP_CMAC _trv__GetReceiversResponse
{
public:
	std::vector<tt__Receiver * >Receivers;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Receiver */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 800; } /* = unique type id SOAP_TYPE__trv__GetReceiversResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceiversResponse() { _trv__GetReceiversResponse::soap_default(NULL); }
	virtual ~_trv__GetReceiversResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceiver
#define SOAP_TYPE__trv__GetReceiver (801)
/* trv:GetReceiver */
class SOAP_CMAC _trv__GetReceiver
{
public:
	std::string ReceiverToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 801; } /* = unique type id SOAP_TYPE__trv__GetReceiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceiver() { _trv__GetReceiver::soap_default(NULL); }
	virtual ~_trv__GetReceiver() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceiverResponse
#define SOAP_TYPE__trv__GetReceiverResponse (802)
/* trv:GetReceiverResponse */
class SOAP_CMAC _trv__GetReceiverResponse
{
public:
	tt__Receiver *Receiver;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Receiver */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 802; } /* = unique type id SOAP_TYPE__trv__GetReceiverResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceiverResponse() { _trv__GetReceiverResponse::soap_default(NULL); }
	virtual ~_trv__GetReceiverResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__CreateReceiver
#define SOAP_TYPE__trv__CreateReceiver (803)
/* trv:CreateReceiver */
class SOAP_CMAC _trv__CreateReceiver
{
public:
	tt__ReceiverConfiguration *Configuration;	/* required element of type tt:ReceiverConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 803; } /* = unique type id SOAP_TYPE__trv__CreateReceiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__CreateReceiver() { _trv__CreateReceiver::soap_default(NULL); }
	virtual ~_trv__CreateReceiver() { }
};
#endif

#ifndef SOAP_TYPE__trv__CreateReceiverResponse
#define SOAP_TYPE__trv__CreateReceiverResponse (804)
/* trv:CreateReceiverResponse */
class SOAP_CMAC _trv__CreateReceiverResponse
{
public:
	tt__Receiver *Receiver;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Receiver */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 804; } /* = unique type id SOAP_TYPE__trv__CreateReceiverResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__CreateReceiverResponse() { _trv__CreateReceiverResponse::soap_default(NULL); }
	virtual ~_trv__CreateReceiverResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__DeleteReceiver
#define SOAP_TYPE__trv__DeleteReceiver (805)
/* trv:DeleteReceiver */
class SOAP_CMAC _trv__DeleteReceiver
{
public:
	std::string ReceiverToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 805; } /* = unique type id SOAP_TYPE__trv__DeleteReceiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__DeleteReceiver() { _trv__DeleteReceiver::soap_default(NULL); }
	virtual ~_trv__DeleteReceiver() { }
};
#endif

#ifndef SOAP_TYPE__trv__DeleteReceiverResponse
#define SOAP_TYPE__trv__DeleteReceiverResponse (806)
/* trv:DeleteReceiverResponse */
class SOAP_CMAC _trv__DeleteReceiverResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 806; } /* = unique type id SOAP_TYPE__trv__DeleteReceiverResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__DeleteReceiverResponse() { _trv__DeleteReceiverResponse::soap_default(NULL); }
	virtual ~_trv__DeleteReceiverResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__ConfigureReceiver
#define SOAP_TYPE__trv__ConfigureReceiver (807)
/* trv:ConfigureReceiver */
class SOAP_CMAC _trv__ConfigureReceiver
{
public:
	std::string ReceiverToken;	/* required element of type tt:ReferenceToken */
	tt__ReceiverConfiguration *Configuration;	/* required element of type tt:ReceiverConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 807; } /* = unique type id SOAP_TYPE__trv__ConfigureReceiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__ConfigureReceiver() { _trv__ConfigureReceiver::soap_default(NULL); }
	virtual ~_trv__ConfigureReceiver() { }
};
#endif

#ifndef SOAP_TYPE__trv__ConfigureReceiverResponse
#define SOAP_TYPE__trv__ConfigureReceiverResponse (808)
/* trv:ConfigureReceiverResponse */
class SOAP_CMAC _trv__ConfigureReceiverResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 808; } /* = unique type id SOAP_TYPE__trv__ConfigureReceiverResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__ConfigureReceiverResponse() { _trv__ConfigureReceiverResponse::soap_default(NULL); }
	virtual ~_trv__ConfigureReceiverResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__SetReceiverMode
#define SOAP_TYPE__trv__SetReceiverMode (809)
/* trv:SetReceiverMode */
class SOAP_CMAC _trv__SetReceiverMode
{
public:
	std::string ReceiverToken;	/* required element of type tt:ReferenceToken */
	enum tt__ReceiverMode Mode;	/* required element of type tt:ReceiverMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 809; } /* = unique type id SOAP_TYPE__trv__SetReceiverMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__SetReceiverMode() { _trv__SetReceiverMode::soap_default(NULL); }
	virtual ~_trv__SetReceiverMode() { }
};
#endif

#ifndef SOAP_TYPE__trv__SetReceiverModeResponse
#define SOAP_TYPE__trv__SetReceiverModeResponse (810)
/* trv:SetReceiverModeResponse */
class SOAP_CMAC _trv__SetReceiverModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 810; } /* = unique type id SOAP_TYPE__trv__SetReceiverModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__SetReceiverModeResponse() { _trv__SetReceiverModeResponse::soap_default(NULL); }
	virtual ~_trv__SetReceiverModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceiverState
#define SOAP_TYPE__trv__GetReceiverState (811)
/* trv:GetReceiverState */
class SOAP_CMAC _trv__GetReceiverState
{
public:
	std::string ReceiverToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 811; } /* = unique type id SOAP_TYPE__trv__GetReceiverState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceiverState() { _trv__GetReceiverState::soap_default(NULL); }
	virtual ~_trv__GetReceiverState() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceiverStateResponse
#define SOAP_TYPE__trv__GetReceiverStateResponse (812)
/* trv:GetReceiverStateResponse */
class SOAP_CMAC _trv__GetReceiverStateResponse
{
public:
	tt__ReceiverStateInformation *ReceiverState;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReceiverStateInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 812; } /* = unique type id SOAP_TYPE__trv__GetReceiverStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceiverStateResponse() { _trv__GetReceiverStateResponse::soap_default(NULL); }
	virtual ~_trv__GetReceiverStateResponse() { }
};
#endif

#ifndef SOAP_TYPE_trt__Capabilities
#define SOAP_TYPE_trt__Capabilities (813)
/* trt:Capabilities */
class SOAP_CMAC trt__Capabilities
{
public:
	class trt__ProfileCapabilities *ProfileCapabilities;	/* required element of type trt:ProfileCapabilities */
	class trt__StreamingCapabilities *StreamingCapabilities;	/* required element of type trt:StreamingCapabilities */
	std::vector<struct soap_dom_element >__any;
	bool *SnapshotUri;	/* optional attribute */
	bool *Rotation;	/* optional attribute */
	bool *VideoSourceMode;	/* optional attribute */
	bool *OSD;	/* optional attribute */
	bool *EXICompression;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 813; } /* = unique type id SOAP_TYPE_trt__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__Capabilities() { trt__Capabilities::soap_default(NULL); }
	virtual ~trt__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_trt__ProfileCapabilities
#define SOAP_TYPE_trt__ProfileCapabilities (814)
/* trt:ProfileCapabilities */
class SOAP_CMAC trt__ProfileCapabilities
{
public:
	std::vector<struct soap_dom_element >__any;
	int *MaximumNumberOfProfiles;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 814; } /* = unique type id SOAP_TYPE_trt__ProfileCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__ProfileCapabilities() { trt__ProfileCapabilities::soap_default(NULL); }
	virtual ~trt__ProfileCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_trt__StreamingCapabilities
#define SOAP_TYPE_trt__StreamingCapabilities (815)
/* trt:StreamingCapabilities */
class SOAP_CMAC trt__StreamingCapabilities
{
public:
	std::vector<struct soap_dom_element >__any;
	bool *RTPMulticast;	/* optional attribute */
	bool *RTP_USCORETCP;	/* optional attribute */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional attribute */
	bool *NonAggregateControl;	/* optional attribute */
	bool *NoRTSPStreaming;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 815; } /* = unique type id SOAP_TYPE_trt__StreamingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__StreamingCapabilities() { trt__StreamingCapabilities::soap_default(NULL); }
	virtual ~trt__StreamingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_trt__VideoSourceMode
#define SOAP_TYPE_trt__VideoSourceMode (816)
/* trt:VideoSourceMode */
class SOAP_CMAC trt__VideoSourceMode
{
public:
	float MaxFramerate;	/* required element of type xsd:float */
	tt__VideoResolution *MaxResolution;	/* required element of type tt:VideoResolution */
	std::string Encodings;	/* required element of type trt:EncodingTypes */
	bool Reboot;	/* required element of type xsd:boolean */
	std::string *Description;	/* optional element of type tt:Description */
	class trt__VideoSourceModeExtension *Extension;	/* optional element of type trt:VideoSourceModeExtension */
	std::string token;	/* required attribute */
	bool *Enabled;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 816; } /* = unique type id SOAP_TYPE_trt__VideoSourceMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__VideoSourceMode() { trt__VideoSourceMode::soap_default(NULL); }
	virtual ~trt__VideoSourceMode() { }
};
#endif

#ifndef SOAP_TYPE_trt__VideoSourceModeExtension
#define SOAP_TYPE_trt__VideoSourceModeExtension (817)
/* trt:VideoSourceModeExtension */
class SOAP_CMAC trt__VideoSourceModeExtension
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 817; } /* = unique type id SOAP_TYPE_trt__VideoSourceModeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__VideoSourceModeExtension() { trt__VideoSourceModeExtension::soap_default(NULL); }
	virtual ~trt__VideoSourceModeExtension() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetServiceCapabilities
#define SOAP_TYPE__trt__GetServiceCapabilities (818)
/* trt:GetServiceCapabilities */
class SOAP_CMAC _trt__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 818; } /* = unique type id SOAP_TYPE__trt__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetServiceCapabilities() { _trt__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_trt__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetServiceCapabilitiesResponse
#define SOAP_TYPE__trt__GetServiceCapabilitiesResponse (819)
/* trt:GetServiceCapabilitiesResponse */
class SOAP_CMAC _trt__GetServiceCapabilitiesResponse
{
public:
	trt__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type trt:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 819; } /* = unique type id SOAP_TYPE__trt__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetServiceCapabilitiesResponse() { _trt__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_trt__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSources
#define SOAP_TYPE__trt__GetVideoSources (820)
/* trt:GetVideoSources */
class SOAP_CMAC _trt__GetVideoSources
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 820; } /* = unique type id SOAP_TYPE__trt__GetVideoSources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSources() { _trt__GetVideoSources::soap_default(NULL); }
	virtual ~_trt__GetVideoSources() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourcesResponse
#define SOAP_TYPE__trt__GetVideoSourcesResponse (821)
/* trt:GetVideoSourcesResponse */
class SOAP_CMAC _trt__GetVideoSourcesResponse
{
public:
	std::vector<class tt__VideoSource * >VideoSources;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 821; } /* = unique type id SOAP_TYPE__trt__GetVideoSourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourcesResponse() { _trt__GetVideoSourcesResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSources
#define SOAP_TYPE__trt__GetAudioSources (822)
/* trt:GetAudioSources */
class SOAP_CMAC _trt__GetAudioSources
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 822; } /* = unique type id SOAP_TYPE__trt__GetAudioSources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSources() { _trt__GetAudioSources::soap_default(NULL); }
	virtual ~_trt__GetAudioSources() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourcesResponse
#define SOAP_TYPE__trt__GetAudioSourcesResponse (823)
/* trt:GetAudioSourcesResponse */
class SOAP_CMAC _trt__GetAudioSourcesResponse
{
public:
	std::vector<class tt__AudioSource * >AudioSources;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 823; } /* = unique type id SOAP_TYPE__trt__GetAudioSourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourcesResponse() { _trt__GetAudioSourcesResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputs
#define SOAP_TYPE__trt__GetAudioOutputs (824)
/* trt:GetAudioOutputs */
class SOAP_CMAC _trt__GetAudioOutputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 824; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputs() { _trt__GetAudioOutputs::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputs() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputsResponse
#define SOAP_TYPE__trt__GetAudioOutputsResponse (825)
/* trt:GetAudioOutputsResponse */
class SOAP_CMAC _trt__GetAudioOutputsResponse
{
public:
	std::vector<class tt__AudioOutput * >AudioOutputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 825; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputsResponse() { _trt__GetAudioOutputsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__CreateProfile
#define SOAP_TYPE__trt__CreateProfile (826)
/* trt:CreateProfile */
class SOAP_CMAC _trt__CreateProfile
{
public:
	std::string Name;	/* required element of type tt:Name */
	std::string *Token;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 826; } /* = unique type id SOAP_TYPE__trt__CreateProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateProfile() { _trt__CreateProfile::soap_default(NULL); }
	virtual ~_trt__CreateProfile() { }
};
#endif

#ifndef SOAP_TYPE__trt__CreateProfileResponse
#define SOAP_TYPE__trt__CreateProfileResponse (827)
/* trt:CreateProfileResponse */
class SOAP_CMAC _trt__CreateProfileResponse
{
public:
	tt__Profile *Profile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 827; } /* = unique type id SOAP_TYPE__trt__CreateProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateProfileResponse() { _trt__CreateProfileResponse::soap_default(NULL); }
	virtual ~_trt__CreateProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfile
#define SOAP_TYPE__trt__GetProfile (828)
/* trt:GetProfile */
class SOAP_CMAC _trt__GetProfile
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 828; } /* = unique type id SOAP_TYPE__trt__GetProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfile() { _trt__GetProfile::soap_default(NULL); }
	virtual ~_trt__GetProfile() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfileResponse
#define SOAP_TYPE__trt__GetProfileResponse (829)
/* trt:GetProfileResponse */
class SOAP_CMAC _trt__GetProfileResponse
{
public:
	tt__Profile *Profile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 829; } /* = unique type id SOAP_TYPE__trt__GetProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfileResponse() { _trt__GetProfileResponse::soap_default(NULL); }
	virtual ~_trt__GetProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfiles
#define SOAP_TYPE__trt__GetProfiles (830)
/* trt:GetProfiles */
class SOAP_CMAC _trt__GetProfiles
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 830; } /* = unique type id SOAP_TYPE__trt__GetProfiles */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfiles() { _trt__GetProfiles::soap_default(NULL); }
	virtual ~_trt__GetProfiles() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfilesResponse
#define SOAP_TYPE__trt__GetProfilesResponse (831)
/* trt:GetProfilesResponse */
class SOAP_CMAC _trt__GetProfilesResponse
{
public:
	std::vector<tt__Profile * >Profiles;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 831; } /* = unique type id SOAP_TYPE__trt__GetProfilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfilesResponse() { _trt__GetProfilesResponse::soap_default(NULL); }
	virtual ~_trt__GetProfilesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoEncoderConfiguration
#define SOAP_TYPE__trt__AddVideoEncoderConfiguration (832)
/* trt:AddVideoEncoderConfiguration */
class SOAP_CMAC _trt__AddVideoEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 832; } /* = unique type id SOAP_TYPE__trt__AddVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoEncoderConfiguration() { _trt__AddVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__AddVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse (833)
/* trt:AddVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__AddVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 833; } /* = unique type id SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoEncoderConfigurationResponse() { _trt__AddVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE__trt__RemoveVideoEncoderConfiguration (834)
/* trt:RemoveVideoEncoderConfiguration */
class SOAP_CMAC _trt__RemoveVideoEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 834; } /* = unique type id SOAP_TYPE__trt__RemoveVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoEncoderConfiguration() { _trt__RemoveVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse (835)
/* trt:RemoveVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__RemoveVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 835; } /* = unique type id SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoEncoderConfigurationResponse() { _trt__RemoveVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoSourceConfiguration
#define SOAP_TYPE__trt__AddVideoSourceConfiguration (836)
/* trt:AddVideoSourceConfiguration */
class SOAP_CMAC _trt__AddVideoSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 836; } /* = unique type id SOAP_TYPE__trt__AddVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoSourceConfiguration() { _trt__AddVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__AddVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__AddVideoSourceConfigurationResponse (837)
/* trt:AddVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__AddVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 837; } /* = unique type id SOAP_TYPE__trt__AddVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoSourceConfigurationResponse() { _trt__AddVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE__trt__RemoveVideoSourceConfiguration (838)
/* trt:RemoveVideoSourceConfiguration */
class SOAP_CMAC _trt__RemoveVideoSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 838; } /* = unique type id SOAP_TYPE__trt__RemoveVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoSourceConfiguration() { _trt__RemoveVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse (839)
/* trt:RemoveVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__RemoveVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 839; } /* = unique type id SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoSourceConfigurationResponse() { _trt__RemoveVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioEncoderConfiguration
#define SOAP_TYPE__trt__AddAudioEncoderConfiguration (840)
/* trt:AddAudioEncoderConfiguration */
class SOAP_CMAC _trt__AddAudioEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 840; } /* = unique type id SOAP_TYPE__trt__AddAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioEncoderConfiguration() { _trt__AddAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse (841)
/* trt:AddAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__AddAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 841; } /* = unique type id SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioEncoderConfigurationResponse() { _trt__AddAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioEncoderConfiguration (842)
/* trt:RemoveAudioEncoderConfiguration */
class SOAP_CMAC _trt__RemoveAudioEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 842; } /* = unique type id SOAP_TYPE__trt__RemoveAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioEncoderConfiguration() { _trt__RemoveAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse (843)
/* trt:RemoveAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 843; } /* = unique type id SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioEncoderConfigurationResponse() { _trt__RemoveAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioSourceConfiguration
#define SOAP_TYPE__trt__AddAudioSourceConfiguration (844)
/* trt:AddAudioSourceConfiguration */
class SOAP_CMAC _trt__AddAudioSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 844; } /* = unique type id SOAP_TYPE__trt__AddAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioSourceConfiguration() { _trt__AddAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__AddAudioSourceConfigurationResponse (845)
/* trt:AddAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__AddAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 845; } /* = unique type id SOAP_TYPE__trt__AddAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioSourceConfigurationResponse() { _trt__AddAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE__trt__RemoveAudioSourceConfiguration (846)
/* trt:RemoveAudioSourceConfiguration */
class SOAP_CMAC _trt__RemoveAudioSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 846; } /* = unique type id SOAP_TYPE__trt__RemoveAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioSourceConfiguration() { _trt__RemoveAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse (847)
/* trt:RemoveAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 847; } /* = unique type id SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioSourceConfigurationResponse() { _trt__RemoveAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddPTZConfiguration
#define SOAP_TYPE__trt__AddPTZConfiguration (848)
/* trt:AddPTZConfiguration */
class SOAP_CMAC _trt__AddPTZConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 848; } /* = unique type id SOAP_TYPE__trt__AddPTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddPTZConfiguration() { _trt__AddPTZConfiguration::soap_default(NULL); }
	virtual ~_trt__AddPTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddPTZConfigurationResponse
#define SOAP_TYPE__trt__AddPTZConfigurationResponse (849)
/* trt:AddPTZConfigurationResponse */
class SOAP_CMAC _trt__AddPTZConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 849; } /* = unique type id SOAP_TYPE__trt__AddPTZConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddPTZConfigurationResponse() { _trt__AddPTZConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddPTZConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemovePTZConfiguration
#define SOAP_TYPE__trt__RemovePTZConfiguration (850)
/* trt:RemovePTZConfiguration */
class SOAP_CMAC _trt__RemovePTZConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 850; } /* = unique type id SOAP_TYPE__trt__RemovePTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemovePTZConfiguration() { _trt__RemovePTZConfiguration::soap_default(NULL); }
	virtual ~_trt__RemovePTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemovePTZConfigurationResponse
#define SOAP_TYPE__trt__RemovePTZConfigurationResponse (851)
/* trt:RemovePTZConfigurationResponse */
class SOAP_CMAC _trt__RemovePTZConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 851; } /* = unique type id SOAP_TYPE__trt__RemovePTZConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemovePTZConfigurationResponse() { _trt__RemovePTZConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemovePTZConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__AddVideoAnalyticsConfiguration (852)
/* trt:AddVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__AddVideoAnalyticsConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 852; } /* = unique type id SOAP_TYPE__trt__AddVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoAnalyticsConfiguration() { _trt__AddVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__AddVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse (853)
/* trt:AddVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__AddVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 853; } /* = unique type id SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoAnalyticsConfigurationResponse() { _trt__AddVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration (854)
/* trt:RemoveVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__RemoveVideoAnalyticsConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 854; } /* = unique type id SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoAnalyticsConfiguration() { _trt__RemoveVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse (855)
/* trt:RemoveVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__RemoveVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 855; } /* = unique type id SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoAnalyticsConfigurationResponse() { _trt__RemoveVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddMetadataConfiguration
#define SOAP_TYPE__trt__AddMetadataConfiguration (856)
/* trt:AddMetadataConfiguration */
class SOAP_CMAC _trt__AddMetadataConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 856; } /* = unique type id SOAP_TYPE__trt__AddMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddMetadataConfiguration() { _trt__AddMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__AddMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddMetadataConfigurationResponse
#define SOAP_TYPE__trt__AddMetadataConfigurationResponse (857)
/* trt:AddMetadataConfigurationResponse */
class SOAP_CMAC _trt__AddMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 857; } /* = unique type id SOAP_TYPE__trt__AddMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddMetadataConfigurationResponse() { _trt__AddMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveMetadataConfiguration
#define SOAP_TYPE__trt__RemoveMetadataConfiguration (858)
/* trt:RemoveMetadataConfiguration */
class SOAP_CMAC _trt__RemoveMetadataConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 858; } /* = unique type id SOAP_TYPE__trt__RemoveMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveMetadataConfiguration() { _trt__RemoveMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveMetadataConfigurationResponse
#define SOAP_TYPE__trt__RemoveMetadataConfigurationResponse (859)
/* trt:RemoveMetadataConfigurationResponse */
class SOAP_CMAC _trt__RemoveMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 859; } /* = unique type id SOAP_TYPE__trt__RemoveMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveMetadataConfigurationResponse() { _trt__RemoveMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioOutputConfiguration
#define SOAP_TYPE__trt__AddAudioOutputConfiguration (860)
/* trt:AddAudioOutputConfiguration */
class SOAP_CMAC _trt__AddAudioOutputConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 860; } /* = unique type id SOAP_TYPE__trt__AddAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioOutputConfiguration() { _trt__AddAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__AddAudioOutputConfigurationResponse (861)
/* trt:AddAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__AddAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 861; } /* = unique type id SOAP_TYPE__trt__AddAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioOutputConfigurationResponse() { _trt__AddAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE__trt__RemoveAudioOutputConfiguration (862)
/* trt:RemoveAudioOutputConfiguration */
class SOAP_CMAC _trt__RemoveAudioOutputConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 862; } /* = unique type id SOAP_TYPE__trt__RemoveAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioOutputConfiguration() { _trt__RemoveAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse (863)
/* trt:RemoveAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 863; } /* = unique type id SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioOutputConfigurationResponse() { _trt__RemoveAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioDecoderConfiguration
#define SOAP_TYPE__trt__AddAudioDecoderConfiguration (864)
/* trt:AddAudioDecoderConfiguration */
class SOAP_CMAC _trt__AddAudioDecoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 864; } /* = unique type id SOAP_TYPE__trt__AddAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioDecoderConfiguration() { _trt__AddAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse (865)
/* trt:AddAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__AddAudioDecoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 865; } /* = unique type id SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioDecoderConfigurationResponse() { _trt__AddAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioDecoderConfiguration (866)
/* trt:RemoveAudioDecoderConfiguration */
class SOAP_CMAC _trt__RemoveAudioDecoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 866; } /* = unique type id SOAP_TYPE__trt__RemoveAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioDecoderConfiguration() { _trt__RemoveAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse (867)
/* trt:RemoveAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioDecoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 867; } /* = unique type id SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioDecoderConfigurationResponse() { _trt__RemoveAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__DeleteProfile
#define SOAP_TYPE__trt__DeleteProfile (868)
/* trt:DeleteProfile */
class SOAP_CMAC _trt__DeleteProfile
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 868; } /* = unique type id SOAP_TYPE__trt__DeleteProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteProfile() { _trt__DeleteProfile::soap_default(NULL); }
	virtual ~_trt__DeleteProfile() { }
};
#endif

#ifndef SOAP_TYPE__trt__DeleteProfileResponse
#define SOAP_TYPE__trt__DeleteProfileResponse (869)
/* trt:DeleteProfileResponse */
class SOAP_CMAC _trt__DeleteProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 869; } /* = unique type id SOAP_TYPE__trt__DeleteProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteProfileResponse() { _trt__DeleteProfileResponse::soap_default(NULL); }
	virtual ~_trt__DeleteProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetVideoEncoderConfigurations (870)
/* trt:GetVideoEncoderConfigurations */
class SOAP_CMAC _trt__GetVideoEncoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 870; } /* = unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurations() { _trt__GetVideoEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse (871)
/* trt:GetVideoEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationsResponse
{
public:
	std::vector<tt__VideoEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 871; } /* = unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationsResponse() { _trt__GetVideoEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurations
#define SOAP_TYPE__trt__GetVideoSourceConfigurations (872)
/* trt:GetVideoSourceConfigurations */
class SOAP_CMAC _trt__GetVideoSourceConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 872; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurations() { _trt__GetVideoSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse (873)
/* trt:GetVideoSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetVideoSourceConfigurationsResponse
{
public:
	std::vector<tt__VideoSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 873; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationsResponse() { _trt__GetVideoSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetAudioEncoderConfigurations (874)
/* trt:GetAudioEncoderConfigurations */
class SOAP_CMAC _trt__GetAudioEncoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 874; } /* = unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurations() { _trt__GetAudioEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse (875)
/* trt:GetAudioEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationsResponse
{
public:
	std::vector<tt__AudioEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 875; } /* = unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationsResponse() { _trt__GetAudioEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurations
#define SOAP_TYPE__trt__GetAudioSourceConfigurations (876)
/* trt:GetAudioSourceConfigurations */
class SOAP_CMAC _trt__GetAudioSourceConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 876; } /* = unique type id SOAP_TYPE__trt__GetAudioSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurations() { _trt__GetAudioSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse (877)
/* trt:GetAudioSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioSourceConfigurationsResponse
{
public:
	std::vector<tt__AudioSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 877; } /* = unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationsResponse() { _trt__GetAudioSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurations (878)
/* trt:GetVideoAnalyticsConfigurations */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 878; } /* = unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfigurations() { _trt__GetVideoAnalyticsConfigurations::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse (879)
/* trt:GetVideoAnalyticsConfigurationsResponse */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurationsResponse
{
public:
	std::vector<tt__VideoAnalyticsConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 879; } /* = unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfigurationsResponse() { _trt__GetVideoAnalyticsConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurations
#define SOAP_TYPE__trt__GetMetadataConfigurations (880)
/* trt:GetMetadataConfigurations */
class SOAP_CMAC _trt__GetMetadataConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 880; } /* = unique type id SOAP_TYPE__trt__GetMetadataConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurations() { _trt__GetMetadataConfigurations::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationsResponse (881)
/* trt:GetMetadataConfigurationsResponse */
class SOAP_CMAC _trt__GetMetadataConfigurationsResponse
{
public:
	std::vector<tt__MetadataConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 881; } /* = unique type id SOAP_TYPE__trt__GetMetadataConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationsResponse() { _trt__GetMetadataConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurations
#define SOAP_TYPE__trt__GetAudioOutputConfigurations (882)
/* trt:GetAudioOutputConfigurations */
class SOAP_CMAC _trt__GetAudioOutputConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 882; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurations() { _trt__GetAudioOutputConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse (883)
/* trt:GetAudioOutputConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioOutputConfigurationsResponse
{
public:
	std::vector<tt__AudioOutputConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 883; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationsResponse() { _trt__GetAudioOutputConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetAudioDecoderConfigurations (884)
/* trt:GetAudioDecoderConfigurations */
class SOAP_CMAC _trt__GetAudioDecoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 884; } /* = unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurations() { _trt__GetAudioDecoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse (885)
/* trt:GetAudioDecoderConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationsResponse
{
public:
	std::vector<tt__AudioDecoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 885; } /* = unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationsResponse() { _trt__GetAudioDecoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfiguration
#define SOAP_TYPE__trt__GetVideoSourceConfiguration (886)
/* trt:GetVideoSourceConfiguration */
class SOAP_CMAC _trt__GetVideoSourceConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 886; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfiguration() { _trt__GetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationResponse (887)
/* trt:GetVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__GetVideoSourceConfigurationResponse
{
public:
	tt__VideoSourceConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 887; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationResponse() { _trt__GetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfiguration
#define SOAP_TYPE__trt__GetVideoEncoderConfiguration (888)
/* trt:GetVideoEncoderConfiguration */
class SOAP_CMAC _trt__GetVideoEncoderConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 888; } /* = unique type id SOAP_TYPE__trt__GetVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfiguration() { _trt__GetVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse (889)
/* trt:GetVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationResponse
{
public:
	tt__VideoEncoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 889; } /* = unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationResponse() { _trt__GetVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfiguration
#define SOAP_TYPE__trt__GetAudioSourceConfiguration (890)
/* trt:GetAudioSourceConfiguration */
class SOAP_CMAC _trt__GetAudioSourceConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 890; } /* = unique type id SOAP_TYPE__trt__GetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfiguration() { _trt__GetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationResponse (891)
/* trt:GetAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__GetAudioSourceConfigurationResponse
{
public:
	tt__AudioSourceConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 891; } /* = unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationResponse() { _trt__GetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfiguration
#define SOAP_TYPE__trt__GetAudioEncoderConfiguration (892)
/* trt:GetAudioEncoderConfiguration */
class SOAP_CMAC _trt__GetAudioEncoderConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 892; } /* = unique type id SOAP_TYPE__trt__GetAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfiguration() { _trt__GetAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse (893)
/* trt:GetAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationResponse
{
public:
	tt__AudioEncoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 893; } /* = unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationResponse() { _trt__GetAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__GetVideoAnalyticsConfiguration (894)
/* trt:GetVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__GetVideoAnalyticsConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 894; } /* = unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfiguration() { _trt__GetVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse (895)
/* trt:GetVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurationResponse
{
public:
	tt__VideoAnalyticsConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 895; } /* = unique type id SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfigurationResponse() { _trt__GetVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfiguration
#define SOAP_TYPE__trt__GetMetadataConfiguration (896)
/* trt:GetMetadataConfiguration */
class SOAP_CMAC _trt__GetMetadataConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 896; } /* = unique type id SOAP_TYPE__trt__GetMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfiguration() { _trt__GetMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationResponse (897)
/* trt:GetMetadataConfigurationResponse */
class SOAP_CMAC _trt__GetMetadataConfigurationResponse
{
public:
	tt__MetadataConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 897; } /* = unique type id SOAP_TYPE__trt__GetMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationResponse() { _trt__GetMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfiguration
#define SOAP_TYPE__trt__GetAudioOutputConfiguration (898)
/* trt:GetAudioOutputConfiguration */
class SOAP_CMAC _trt__GetAudioOutputConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 898; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfiguration() { _trt__GetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationResponse (899)
/* trt:GetAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__GetAudioOutputConfigurationResponse
{
public:
	tt__AudioOutputConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 899; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationResponse() { _trt__GetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfiguration
#define SOAP_TYPE__trt__GetAudioDecoderConfiguration (900)
/* trt:GetAudioDecoderConfiguration */
class SOAP_CMAC _trt__GetAudioDecoderConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 900; } /* = unique type id SOAP_TYPE__trt__GetAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfiguration() { _trt__GetAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse (901)
/* trt:GetAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationResponse
{
public:
	tt__AudioDecoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 901; } /* = unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationResponse() { _trt__GetAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations (902)
/* trt:GetCompatibleVideoEncoderConfigurations */
class SOAP_CMAC _trt__GetCompatibleVideoEncoderConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 902; } /* = unique type id SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoEncoderConfigurations() { _trt__GetCompatibleVideoEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse (903)
/* trt:GetCompatibleVideoEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleVideoEncoderConfigurationsResponse
{
public:
	std::vector<tt__VideoEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 903; } /* = unique type id SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoEncoderConfigurationsResponse() { _trt__GetCompatibleVideoEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations (904)
/* trt:GetCompatibleVideoSourceConfigurations */
class SOAP_CMAC _trt__GetCompatibleVideoSourceConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 904; } /* = unique type id SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoSourceConfigurations() { _trt__GetCompatibleVideoSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse (905)
/* trt:GetCompatibleVideoSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleVideoSourceConfigurationsResponse
{
public:
	std::vector<tt__VideoSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 905; } /* = unique type id SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoSourceConfigurationsResponse() { _trt__GetCompatibleVideoSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations (906)
/* trt:GetCompatibleAudioEncoderConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioEncoderConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 906; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioEncoderConfigurations() { _trt__GetCompatibleAudioEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse (907)
/* trt:GetCompatibleAudioEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioEncoderConfigurationsResponse
{
public:
	std::vector<tt__AudioEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 907; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioEncoderConfigurationsResponse() { _trt__GetCompatibleAudioEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations (908)
/* trt:GetCompatibleAudioSourceConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioSourceConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 908; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioSourceConfigurations() { _trt__GetCompatibleAudioSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse (909)
/* trt:GetCompatibleAudioSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioSourceConfigurationsResponse
{
public:
	std::vector<tt__AudioSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 909; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioSourceConfigurationsResponse() { _trt__GetCompatibleAudioSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations (910)
/* trt:GetCompatibleVideoAnalyticsConfigurations */
class SOAP_CMAC _trt__GetCompatibleVideoAnalyticsConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 910; } /* = unique type id SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoAnalyticsConfigurations() { _trt__GetCompatibleVideoAnalyticsConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoAnalyticsConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse (911)
/* trt:GetCompatibleVideoAnalyticsConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleVideoAnalyticsConfigurationsResponse
{
public:
	std::vector<tt__VideoAnalyticsConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 911; } /* = unique type id SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoAnalyticsConfigurationsResponse() { _trt__GetCompatibleVideoAnalyticsConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoAnalyticsConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurations (912)
/* trt:GetCompatibleMetadataConfigurations */
class SOAP_CMAC _trt__GetCompatibleMetadataConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 912; } /* = unique type id SOAP_TYPE__trt__GetCompatibleMetadataConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleMetadataConfigurations() { _trt__GetCompatibleMetadataConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleMetadataConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse (913)
/* trt:GetCompatibleMetadataConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleMetadataConfigurationsResponse
{
public:
	std::vector<tt__MetadataConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 913; } /* = unique type id SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleMetadataConfigurationsResponse() { _trt__GetCompatibleMetadataConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleMetadataConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations (914)
/* trt:GetCompatibleAudioOutputConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioOutputConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 914; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioOutputConfigurations() { _trt__GetCompatibleAudioOutputConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioOutputConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse (915)
/* trt:GetCompatibleAudioOutputConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioOutputConfigurationsResponse
{
public:
	std::vector<tt__AudioOutputConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 915; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioOutputConfigurationsResponse() { _trt__GetCompatibleAudioOutputConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioOutputConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations (916)
/* trt:GetCompatibleAudioDecoderConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioDecoderConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 916; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioDecoderConfigurations() { _trt__GetCompatibleAudioDecoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioDecoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse (917)
/* trt:GetCompatibleAudioDecoderConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioDecoderConfigurationsResponse
{
public:
	std::vector<tt__AudioDecoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 917; } /* = unique type id SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioDecoderConfigurationsResponse() { _trt__GetCompatibleAudioDecoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioDecoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoEncoderConfiguration
#define SOAP_TYPE__trt__SetVideoEncoderConfiguration (918)
/* trt:SetVideoEncoderConfiguration */
class SOAP_CMAC _trt__SetVideoEncoderConfiguration
{
public:
	tt__VideoEncoderConfiguration *Configuration;	/* required element of type tt:VideoEncoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 918; } /* = unique type id SOAP_TYPE__trt__SetVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoEncoderConfiguration() { _trt__SetVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__SetVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse (919)
/* trt:SetVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__SetVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 919; } /* = unique type id SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoEncoderConfigurationResponse() { _trt__SetVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceConfiguration
#define SOAP_TYPE__trt__SetVideoSourceConfiguration (920)
/* trt:SetVideoSourceConfiguration */
class SOAP_CMAC _trt__SetVideoSourceConfiguration
{
public:
	tt__VideoSourceConfiguration *Configuration;	/* required element of type tt:VideoSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 920; } /* = unique type id SOAP_TYPE__trt__SetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceConfiguration() { _trt__SetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__SetVideoSourceConfigurationResponse (921)
/* trt:SetVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__SetVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 921; } /* = unique type id SOAP_TYPE__trt__SetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceConfigurationResponse() { _trt__SetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioEncoderConfiguration
#define SOAP_TYPE__trt__SetAudioEncoderConfiguration (922)
/* trt:SetAudioEncoderConfiguration */
class SOAP_CMAC _trt__SetAudioEncoderConfiguration
{
public:
	tt__AudioEncoderConfiguration *Configuration;	/* required element of type tt:AudioEncoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 922; } /* = unique type id SOAP_TYPE__trt__SetAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioEncoderConfiguration() { _trt__SetAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse (923)
/* trt:SetAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__SetAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 923; } /* = unique type id SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioEncoderConfigurationResponse() { _trt__SetAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioSourceConfiguration
#define SOAP_TYPE__trt__SetAudioSourceConfiguration (924)
/* trt:SetAudioSourceConfiguration */
class SOAP_CMAC _trt__SetAudioSourceConfiguration
{
public:
	tt__AudioSourceConfiguration *Configuration;	/* required element of type tt:AudioSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 924; } /* = unique type id SOAP_TYPE__trt__SetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioSourceConfiguration() { _trt__SetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__SetAudioSourceConfigurationResponse (925)
/* trt:SetAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__SetAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 925; } /* = unique type id SOAP_TYPE__trt__SetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioSourceConfigurationResponse() { _trt__SetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__SetVideoAnalyticsConfiguration (926)
/* trt:SetVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__SetVideoAnalyticsConfiguration
{
public:
	tt__VideoAnalyticsConfiguration *Configuration;	/* required element of type tt:VideoAnalyticsConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 926; } /* = unique type id SOAP_TYPE__trt__SetVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoAnalyticsConfiguration() { _trt__SetVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__SetVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse (927)
/* trt:SetVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__SetVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 927; } /* = unique type id SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoAnalyticsConfigurationResponse() { _trt__SetVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetMetadataConfiguration
#define SOAP_TYPE__trt__SetMetadataConfiguration (928)
/* trt:SetMetadataConfiguration */
class SOAP_CMAC _trt__SetMetadataConfiguration
{
public:
	tt__MetadataConfiguration *Configuration;	/* required element of type tt:MetadataConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 928; } /* = unique type id SOAP_TYPE__trt__SetMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetMetadataConfiguration() { _trt__SetMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__SetMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetMetadataConfigurationResponse
#define SOAP_TYPE__trt__SetMetadataConfigurationResponse (929)
/* trt:SetMetadataConfigurationResponse */
class SOAP_CMAC _trt__SetMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 929; } /* = unique type id SOAP_TYPE__trt__SetMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetMetadataConfigurationResponse() { _trt__SetMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioOutputConfiguration
#define SOAP_TYPE__trt__SetAudioOutputConfiguration (930)
/* trt:SetAudioOutputConfiguration */
class SOAP_CMAC _trt__SetAudioOutputConfiguration
{
public:
	tt__AudioOutputConfiguration *Configuration;	/* required element of type tt:AudioOutputConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 930; } /* = unique type id SOAP_TYPE__trt__SetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioOutputConfiguration() { _trt__SetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__SetAudioOutputConfigurationResponse (931)
/* trt:SetAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__SetAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 931; } /* = unique type id SOAP_TYPE__trt__SetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioOutputConfigurationResponse() { _trt__SetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioDecoderConfiguration
#define SOAP_TYPE__trt__SetAudioDecoderConfiguration (932)
/* trt:SetAudioDecoderConfiguration */
class SOAP_CMAC _trt__SetAudioDecoderConfiguration
{
public:
	tt__AudioDecoderConfiguration *Configuration;	/* required element of type tt:AudioDecoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 932; } /* = unique type id SOAP_TYPE__trt__SetAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioDecoderConfiguration() { _trt__SetAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse (933)
/* trt:SetAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__SetAudioDecoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 933; } /* = unique type id SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioDecoderConfigurationResponse() { _trt__SetAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptions (934)
/* trt:GetVideoSourceConfigurationOptions */
class SOAP_CMAC _trt__GetVideoSourceConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 934; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationOptions() { _trt__GetVideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse (935)
/* trt:GetVideoSourceConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetVideoSourceConfigurationOptionsResponse
{
public:
	tt__VideoSourceConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 935; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationOptionsResponse() { _trt__GetVideoSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions (936)
/* trt:GetVideoEncoderConfigurationOptions */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 936; } /* = unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationOptions() { _trt__GetVideoEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse (937)
/* trt:GetVideoEncoderConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationOptionsResponse
{
public:
	tt__VideoEncoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoEncoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 937; } /* = unique type id SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationOptionsResponse() { _trt__GetVideoEncoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptions (938)
/* trt:GetAudioSourceConfigurationOptions */
class SOAP_CMAC _trt__GetAudioSourceConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 938; } /* = unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationOptions() { _trt__GetAudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse (939)
/* trt:GetAudioSourceConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioSourceConfigurationOptionsResponse
{
public:
	tt__AudioSourceConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 939; } /* = unique type id SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationOptionsResponse() { _trt__GetAudioSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions (940)
/* trt:GetAudioEncoderConfigurationOptions */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 940; } /* = unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationOptions() { _trt__GetAudioEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse (941)
/* trt:GetAudioEncoderConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationOptionsResponse
{
public:
	tt__AudioEncoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioEncoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 941; } /* = unique type id SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationOptionsResponse() { _trt__GetAudioEncoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptions
#define SOAP_TYPE__trt__GetMetadataConfigurationOptions (942)
/* trt:GetMetadataConfigurationOptions */
class SOAP_CMAC _trt__GetMetadataConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 942; } /* = unique type id SOAP_TYPE__trt__GetMetadataConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationOptions() { _trt__GetMetadataConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse (943)
/* trt:GetMetadataConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetMetadataConfigurationOptionsResponse
{
public:
	tt__MetadataConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MetadataConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 943; } /* = unique type id SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationOptionsResponse() { _trt__GetMetadataConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptions (944)
/* trt:GetAudioOutputConfigurationOptions */
class SOAP_CMAC _trt__GetAudioOutputConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 944; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationOptions() { _trt__GetAudioOutputConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse (945)
/* trt:GetAudioOutputConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioOutputConfigurationOptionsResponse
{
public:
	tt__AudioOutputConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioOutputConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 945; } /* = unique type id SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationOptionsResponse() { _trt__GetAudioOutputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions (946)
/* trt:GetAudioDecoderConfigurationOptions */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 946; } /* = unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationOptions() { _trt__GetAudioDecoderConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse (947)
/* trt:GetAudioDecoderConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationOptionsResponse
{
public:
	tt__AudioDecoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioDecoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 947; } /* = unique type id SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationOptionsResponse() { _trt__GetAudioDecoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances (948)
/* trt:GetGuaranteedNumberOfVideoEncoderInstances */
class SOAP_CMAC _trt__GetGuaranteedNumberOfVideoEncoderInstances
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 948; } /* = unique type id SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetGuaranteedNumberOfVideoEncoderInstances() { _trt__GetGuaranteedNumberOfVideoEncoderInstances::soap_default(NULL); }
	virtual ~_trt__GetGuaranteedNumberOfVideoEncoderInstances() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse (949)
/* trt:GetGuaranteedNumberOfVideoEncoderInstancesResponse */
class SOAP_CMAC _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
{
public:
	int TotalNumber;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	int *JPEG;	/* optional element of type xsd:int */
	int *H264;	/* optional element of type xsd:int */
	int *MPEG4;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 949; } /* = unique type id SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse() { _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse::soap_default(NULL); }
	virtual ~_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetStreamUri
#define SOAP_TYPE__trt__GetStreamUri (950)
/* trt:GetStreamUri */
class SOAP_CMAC _trt__GetStreamUri
{
public:
	tt__StreamSetup *StreamSetup;	/* required element of type tt:StreamSetup */
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 950; } /* = unique type id SOAP_TYPE__trt__GetStreamUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetStreamUri() { _trt__GetStreamUri::soap_default(NULL); }
	virtual ~_trt__GetStreamUri() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetStreamUriResponse
#define SOAP_TYPE__trt__GetStreamUriResponse (951)
/* trt:GetStreamUriResponse */
class SOAP_CMAC _trt__GetStreamUriResponse
{
public:
	tt__MediaUri *MediaUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MediaUri */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 951; } /* = unique type id SOAP_TYPE__trt__GetStreamUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetStreamUriResponse() { _trt__GetStreamUriResponse::soap_default(NULL); }
	virtual ~_trt__GetStreamUriResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__StartMulticastStreaming
#define SOAP_TYPE__trt__StartMulticastStreaming (952)
/* trt:StartMulticastStreaming */
class SOAP_CMAC _trt__StartMulticastStreaming
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 952; } /* = unique type id SOAP_TYPE__trt__StartMulticastStreaming */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StartMulticastStreaming() { _trt__StartMulticastStreaming::soap_default(NULL); }
	virtual ~_trt__StartMulticastStreaming() { }
};
#endif

#ifndef SOAP_TYPE__trt__StartMulticastStreamingResponse
#define SOAP_TYPE__trt__StartMulticastStreamingResponse (953)
/* trt:StartMulticastStreamingResponse */
class SOAP_CMAC _trt__StartMulticastStreamingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 953; } /* = unique type id SOAP_TYPE__trt__StartMulticastStreamingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StartMulticastStreamingResponse() { _trt__StartMulticastStreamingResponse::soap_default(NULL); }
	virtual ~_trt__StartMulticastStreamingResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__StopMulticastStreaming
#define SOAP_TYPE__trt__StopMulticastStreaming (954)
/* trt:StopMulticastStreaming */
class SOAP_CMAC _trt__StopMulticastStreaming
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 954; } /* = unique type id SOAP_TYPE__trt__StopMulticastStreaming */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StopMulticastStreaming() { _trt__StopMulticastStreaming::soap_default(NULL); }
	virtual ~_trt__StopMulticastStreaming() { }
};
#endif

#ifndef SOAP_TYPE__trt__StopMulticastStreamingResponse
#define SOAP_TYPE__trt__StopMulticastStreamingResponse (955)
/* trt:StopMulticastStreamingResponse */
class SOAP_CMAC _trt__StopMulticastStreamingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 955; } /* = unique type id SOAP_TYPE__trt__StopMulticastStreamingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StopMulticastStreamingResponse() { _trt__StopMulticastStreamingResponse::soap_default(NULL); }
	virtual ~_trt__StopMulticastStreamingResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetSynchronizationPoint
#define SOAP_TYPE__trt__SetSynchronizationPoint (956)
/* trt:SetSynchronizationPoint */
class SOAP_CMAC _trt__SetSynchronizationPoint
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 956; } /* = unique type id SOAP_TYPE__trt__SetSynchronizationPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetSynchronizationPoint() { _trt__SetSynchronizationPoint::soap_default(NULL); }
	virtual ~_trt__SetSynchronizationPoint() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetSynchronizationPointResponse
#define SOAP_TYPE__trt__SetSynchronizationPointResponse (957)
/* trt:SetSynchronizationPointResponse */
class SOAP_CMAC _trt__SetSynchronizationPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 957; } /* = unique type id SOAP_TYPE__trt__SetSynchronizationPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetSynchronizationPointResponse() { _trt__SetSynchronizationPointResponse::soap_default(NULL); }
	virtual ~_trt__SetSynchronizationPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetSnapshotUri
#define SOAP_TYPE__trt__GetSnapshotUri (958)
/* trt:GetSnapshotUri */
class SOAP_CMAC _trt__GetSnapshotUri
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 958; } /* = unique type id SOAP_TYPE__trt__GetSnapshotUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetSnapshotUri() { _trt__GetSnapshotUri::soap_default(NULL); }
	virtual ~_trt__GetSnapshotUri() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetSnapshotUriResponse
#define SOAP_TYPE__trt__GetSnapshotUriResponse (959)
/* trt:GetSnapshotUriResponse */
class SOAP_CMAC _trt__GetSnapshotUriResponse
{
public:
	tt__MediaUri *MediaUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MediaUri */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 959; } /* = unique type id SOAP_TYPE__trt__GetSnapshotUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetSnapshotUriResponse() { _trt__GetSnapshotUriResponse::soap_default(NULL); }
	virtual ~_trt__GetSnapshotUriResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceModes
#define SOAP_TYPE__trt__GetVideoSourceModes (960)
/* trt:GetVideoSourceModes */
class SOAP_CMAC _trt__GetVideoSourceModes
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 960; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceModes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceModes() { _trt__GetVideoSourceModes::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceModes() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceModesResponse
#define SOAP_TYPE__trt__GetVideoSourceModesResponse (961)
/* trt:GetVideoSourceModesResponse */
class SOAP_CMAC _trt__GetVideoSourceModesResponse
{
public:
	std::vector<trt__VideoSourceMode * >VideoSourceModes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type trt:VideoSourceMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 961; } /* = unique type id SOAP_TYPE__trt__GetVideoSourceModesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceModesResponse() { _trt__GetVideoSourceModesResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceModesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceMode
#define SOAP_TYPE__trt__SetVideoSourceMode (962)
/* trt:SetVideoSourceMode */
class SOAP_CMAC _trt__SetVideoSourceMode
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	std::string VideoSourceModeToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 962; } /* = unique type id SOAP_TYPE__trt__SetVideoSourceMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceMode() { _trt__SetVideoSourceMode::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceMode() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceModeResponse
#define SOAP_TYPE__trt__SetVideoSourceModeResponse (963)
/* trt:SetVideoSourceModeResponse */
class SOAP_CMAC _trt__SetVideoSourceModeResponse
{
public:
	bool Reboot;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 963; } /* = unique type id SOAP_TYPE__trt__SetVideoSourceModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceModeResponse() { _trt__SetVideoSourceModeResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSDs
#define SOAP_TYPE__trt__GetOSDs (964)
/* trt:GetOSDs */
class SOAP_CMAC _trt__GetOSDs
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 964; } /* = unique type id SOAP_TYPE__trt__GetOSDs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSDs() { _trt__GetOSDs::soap_default(NULL); }
	virtual ~_trt__GetOSDs() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSDsResponse
#define SOAP_TYPE__trt__GetOSDsResponse (965)
/* trt:GetOSDsResponse */
class SOAP_CMAC _trt__GetOSDsResponse
{
public:
	std::vector<class tt__OSDConfiguration * >OSDs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:OSDConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 965; } /* = unique type id SOAP_TYPE__trt__GetOSDsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSDsResponse() { _trt__GetOSDsResponse::soap_default(NULL); }
	virtual ~_trt__GetOSDsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSD
#define SOAP_TYPE__trt__GetOSD (966)
/* trt:GetOSD */
class SOAP_CMAC _trt__GetOSD
{
public:
	std::string OSDToken;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 966; } /* = unique type id SOAP_TYPE__trt__GetOSD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSD() { _trt__GetOSD::soap_default(NULL); }
	virtual ~_trt__GetOSD() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSDResponse
#define SOAP_TYPE__trt__GetOSDResponse (967)
/* trt:GetOSDResponse */
class SOAP_CMAC _trt__GetOSDResponse
{
public:
	tt__OSDConfiguration *OSD;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:OSDConfiguration */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 967; } /* = unique type id SOAP_TYPE__trt__GetOSDResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSDResponse() { _trt__GetOSDResponse::soap_default(NULL); }
	virtual ~_trt__GetOSDResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetOSD
#define SOAP_TYPE__trt__SetOSD (968)
/* trt:SetOSD */
class SOAP_CMAC _trt__SetOSD
{
public:
	tt__OSDConfiguration *OSD;	/* required element of type tt:OSDConfiguration */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 968; } /* = unique type id SOAP_TYPE__trt__SetOSD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetOSD() { _trt__SetOSD::soap_default(NULL); }
	virtual ~_trt__SetOSD() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetOSDResponse
#define SOAP_TYPE__trt__SetOSDResponse (969)
/* trt:SetOSDResponse */
class SOAP_CMAC _trt__SetOSDResponse
{
public:
	std::vector<struct soap_dom_element >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 969; } /* = unique type id SOAP_TYPE__trt__SetOSDResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetOSDResponse() { _trt__SetOSDResponse::soap_default(NULL); }
	virtual ~_trt__SetOSDResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSDOptions
#define SOAP_TYPE__trt__GetOSDOptions (970)
/* trt:GetOSDOptions */
class SOAP_CMAC _trt__GetOSDOptions
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 970; } /* = unique type id SOAP_TYPE__trt__GetOSDOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSDOptions() { _trt__GetOSDOptions::soap_default(NULL); }
	virtual ~_trt__GetOSDOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetOSDOptionsResponse
#define SOAP_TYPE__trt__GetOSDOptionsResponse (971)
/* trt:GetOSDOptionsResponse */
class SOAP_CMAC _trt__GetOSDOptionsResponse
{
public:
	tt__OSDConfigurationOptions *OSDOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:OSDConfigurationOptions */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 971; } /* = unique type id SOAP_TYPE__trt__GetOSDOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetOSDOptionsResponse() { _trt__GetOSDOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetOSDOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__CreateOSD
#define SOAP_TYPE__trt__CreateOSD (972)
/* trt:CreateOSD */
class SOAP_CMAC _trt__CreateOSD
{
public:
	tt__OSDConfiguration *OSD;	/* required element of type tt:OSDConfiguration */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 972; } /* = unique type id SOAP_TYPE__trt__CreateOSD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateOSD() { _trt__CreateOSD::soap_default(NULL); }
	virtual ~_trt__CreateOSD() { }
};
#endif

#ifndef SOAP_TYPE__trt__CreateOSDResponse
#define SOAP_TYPE__trt__CreateOSDResponse (973)
/* trt:CreateOSDResponse */
class SOAP_CMAC _trt__CreateOSDResponse
{
public:
	std::string OSDToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 973; } /* = unique type id SOAP_TYPE__trt__CreateOSDResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateOSDResponse() { _trt__CreateOSDResponse::soap_default(NULL); }
	virtual ~_trt__CreateOSDResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__DeleteOSD
#define SOAP_TYPE__trt__DeleteOSD (974)
/* trt:DeleteOSD */
class SOAP_CMAC _trt__DeleteOSD
{
public:
	std::string OSDToken;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 974; } /* = unique type id SOAP_TYPE__trt__DeleteOSD */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteOSD() { _trt__DeleteOSD::soap_default(NULL); }
	virtual ~_trt__DeleteOSD() { }
};
#endif

#ifndef SOAP_TYPE__trt__DeleteOSDResponse
#define SOAP_TYPE__trt__DeleteOSDResponse (975)
/* trt:DeleteOSDResponse */
class SOAP_CMAC _trt__DeleteOSDResponse
{
public:
	std::vector<struct soap_dom_element >__any;	/* SOAP 1.2 RPC return element (when namespace qualified) */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 975; } /* = unique type id SOAP_TYPE__trt__DeleteOSDResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteOSDResponse() { _trt__DeleteOSDResponse::soap_default(NULL); }
	virtual ~_trt__DeleteOSDResponse() { }
};
#endif

#ifndef SOAP_TYPE_tse__Capabilities
#define SOAP_TYPE_tse__Capabilities (976)
/* tse:Capabilities */
class SOAP_CMAC tse__Capabilities
{
public:
	std::vector<struct soap_dom_element >__any;
	bool *MetadataSearch;	/* optional attribute */
	bool *GeneralStartEvents;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 976; } /* = unique type id SOAP_TYPE_tse__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tse__Capabilities() { tse__Capabilities::soap_default(NULL); }
	virtual ~tse__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetServiceCapabilities
#define SOAP_TYPE__tse__GetServiceCapabilities (977)
/* tse:GetServiceCapabilities */
class SOAP_CMAC _tse__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 977; } /* = unique type id SOAP_TYPE__tse__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetServiceCapabilities() { _tse__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tse__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tse__GetServiceCapabilitiesResponse (978)
/* tse:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tse__GetServiceCapabilitiesResponse
{
public:
	tse__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tse:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 978; } /* = unique type id SOAP_TYPE__tse__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetServiceCapabilitiesResponse() { _tse__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tse__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingSummary
#define SOAP_TYPE__tse__GetRecordingSummary (979)
/* tse:GetRecordingSummary */
class SOAP_CMAC _tse__GetRecordingSummary
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 979; } /* = unique type id SOAP_TYPE__tse__GetRecordingSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingSummary() { _tse__GetRecordingSummary::soap_default(NULL); }
	virtual ~_tse__GetRecordingSummary() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingSummaryResponse
#define SOAP_TYPE__tse__GetRecordingSummaryResponse (980)
/* tse:GetRecordingSummaryResponse */
class SOAP_CMAC _tse__GetRecordingSummaryResponse
{
public:
	tt__RecordingSummary *Summary;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingSummary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 980; } /* = unique type id SOAP_TYPE__tse__GetRecordingSummaryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingSummaryResponse() { _tse__GetRecordingSummaryResponse::soap_default(NULL); }
	virtual ~_tse__GetRecordingSummaryResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingInformation
#define SOAP_TYPE__tse__GetRecordingInformation (981)
/* tse:GetRecordingInformation */
class SOAP_CMAC _tse__GetRecordingInformation
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 981; } /* = unique type id SOAP_TYPE__tse__GetRecordingInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingInformation() { _tse__GetRecordingInformation::soap_default(NULL); }
	virtual ~_tse__GetRecordingInformation() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingInformationResponse
#define SOAP_TYPE__tse__GetRecordingInformationResponse (982)
/* tse:GetRecordingInformationResponse */
class SOAP_CMAC _tse__GetRecordingInformationResponse
{
public:
	tt__RecordingInformation *RecordingInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 982; } /* = unique type id SOAP_TYPE__tse__GetRecordingInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingInformationResponse() { _tse__GetRecordingInformationResponse::soap_default(NULL); }
	virtual ~_tse__GetRecordingInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetMediaAttributes
#define SOAP_TYPE__tse__GetMediaAttributes (983)
/* tse:GetMediaAttributes */
class SOAP_CMAC _tse__GetMediaAttributes
{
public:
	std::vector<std::string >RecordingTokens;	/* optional element of type tt:RecordingReference */
	time_t Time;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 983; } /* = unique type id SOAP_TYPE__tse__GetMediaAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetMediaAttributes() { _tse__GetMediaAttributes::soap_default(NULL); }
	virtual ~_tse__GetMediaAttributes() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetMediaAttributesResponse
#define SOAP_TYPE__tse__GetMediaAttributesResponse (984)
/* tse:GetMediaAttributesResponse */
class SOAP_CMAC _tse__GetMediaAttributesResponse
{
public:
	std::vector<tt__MediaAttributes * >MediaAttributes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:MediaAttributes */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 984; } /* = unique type id SOAP_TYPE__tse__GetMediaAttributesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetMediaAttributesResponse() { _tse__GetMediaAttributesResponse::soap_default(NULL); }
	virtual ~_tse__GetMediaAttributesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindRecordings
#define SOAP_TYPE__tse__FindRecordings (985)
/* tse:FindRecordings */
class SOAP_CMAC _tse__FindRecordings
{
public:
	tt__SearchScope *Scope;	/* required element of type tt:SearchScope */
	int *MaxMatches;	/* optional element of type xsd:int */
	LONG64 KeepAliveTime;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 985; } /* = unique type id SOAP_TYPE__tse__FindRecordings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindRecordings() { _tse__FindRecordings::soap_default(NULL); }
	virtual ~_tse__FindRecordings() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindRecordingsResponse
#define SOAP_TYPE__tse__FindRecordingsResponse (986)
/* tse:FindRecordingsResponse */
class SOAP_CMAC _tse__FindRecordingsResponse
{
public:
	std::string SearchToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 986; } /* = unique type id SOAP_TYPE__tse__FindRecordingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindRecordingsResponse() { _tse__FindRecordingsResponse::soap_default(NULL); }
	virtual ~_tse__FindRecordingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingSearchResults
#define SOAP_TYPE__tse__GetRecordingSearchResults (987)
/* tse:GetRecordingSearchResults */
class SOAP_CMAC _tse__GetRecordingSearchResults
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	int *MinResults;	/* optional element of type xsd:int */
	int *MaxResults;	/* optional element of type xsd:int */
	LONG64 *WaitTime;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 987; } /* = unique type id SOAP_TYPE__tse__GetRecordingSearchResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingSearchResults() { _tse__GetRecordingSearchResults::soap_default(NULL); }
	virtual ~_tse__GetRecordingSearchResults() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingSearchResultsResponse
#define SOAP_TYPE__tse__GetRecordingSearchResultsResponse (988)
/* tse:GetRecordingSearchResultsResponse */
class SOAP_CMAC _tse__GetRecordingSearchResultsResponse
{
public:
	tt__FindRecordingResultList *ResultList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:FindRecordingResultList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 988; } /* = unique type id SOAP_TYPE__tse__GetRecordingSearchResultsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingSearchResultsResponse() { _tse__GetRecordingSearchResultsResponse::soap_default(NULL); }
	virtual ~_tse__GetRecordingSearchResultsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindEvents
#define SOAP_TYPE__tse__FindEvents (989)
/* tse:FindEvents */
class SOAP_CMAC _tse__FindEvents
{
public:
	time_t StartPoint;	/* required element of type xsd:dateTime */
	time_t *EndPoint;	/* optional element of type xsd:dateTime */
	tt__SearchScope *Scope;	/* required element of type tt:SearchScope */
	class tt__EventFilter *SearchFilter;	/* required element of type tt:EventFilter */
	bool IncludeStartState;	/* required element of type xsd:boolean */
	int *MaxMatches;	/* optional element of type xsd:int */
	LONG64 KeepAliveTime;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 989; } /* = unique type id SOAP_TYPE__tse__FindEvents */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindEvents() { _tse__FindEvents::soap_default(NULL); }
	virtual ~_tse__FindEvents() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindEventsResponse
#define SOAP_TYPE__tse__FindEventsResponse (990)
/* tse:FindEventsResponse */
class SOAP_CMAC _tse__FindEventsResponse
{
public:
	std::string SearchToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 990; } /* = unique type id SOAP_TYPE__tse__FindEventsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindEventsResponse() { _tse__FindEventsResponse::soap_default(NULL); }
	virtual ~_tse__FindEventsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetEventSearchResults
#define SOAP_TYPE__tse__GetEventSearchResults (991)
/* tse:GetEventSearchResults */
class SOAP_CMAC _tse__GetEventSearchResults
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	int *MinResults;	/* optional element of type xsd:int */
	int *MaxResults;	/* optional element of type xsd:int */
	LONG64 *WaitTime;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 991; } /* = unique type id SOAP_TYPE__tse__GetEventSearchResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetEventSearchResults() { _tse__GetEventSearchResults::soap_default(NULL); }
	virtual ~_tse__GetEventSearchResults() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetEventSearchResultsResponse
#define SOAP_TYPE__tse__GetEventSearchResultsResponse (992)
/* tse:GetEventSearchResultsResponse */
class SOAP_CMAC _tse__GetEventSearchResultsResponse
{
public:
	tt__FindEventResultList *ResultList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:FindEventResultList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 992; } /* = unique type id SOAP_TYPE__tse__GetEventSearchResultsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetEventSearchResultsResponse() { _tse__GetEventSearchResultsResponse::soap_default(NULL); }
	virtual ~_tse__GetEventSearchResultsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindPTZPosition
#define SOAP_TYPE__tse__FindPTZPosition (993)
/* tse:FindPTZPosition */
class SOAP_CMAC _tse__FindPTZPosition
{
public:
	time_t StartPoint;	/* required element of type xsd:dateTime */
	time_t *EndPoint;	/* optional element of type xsd:dateTime */
	tt__SearchScope *Scope;	/* required element of type tt:SearchScope */
	tt__PTZPositionFilter *SearchFilter;	/* required element of type tt:PTZPositionFilter */
	int *MaxMatches;	/* optional element of type xsd:int */
	LONG64 KeepAliveTime;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 993; } /* = unique type id SOAP_TYPE__tse__FindPTZPosition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindPTZPosition() { _tse__FindPTZPosition::soap_default(NULL); }
	virtual ~_tse__FindPTZPosition() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindPTZPositionResponse
#define SOAP_TYPE__tse__FindPTZPositionResponse (994)
/* tse:FindPTZPositionResponse */
class SOAP_CMAC _tse__FindPTZPositionResponse
{
public:
	std::string SearchToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 994; } /* = unique type id SOAP_TYPE__tse__FindPTZPositionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindPTZPositionResponse() { _tse__FindPTZPositionResponse::soap_default(NULL); }
	virtual ~_tse__FindPTZPositionResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetPTZPositionSearchResults
#define SOAP_TYPE__tse__GetPTZPositionSearchResults (995)
/* tse:GetPTZPositionSearchResults */
class SOAP_CMAC _tse__GetPTZPositionSearchResults
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	int *MinResults;	/* optional element of type xsd:int */
	int *MaxResults;	/* optional element of type xsd:int */
	LONG64 *WaitTime;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 995; } /* = unique type id SOAP_TYPE__tse__GetPTZPositionSearchResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetPTZPositionSearchResults() { _tse__GetPTZPositionSearchResults::soap_default(NULL); }
	virtual ~_tse__GetPTZPositionSearchResults() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetPTZPositionSearchResultsResponse
#define SOAP_TYPE__tse__GetPTZPositionSearchResultsResponse (996)
/* tse:GetPTZPositionSearchResultsResponse */
class SOAP_CMAC _tse__GetPTZPositionSearchResultsResponse
{
public:
	tt__FindPTZPositionResultList *ResultList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:FindPTZPositionResultList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 996; } /* = unique type id SOAP_TYPE__tse__GetPTZPositionSearchResultsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetPTZPositionSearchResultsResponse() { _tse__GetPTZPositionSearchResultsResponse::soap_default(NULL); }
	virtual ~_tse__GetPTZPositionSearchResultsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindMetadata
#define SOAP_TYPE__tse__FindMetadata (997)
/* tse:FindMetadata */
class SOAP_CMAC _tse__FindMetadata
{
public:
	time_t StartPoint;	/* required element of type xsd:dateTime */
	time_t *EndPoint;	/* optional element of type xsd:dateTime */
	tt__SearchScope *Scope;	/* required element of type tt:SearchScope */
	tt__MetadataFilter *MetadataFilter;	/* required element of type tt:MetadataFilter */
	int *MaxMatches;	/* optional element of type xsd:int */
	LONG64 KeepAliveTime;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 997; } /* = unique type id SOAP_TYPE__tse__FindMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindMetadata() { _tse__FindMetadata::soap_default(NULL); }
	virtual ~_tse__FindMetadata() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindMetadataResponse
#define SOAP_TYPE__tse__FindMetadataResponse (998)
/* tse:FindMetadataResponse */
class SOAP_CMAC _tse__FindMetadataResponse
{
public:
	std::string SearchToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 998; } /* = unique type id SOAP_TYPE__tse__FindMetadataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindMetadataResponse() { _tse__FindMetadataResponse::soap_default(NULL); }
	virtual ~_tse__FindMetadataResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetMetadataSearchResults
#define SOAP_TYPE__tse__GetMetadataSearchResults (999)
/* tse:GetMetadataSearchResults */
class SOAP_CMAC _tse__GetMetadataSearchResults
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	int *MinResults;	/* optional element of type xsd:int */
	int *MaxResults;	/* optional element of type xsd:int */
	LONG64 *WaitTime;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 999; } /* = unique type id SOAP_TYPE__tse__GetMetadataSearchResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetMetadataSearchResults() { _tse__GetMetadataSearchResults::soap_default(NULL); }
	virtual ~_tse__GetMetadataSearchResults() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetMetadataSearchResultsResponse
#define SOAP_TYPE__tse__GetMetadataSearchResultsResponse (1000)
/* tse:GetMetadataSearchResultsResponse */
class SOAP_CMAC _tse__GetMetadataSearchResultsResponse
{
public:
	tt__FindMetadataResultList *ResultList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:FindMetadataResultList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1000; } /* = unique type id SOAP_TYPE__tse__GetMetadataSearchResultsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetMetadataSearchResultsResponse() { _tse__GetMetadataSearchResultsResponse::soap_default(NULL); }
	virtual ~_tse__GetMetadataSearchResultsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetSearchState
#define SOAP_TYPE__tse__GetSearchState (1001)
/* tse:GetSearchState */
class SOAP_CMAC _tse__GetSearchState
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1001; } /* = unique type id SOAP_TYPE__tse__GetSearchState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetSearchState() { _tse__GetSearchState::soap_default(NULL); }
	virtual ~_tse__GetSearchState() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetSearchStateResponse
#define SOAP_TYPE__tse__GetSearchStateResponse (1002)
/* tse:GetSearchStateResponse */
class SOAP_CMAC _tse__GetSearchStateResponse
{
public:
	enum tt__SearchState State;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SearchState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1002; } /* = unique type id SOAP_TYPE__tse__GetSearchStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetSearchStateResponse() { _tse__GetSearchStateResponse::soap_default(NULL); }
	virtual ~_tse__GetSearchStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__EndSearch
#define SOAP_TYPE__tse__EndSearch (1003)
/* tse:EndSearch */
class SOAP_CMAC _tse__EndSearch
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1003; } /* = unique type id SOAP_TYPE__tse__EndSearch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__EndSearch() { _tse__EndSearch::soap_default(NULL); }
	virtual ~_tse__EndSearch() { }
};
#endif

#ifndef SOAP_TYPE__tse__EndSearchResponse
#define SOAP_TYPE__tse__EndSearchResponse (1004)
/* tse:EndSearchResponse */
class SOAP_CMAC _tse__EndSearchResponse
{
public:
	time_t Endpoint;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1004; } /* = unique type id SOAP_TYPE__tse__EndSearchResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__EndSearchResponse() { _tse__EndSearchResponse::soap_default(NULL); }
	virtual ~_tse__EndSearchResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__Service_Capabilities
#define SOAP_TYPE__tds__Service_Capabilities (1901)
/* tds:Service-Capabilities */
class SOAP_CMAC _tds__Service_Capabilities
{
public:
	struct soap_dom_element __any;	/* external */
public:
	virtual int soap_type() const { return 1901; } /* = unique type id SOAP_TYPE__tds__Service_Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__Service_Capabilities() { _tds__Service_Capabilities::soap_default(NULL); }
	virtual ~_tds__Service_Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tds__Service
#define SOAP_TYPE_tds__Service (1005)
/* tds:Service */
class SOAP_CMAC tds__Service
{
public:
	std::string Namespace;	/* required element of type xsd:anyURI */
	std::string XAddr;	/* required element of type xsd:anyURI */
	_tds__Service_Capabilities *Capabilities;	/* optional element of type tds:Service-Capabilities */
	tt__OnvifVersion *Version;	/* required element of type tt:OnvifVersion */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1005; } /* = unique type id SOAP_TYPE_tds__Service */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__Service() { tds__Service::soap_default(NULL); }
	virtual ~tds__Service() { }
};
#endif

#ifndef SOAP_TYPE_tds__DeviceServiceCapabilities
#define SOAP_TYPE_tds__DeviceServiceCapabilities (1006)
/* tds:DeviceServiceCapabilities */
class SOAP_CMAC tds__DeviceServiceCapabilities
{
public:
	class tds__NetworkCapabilities *Network;	/* required element of type tds:NetworkCapabilities */
	class tds__SecurityCapabilities *Security;	/* required element of type tds:SecurityCapabilities */
	class tds__SystemCapabilities *System;	/* required element of type tds:SystemCapabilities */
	class tds__MiscCapabilities *Misc;	/* optional element of type tds:MiscCapabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1006; } /* = unique type id SOAP_TYPE_tds__DeviceServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__DeviceServiceCapabilities() { tds__DeviceServiceCapabilities::soap_default(NULL); }
	virtual ~tds__DeviceServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tds__NetworkCapabilities
#define SOAP_TYPE_tds__NetworkCapabilities (1007)
/* tds:NetworkCapabilities */
class SOAP_CMAC tds__NetworkCapabilities
{
public:
	bool *IPFilter;	/* optional attribute */
	bool *ZeroConfiguration;	/* optional attribute */
	bool *IPVersion6;	/* optional attribute */
	bool *DynDNS;	/* optional attribute */
	bool *Dot11Configuration;	/* optional attribute */
	int *Dot1XConfigurations;	/* optional attribute */
	bool *HostnameFromDHCP;	/* optional attribute */
	int *NTP;	/* optional attribute */
	bool *DHCPv6;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1007; } /* = unique type id SOAP_TYPE_tds__NetworkCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__NetworkCapabilities() { tds__NetworkCapabilities::soap_default(NULL); }
	virtual ~tds__NetworkCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tds__SecurityCapabilities
#define SOAP_TYPE_tds__SecurityCapabilities (1008)
/* tds:SecurityCapabilities */
class SOAP_CMAC tds__SecurityCapabilities
{
public:
	bool *TLS1_x002e0;	/* optional attribute */
	bool *TLS1_x002e1;	/* optional attribute */
	bool *TLS1_x002e2;	/* optional attribute */
	bool *OnboardKeyGeneration;	/* optional attribute */
	bool *AccessPolicyConfig;	/* optional attribute */
	bool *DefaultAccessPolicy;	/* optional attribute */
	bool *Dot1X;	/* optional attribute */
	bool *RemoteUserHandling;	/* optional attribute */
	bool *X_x002e509Token;	/* optional attribute */
	bool *SAMLToken;	/* optional attribute */
	bool *KerberosToken;	/* optional attribute */
	bool *UsernameToken;	/* optional attribute */
	bool *HttpDigest;	/* optional attribute */
	bool *RELToken;	/* optional attribute */
	std::string *SupportedEAPMethods;	/* optional attribute */
	int *MaxUsers;	/* optional attribute */
	int *MaxUserNameLength;	/* optional attribute */
	int *MaxPasswordLength;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1008; } /* = unique type id SOAP_TYPE_tds__SecurityCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__SecurityCapabilities() { tds__SecurityCapabilities::soap_default(NULL); }
	virtual ~tds__SecurityCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tds__SystemCapabilities
#define SOAP_TYPE_tds__SystemCapabilities (1009)
/* tds:SystemCapabilities */
class SOAP_CMAC tds__SystemCapabilities
{
public:
	bool *DiscoveryResolve;	/* optional attribute */
	bool *DiscoveryBye;	/* optional attribute */
	bool *RemoteDiscovery;	/* optional attribute */
	bool *SystemBackup;	/* optional attribute */
	bool *SystemLogging;	/* optional attribute */
	bool *FirmwareUpgrade;	/* optional attribute */
	bool *HttpFirmwareUpgrade;	/* optional attribute */
	bool *HttpSystemBackup;	/* optional attribute */
	bool *HttpSystemLogging;	/* optional attribute */
	bool *HttpSupportInformation;	/* optional attribute */
	bool *StorageConfiguration;	/* optional attribute */
	int *MaxStorageConfigurations;	/* optional attribute */
	int *GeoLocationEntries;	/* optional attribute */
	std::string *AutoGeo;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1009; } /* = unique type id SOAP_TYPE_tds__SystemCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__SystemCapabilities() { tds__SystemCapabilities::soap_default(NULL); }
	virtual ~tds__SystemCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tds__MiscCapabilities
#define SOAP_TYPE_tds__MiscCapabilities (1010)
/* tds:MiscCapabilities */
class SOAP_CMAC tds__MiscCapabilities
{
public:
	std::string *AuxiliaryCommands;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1010; } /* = unique type id SOAP_TYPE_tds__MiscCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__MiscCapabilities() { tds__MiscCapabilities::soap_default(NULL); }
	virtual ~tds__MiscCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tds__UserCredential_Extension
#define SOAP_TYPE__tds__UserCredential_Extension (1908)
/* tds:UserCredential-Extension */
class SOAP_CMAC _tds__UserCredential_Extension
{
public:
	std::vector<struct soap_dom_element >__any;
public:
	virtual int soap_type() const { return 1908; } /* = unique type id SOAP_TYPE__tds__UserCredential_Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__UserCredential_Extension() { _tds__UserCredential_Extension::soap_default(NULL); }
	virtual ~_tds__UserCredential_Extension() { }
};
#endif

#ifndef SOAP_TYPE_tds__UserCredential
#define SOAP_TYPE_tds__UserCredential (1011)
/* tds:UserCredential */
class SOAP_CMAC tds__UserCredential
{
public:
	std::string UserName;	/* required element of type xsd:string */
	std::string *Password;	/* optional element of type xsd:string */
	_tds__UserCredential_Extension *Extension;	/* optional element of type tds:UserCredential-Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1011; } /* = unique type id SOAP_TYPE_tds__UserCredential */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__UserCredential() { tds__UserCredential::soap_default(NULL); }
	virtual ~tds__UserCredential() { }
};
#endif

#ifndef SOAP_TYPE__tds__StorageConfigurationData_Extension
#define SOAP_TYPE__tds__StorageConfigurationData_Extension (1911)
/* tds:StorageConfigurationData-Extension */
class SOAP_CMAC _tds__StorageConfigurationData_Extension
{
public:
	std::vector<struct soap_dom_element >__any;
public:
	virtual int soap_type() const { return 1911; } /* = unique type id SOAP_TYPE__tds__StorageConfigurationData_Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__StorageConfigurationData_Extension() { _tds__StorageConfigurationData_Extension::soap_default(NULL); }
	virtual ~_tds__StorageConfigurationData_Extension() { }
};
#endif

#ifndef SOAP_TYPE_tds__StorageConfigurationData
#define SOAP_TYPE_tds__StorageConfigurationData (1012)
/* tds:StorageConfigurationData */
class SOAP_CMAC tds__StorageConfigurationData
{
public:
	std::string *LocalPath;	/* optional element of type xsd:anyURI */
	std::string *StorageUri;	/* optional element of type xsd:anyURI */
	tds__UserCredential *User;	/* optional element of type tds:UserCredential */
	_tds__StorageConfigurationData_Extension *Extension;	/* optional element of type tds:StorageConfigurationData-Extension */
	std::string type;	/* required attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1012; } /* = unique type id SOAP_TYPE_tds__StorageConfigurationData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__StorageConfigurationData() { tds__StorageConfigurationData::soap_default(NULL); }
	virtual ~tds__StorageConfigurationData() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetServices
#define SOAP_TYPE__tds__GetServices (1014)
/* tds:GetServices */
class SOAP_CMAC _tds__GetServices
{
public:
	bool IncludeCapability;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1014; } /* = unique type id SOAP_TYPE__tds__GetServices */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetServices() { _tds__GetServices::soap_default(NULL); }
	virtual ~_tds__GetServices() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetServicesResponse
#define SOAP_TYPE__tds__GetServicesResponse (1015)
/* tds:GetServicesResponse */
class SOAP_CMAC _tds__GetServicesResponse
{
public:
	std::vector<tds__Service * >Service;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tds:Service */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1015; } /* = unique type id SOAP_TYPE__tds__GetServicesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetServicesResponse() { _tds__GetServicesResponse::soap_default(NULL); }
	virtual ~_tds__GetServicesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetServiceCapabilities
#define SOAP_TYPE__tds__GetServiceCapabilities (1016)
/* tds:GetServiceCapabilities */
class SOAP_CMAC _tds__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1016; } /* = unique type id SOAP_TYPE__tds__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetServiceCapabilities() { _tds__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tds__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tds__GetServiceCapabilitiesResponse (1017)
/* tds:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tds__GetServiceCapabilitiesResponse
{
public:
	tds__DeviceServiceCapabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tds:DeviceServiceCapabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1017; } /* = unique type id SOAP_TYPE__tds__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetServiceCapabilitiesResponse() { _tds__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tds__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDeviceInformation
#define SOAP_TYPE__tds__GetDeviceInformation (1018)
/* tds:GetDeviceInformation */
class SOAP_CMAC _tds__GetDeviceInformation
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1018; } /* = unique type id SOAP_TYPE__tds__GetDeviceInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDeviceInformation() { _tds__GetDeviceInformation::soap_default(NULL); }
	virtual ~_tds__GetDeviceInformation() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDeviceInformationResponse
#define SOAP_TYPE__tds__GetDeviceInformationResponse (1019)
/* tds:GetDeviceInformationResponse */
class SOAP_CMAC _tds__GetDeviceInformationResponse
{
public:
	std::string Manufacturer;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string Model;	/* required element of type xsd:string */
	std::string FirmwareVersion;	/* required element of type xsd:string */
	std::string SerialNumber;	/* required element of type xsd:string */
	std::string HardwareId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1019; } /* = unique type id SOAP_TYPE__tds__GetDeviceInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDeviceInformationResponse() { _tds__GetDeviceInformationResponse::soap_default(NULL); }
	virtual ~_tds__GetDeviceInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetSystemDateAndTime
#define SOAP_TYPE__tds__SetSystemDateAndTime (1020)
/* tds:SetSystemDateAndTime */
class SOAP_CMAC _tds__SetSystemDateAndTime
{
public:
	enum tt__SetDateTimeType DateTimeType;	/* required element of type tt:SetDateTimeType */
	bool DaylightSavings;	/* required element of type xsd:boolean */
	tt__TimeZone *TimeZone;	/* optional element of type tt:TimeZone */
	tt__DateTime *UTCDateTime;	/* optional element of type tt:DateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1020; } /* = unique type id SOAP_TYPE__tds__SetSystemDateAndTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetSystemDateAndTime() { _tds__SetSystemDateAndTime::soap_default(NULL); }
	virtual ~_tds__SetSystemDateAndTime() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetSystemDateAndTimeResponse
#define SOAP_TYPE__tds__SetSystemDateAndTimeResponse (1021)
/* tds:SetSystemDateAndTimeResponse */
class SOAP_CMAC _tds__SetSystemDateAndTimeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1021; } /* = unique type id SOAP_TYPE__tds__SetSystemDateAndTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetSystemDateAndTimeResponse() { _tds__SetSystemDateAndTimeResponse::soap_default(NULL); }
	virtual ~_tds__SetSystemDateAndTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemDateAndTime
#define SOAP_TYPE__tds__GetSystemDateAndTime (1022)
/* tds:GetSystemDateAndTime */
class SOAP_CMAC _tds__GetSystemDateAndTime
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1022; } /* = unique type id SOAP_TYPE__tds__GetSystemDateAndTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemDateAndTime() { _tds__GetSystemDateAndTime::soap_default(NULL); }
	virtual ~_tds__GetSystemDateAndTime() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemDateAndTimeResponse
#define SOAP_TYPE__tds__GetSystemDateAndTimeResponse (1023)
/* tds:GetSystemDateAndTimeResponse */
class SOAP_CMAC _tds__GetSystemDateAndTimeResponse
{
public:
	tt__SystemDateTime *SystemDateAndTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SystemDateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1023; } /* = unique type id SOAP_TYPE__tds__GetSystemDateAndTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemDateAndTimeResponse() { _tds__GetSystemDateAndTimeResponse::soap_default(NULL); }
	virtual ~_tds__GetSystemDateAndTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetSystemFactoryDefault
#define SOAP_TYPE__tds__SetSystemFactoryDefault (1024)
/* tds:SetSystemFactoryDefault */
class SOAP_CMAC _tds__SetSystemFactoryDefault
{
public:
	enum tt__FactoryDefaultType FactoryDefault;	/* required element of type tt:FactoryDefaultType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1024; } /* = unique type id SOAP_TYPE__tds__SetSystemFactoryDefault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetSystemFactoryDefault() { _tds__SetSystemFactoryDefault::soap_default(NULL); }
	virtual ~_tds__SetSystemFactoryDefault() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetSystemFactoryDefaultResponse
#define SOAP_TYPE__tds__SetSystemFactoryDefaultResponse (1025)
/* tds:SetSystemFactoryDefaultResponse */
class SOAP_CMAC _tds__SetSystemFactoryDefaultResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1025; } /* = unique type id SOAP_TYPE__tds__SetSystemFactoryDefaultResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetSystemFactoryDefaultResponse() { _tds__SetSystemFactoryDefaultResponse::soap_default(NULL); }
	virtual ~_tds__SetSystemFactoryDefaultResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__UpgradeSystemFirmware
#define SOAP_TYPE__tds__UpgradeSystemFirmware (1026)
/* tds:UpgradeSystemFirmware */
class SOAP_CMAC _tds__UpgradeSystemFirmware
{
public:
	tt__AttachmentData *Firmware;	/* required element of type tt:AttachmentData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1026; } /* = unique type id SOAP_TYPE__tds__UpgradeSystemFirmware */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__UpgradeSystemFirmware() { _tds__UpgradeSystemFirmware::soap_default(NULL); }
	virtual ~_tds__UpgradeSystemFirmware() { }
};
#endif

#ifndef SOAP_TYPE__tds__UpgradeSystemFirmwareResponse
#define SOAP_TYPE__tds__UpgradeSystemFirmwareResponse (1027)
/* tds:UpgradeSystemFirmwareResponse */
class SOAP_CMAC _tds__UpgradeSystemFirmwareResponse
{
public:
	std::string *Message;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1027; } /* = unique type id SOAP_TYPE__tds__UpgradeSystemFirmwareResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__UpgradeSystemFirmwareResponse() { _tds__UpgradeSystemFirmwareResponse::soap_default(NULL); }
	virtual ~_tds__UpgradeSystemFirmwareResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SystemReboot
#define SOAP_TYPE__tds__SystemReboot (1028)
/* tds:SystemReboot */
class SOAP_CMAC _tds__SystemReboot
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1028; } /* = unique type id SOAP_TYPE__tds__SystemReboot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SystemReboot() { _tds__SystemReboot::soap_default(NULL); }
	virtual ~_tds__SystemReboot() { }
};
#endif

#ifndef SOAP_TYPE__tds__SystemRebootResponse
#define SOAP_TYPE__tds__SystemRebootResponse (1029)
/* tds:SystemRebootResponse */
class SOAP_CMAC _tds__SystemRebootResponse
{
public:
	std::string Message;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1029; } /* = unique type id SOAP_TYPE__tds__SystemRebootResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SystemRebootResponse() { _tds__SystemRebootResponse::soap_default(NULL); }
	virtual ~_tds__SystemRebootResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__RestoreSystem
#define SOAP_TYPE__tds__RestoreSystem (1030)
/* tds:RestoreSystem */
class SOAP_CMAC _tds__RestoreSystem
{
public:
	std::vector<tt__BackupFile * >BackupFiles;	/* required element of type tt:BackupFile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1030; } /* = unique type id SOAP_TYPE__tds__RestoreSystem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RestoreSystem() { _tds__RestoreSystem::soap_default(NULL); }
	virtual ~_tds__RestoreSystem() { }
};
#endif

#ifndef SOAP_TYPE__tds__RestoreSystemResponse
#define SOAP_TYPE__tds__RestoreSystemResponse (1031)
/* tds:RestoreSystemResponse */
class SOAP_CMAC _tds__RestoreSystemResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1031; } /* = unique type id SOAP_TYPE__tds__RestoreSystemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RestoreSystemResponse() { _tds__RestoreSystemResponse::soap_default(NULL); }
	virtual ~_tds__RestoreSystemResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemBackup
#define SOAP_TYPE__tds__GetSystemBackup (1032)
/* tds:GetSystemBackup */
class SOAP_CMAC _tds__GetSystemBackup
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1032; } /* = unique type id SOAP_TYPE__tds__GetSystemBackup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemBackup() { _tds__GetSystemBackup::soap_default(NULL); }
	virtual ~_tds__GetSystemBackup() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemBackupResponse
#define SOAP_TYPE__tds__GetSystemBackupResponse (1033)
/* tds:GetSystemBackupResponse */
class SOAP_CMAC _tds__GetSystemBackupResponse
{
public:
	std::vector<tt__BackupFile * >BackupFiles;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:BackupFile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1033; } /* = unique type id SOAP_TYPE__tds__GetSystemBackupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemBackupResponse() { _tds__GetSystemBackupResponse::soap_default(NULL); }
	virtual ~_tds__GetSystemBackupResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemSupportInformation
#define SOAP_TYPE__tds__GetSystemSupportInformation (1034)
/* tds:GetSystemSupportInformation */
class SOAP_CMAC _tds__GetSystemSupportInformation
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1034; } /* = unique type id SOAP_TYPE__tds__GetSystemSupportInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemSupportInformation() { _tds__GetSystemSupportInformation::soap_default(NULL); }
	virtual ~_tds__GetSystemSupportInformation() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemSupportInformationResponse
#define SOAP_TYPE__tds__GetSystemSupportInformationResponse (1035)
/* tds:GetSystemSupportInformationResponse */
class SOAP_CMAC _tds__GetSystemSupportInformationResponse
{
public:
	tt__SupportInformation *SupportInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SupportInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1035; } /* = unique type id SOAP_TYPE__tds__GetSystemSupportInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemSupportInformationResponse() { _tds__GetSystemSupportInformationResponse::soap_default(NULL); }
	virtual ~_tds__GetSystemSupportInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemLog
#define SOAP_TYPE__tds__GetSystemLog (1036)
/* tds:GetSystemLog */
class SOAP_CMAC _tds__GetSystemLog
{
public:
	enum tt__SystemLogType LogType;	/* required element of type tt:SystemLogType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1036; } /* = unique type id SOAP_TYPE__tds__GetSystemLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemLog() { _tds__GetSystemLog::soap_default(NULL); }
	virtual ~_tds__GetSystemLog() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemLogResponse
#define SOAP_TYPE__tds__GetSystemLogResponse (1037)
/* tds:GetSystemLogResponse */
class SOAP_CMAC _tds__GetSystemLogResponse
{
public:
	tt__SystemLog *SystemLog;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SystemLog */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1037; } /* = unique type id SOAP_TYPE__tds__GetSystemLogResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemLogResponse() { _tds__GetSystemLogResponse::soap_default(NULL); }
	virtual ~_tds__GetSystemLogResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetScopes
#define SOAP_TYPE__tds__GetScopes (1038)
/* tds:GetScopes */
class SOAP_CMAC _tds__GetScopes
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1038; } /* = unique type id SOAP_TYPE__tds__GetScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetScopes() { _tds__GetScopes::soap_default(NULL); }
	virtual ~_tds__GetScopes() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetScopesResponse
#define SOAP_TYPE__tds__GetScopesResponse (1039)
/* tds:GetScopesResponse */
class SOAP_CMAC _tds__GetScopesResponse
{
public:
	std::vector<tt__Scope * >Scopes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Scope */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1039; } /* = unique type id SOAP_TYPE__tds__GetScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetScopesResponse() { _tds__GetScopesResponse::soap_default(NULL); }
	virtual ~_tds__GetScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetScopes
#define SOAP_TYPE__tds__SetScopes (1040)
/* tds:SetScopes */
class SOAP_CMAC _tds__SetScopes
{
public:
	std::vector<std::string >Scopes;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1040; } /* = unique type id SOAP_TYPE__tds__SetScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetScopes() { _tds__SetScopes::soap_default(NULL); }
	virtual ~_tds__SetScopes() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetScopesResponse
#define SOAP_TYPE__tds__SetScopesResponse (1041)
/* tds:SetScopesResponse */
class SOAP_CMAC _tds__SetScopesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1041; } /* = unique type id SOAP_TYPE__tds__SetScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetScopesResponse() { _tds__SetScopesResponse::soap_default(NULL); }
	virtual ~_tds__SetScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__AddScopes
#define SOAP_TYPE__tds__AddScopes (1042)
/* tds:AddScopes */
class SOAP_CMAC _tds__AddScopes
{
public:
	std::vector<std::string >ScopeItem;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1042; } /* = unique type id SOAP_TYPE__tds__AddScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__AddScopes() { _tds__AddScopes::soap_default(NULL); }
	virtual ~_tds__AddScopes() { }
};
#endif

#ifndef SOAP_TYPE__tds__AddScopesResponse
#define SOAP_TYPE__tds__AddScopesResponse (1043)
/* tds:AddScopesResponse */
class SOAP_CMAC _tds__AddScopesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1043; } /* = unique type id SOAP_TYPE__tds__AddScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__AddScopesResponse() { _tds__AddScopesResponse::soap_default(NULL); }
	virtual ~_tds__AddScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__RemoveScopes
#define SOAP_TYPE__tds__RemoveScopes (1044)
/* tds:RemoveScopes */
class SOAP_CMAC _tds__RemoveScopes
{
public:
	std::vector<std::string >ScopeItem;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1044; } /* = unique type id SOAP_TYPE__tds__RemoveScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RemoveScopes() { _tds__RemoveScopes::soap_default(NULL); }
	virtual ~_tds__RemoveScopes() { }
};
#endif

#ifndef SOAP_TYPE__tds__RemoveScopesResponse
#define SOAP_TYPE__tds__RemoveScopesResponse (1045)
/* tds:RemoveScopesResponse */
class SOAP_CMAC _tds__RemoveScopesResponse
{
public:
	std::vector<std::string >ScopeItem;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1045; } /* = unique type id SOAP_TYPE__tds__RemoveScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RemoveScopesResponse() { _tds__RemoveScopesResponse::soap_default(NULL); }
	virtual ~_tds__RemoveScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDiscoveryMode
#define SOAP_TYPE__tds__GetDiscoveryMode (1046)
/* tds:GetDiscoveryMode */
class SOAP_CMAC _tds__GetDiscoveryMode
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1046; } /* = unique type id SOAP_TYPE__tds__GetDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDiscoveryMode() { _tds__GetDiscoveryMode::soap_default(NULL); }
	virtual ~_tds__GetDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDiscoveryModeResponse
#define SOAP_TYPE__tds__GetDiscoveryModeResponse (1047)
/* tds:GetDiscoveryModeResponse */
class SOAP_CMAC _tds__GetDiscoveryModeResponse
{
public:
	enum tt__DiscoveryMode DiscoveryMode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1047; } /* = unique type id SOAP_TYPE__tds__GetDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDiscoveryModeResponse() { _tds__GetDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_tds__GetDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDiscoveryMode
#define SOAP_TYPE__tds__SetDiscoveryMode (1048)
/* tds:SetDiscoveryMode */
class SOAP_CMAC _tds__SetDiscoveryMode
{
public:
	enum tt__DiscoveryMode DiscoveryMode;	/* required element of type tt:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1048; } /* = unique type id SOAP_TYPE__tds__SetDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDiscoveryMode() { _tds__SetDiscoveryMode::soap_default(NULL); }
	virtual ~_tds__SetDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDiscoveryModeResponse
#define SOAP_TYPE__tds__SetDiscoveryModeResponse (1049)
/* tds:SetDiscoveryModeResponse */
class SOAP_CMAC _tds__SetDiscoveryModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1049; } /* = unique type id SOAP_TYPE__tds__SetDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDiscoveryModeResponse() { _tds__SetDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_tds__SetDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryMode
#define SOAP_TYPE__tds__GetRemoteDiscoveryMode (1050)
/* tds:GetRemoteDiscoveryMode */
class SOAP_CMAC _tds__GetRemoteDiscoveryMode
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1050; } /* = unique type id SOAP_TYPE__tds__GetRemoteDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRemoteDiscoveryMode() { _tds__GetRemoteDiscoveryMode::soap_default(NULL); }
	virtual ~_tds__GetRemoteDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse
#define SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse (1051)
/* tds:GetRemoteDiscoveryModeResponse */
class SOAP_CMAC _tds__GetRemoteDiscoveryModeResponse
{
public:
	enum tt__DiscoveryMode RemoteDiscoveryMode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1051; } /* = unique type id SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRemoteDiscoveryModeResponse() { _tds__GetRemoteDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_tds__GetRemoteDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryMode
#define SOAP_TYPE__tds__SetRemoteDiscoveryMode (1052)
/* tds:SetRemoteDiscoveryMode */
class SOAP_CMAC _tds__SetRemoteDiscoveryMode
{
public:
	enum tt__DiscoveryMode RemoteDiscoveryMode;	/* required element of type tt:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1052; } /* = unique type id SOAP_TYPE__tds__SetRemoteDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRemoteDiscoveryMode() { _tds__SetRemoteDiscoveryMode::soap_default(NULL); }
	virtual ~_tds__SetRemoteDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse
#define SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse (1053)
/* tds:SetRemoteDiscoveryModeResponse */
class SOAP_CMAC _tds__SetRemoteDiscoveryModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1053; } /* = unique type id SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRemoteDiscoveryModeResponse() { _tds__SetRemoteDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_tds__SetRemoteDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDPAddresses
#define SOAP_TYPE__tds__GetDPAddresses (1054)
/* tds:GetDPAddresses */
class SOAP_CMAC _tds__GetDPAddresses
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1054; } /* = unique type id SOAP_TYPE__tds__GetDPAddresses */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDPAddresses() { _tds__GetDPAddresses::soap_default(NULL); }
	virtual ~_tds__GetDPAddresses() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDPAddressesResponse
#define SOAP_TYPE__tds__GetDPAddressesResponse (1055)
/* tds:GetDPAddressesResponse */
class SOAP_CMAC _tds__GetDPAddressesResponse
{
public:
	std::vector<tt__NetworkHost * >DPAddress;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:NetworkHost */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1055; } /* = unique type id SOAP_TYPE__tds__GetDPAddressesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDPAddressesResponse() { _tds__GetDPAddressesResponse::soap_default(NULL); }
	virtual ~_tds__GetDPAddressesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDPAddresses
#define SOAP_TYPE__tds__SetDPAddresses (1056)
/* tds:SetDPAddresses */
class SOAP_CMAC _tds__SetDPAddresses
{
public:
	std::vector<tt__NetworkHost * >DPAddress;	/* optional element of type tt:NetworkHost */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1056; } /* = unique type id SOAP_TYPE__tds__SetDPAddresses */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDPAddresses() { _tds__SetDPAddresses::soap_default(NULL); }
	virtual ~_tds__SetDPAddresses() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDPAddressesResponse
#define SOAP_TYPE__tds__SetDPAddressesResponse (1057)
/* tds:SetDPAddressesResponse */
class SOAP_CMAC _tds__SetDPAddressesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1057; } /* = unique type id SOAP_TYPE__tds__SetDPAddressesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDPAddressesResponse() { _tds__SetDPAddressesResponse::soap_default(NULL); }
	virtual ~_tds__SetDPAddressesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetEndpointReference
#define SOAP_TYPE__tds__GetEndpointReference (1058)
/* tds:GetEndpointReference */
class SOAP_CMAC _tds__GetEndpointReference
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1058; } /* = unique type id SOAP_TYPE__tds__GetEndpointReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetEndpointReference() { _tds__GetEndpointReference::soap_default(NULL); }
	virtual ~_tds__GetEndpointReference() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetEndpointReferenceResponse
#define SOAP_TYPE__tds__GetEndpointReferenceResponse (1059)
/* tds:GetEndpointReferenceResponse */
class SOAP_CMAC _tds__GetEndpointReferenceResponse
{
public:
	std::string GUID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1059; } /* = unique type id SOAP_TYPE__tds__GetEndpointReferenceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetEndpointReferenceResponse() { _tds__GetEndpointReferenceResponse::soap_default(NULL); }
	virtual ~_tds__GetEndpointReferenceResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRemoteUser
#define SOAP_TYPE__tds__GetRemoteUser (1060)
/* tds:GetRemoteUser */
class SOAP_CMAC _tds__GetRemoteUser
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1060; } /* = unique type id SOAP_TYPE__tds__GetRemoteUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRemoteUser() { _tds__GetRemoteUser::soap_default(NULL); }
	virtual ~_tds__GetRemoteUser() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRemoteUserResponse
#define SOAP_TYPE__tds__GetRemoteUserResponse (1061)
/* tds:GetRemoteUserResponse */
class SOAP_CMAC _tds__GetRemoteUserResponse
{
public:
	tt__RemoteUser *RemoteUser;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:RemoteUser */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1061; } /* = unique type id SOAP_TYPE__tds__GetRemoteUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRemoteUserResponse() { _tds__GetRemoteUserResponse::soap_default(NULL); }
	virtual ~_tds__GetRemoteUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRemoteUser
#define SOAP_TYPE__tds__SetRemoteUser (1062)
/* tds:SetRemoteUser */
class SOAP_CMAC _tds__SetRemoteUser
{
public:
	tt__RemoteUser *RemoteUser;	/* optional element of type tt:RemoteUser */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1062; } /* = unique type id SOAP_TYPE__tds__SetRemoteUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRemoteUser() { _tds__SetRemoteUser::soap_default(NULL); }
	virtual ~_tds__SetRemoteUser() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRemoteUserResponse
#define SOAP_TYPE__tds__SetRemoteUserResponse (1063)
/* tds:SetRemoteUserResponse */
class SOAP_CMAC _tds__SetRemoteUserResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1063; } /* = unique type id SOAP_TYPE__tds__SetRemoteUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRemoteUserResponse() { _tds__SetRemoteUserResponse::soap_default(NULL); }
	virtual ~_tds__SetRemoteUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetUsers
#define SOAP_TYPE__tds__GetUsers (1064)
/* tds:GetUsers */
class SOAP_CMAC _tds__GetUsers
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1064; } /* = unique type id SOAP_TYPE__tds__GetUsers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetUsers() { _tds__GetUsers::soap_default(NULL); }
	virtual ~_tds__GetUsers() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetUsersResponse
#define SOAP_TYPE__tds__GetUsersResponse (1065)
/* tds:GetUsersResponse */
class SOAP_CMAC _tds__GetUsersResponse
{
public:
	std::vector<tt__User * >User;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:User */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1065; } /* = unique type id SOAP_TYPE__tds__GetUsersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetUsersResponse() { _tds__GetUsersResponse::soap_default(NULL); }
	virtual ~_tds__GetUsersResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateUsers
#define SOAP_TYPE__tds__CreateUsers (1066)
/* tds:CreateUsers */
class SOAP_CMAC _tds__CreateUsers
{
public:
	std::vector<tt__User * >User;	/* required element of type tt:User */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1066; } /* = unique type id SOAP_TYPE__tds__CreateUsers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateUsers() { _tds__CreateUsers::soap_default(NULL); }
	virtual ~_tds__CreateUsers() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateUsersResponse
#define SOAP_TYPE__tds__CreateUsersResponse (1067)
/* tds:CreateUsersResponse */
class SOAP_CMAC _tds__CreateUsersResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1067; } /* = unique type id SOAP_TYPE__tds__CreateUsersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateUsersResponse() { _tds__CreateUsersResponse::soap_default(NULL); }
	virtual ~_tds__CreateUsersResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteUsers
#define SOAP_TYPE__tds__DeleteUsers (1068)
/* tds:DeleteUsers */
class SOAP_CMAC _tds__DeleteUsers
{
public:
	std::vector<std::string >Username;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1068; } /* = unique type id SOAP_TYPE__tds__DeleteUsers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteUsers() { _tds__DeleteUsers::soap_default(NULL); }
	virtual ~_tds__DeleteUsers() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteUsersResponse
#define SOAP_TYPE__tds__DeleteUsersResponse (1069)
/* tds:DeleteUsersResponse */
class SOAP_CMAC _tds__DeleteUsersResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1069; } /* = unique type id SOAP_TYPE__tds__DeleteUsersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteUsersResponse() { _tds__DeleteUsersResponse::soap_default(NULL); }
	virtual ~_tds__DeleteUsersResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetUser
#define SOAP_TYPE__tds__SetUser (1070)
/* tds:SetUser */
class SOAP_CMAC _tds__SetUser
{
public:
	std::vector<tt__User * >User;	/* required element of type tt:User */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1070; } /* = unique type id SOAP_TYPE__tds__SetUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetUser() { _tds__SetUser::soap_default(NULL); }
	virtual ~_tds__SetUser() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetUserResponse
#define SOAP_TYPE__tds__SetUserResponse (1071)
/* tds:SetUserResponse */
class SOAP_CMAC _tds__SetUserResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1071; } /* = unique type id SOAP_TYPE__tds__SetUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetUserResponse() { _tds__SetUserResponse::soap_default(NULL); }
	virtual ~_tds__SetUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetWsdlUrl
#define SOAP_TYPE__tds__GetWsdlUrl (1072)
/* tds:GetWsdlUrl */
class SOAP_CMAC _tds__GetWsdlUrl
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1072; } /* = unique type id SOAP_TYPE__tds__GetWsdlUrl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetWsdlUrl() { _tds__GetWsdlUrl::soap_default(NULL); }
	virtual ~_tds__GetWsdlUrl() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetWsdlUrlResponse
#define SOAP_TYPE__tds__GetWsdlUrlResponse (1073)
/* tds:GetWsdlUrlResponse */
class SOAP_CMAC _tds__GetWsdlUrlResponse
{
public:
	std::string WsdlUrl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1073; } /* = unique type id SOAP_TYPE__tds__GetWsdlUrlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetWsdlUrlResponse() { _tds__GetWsdlUrlResponse::soap_default(NULL); }
	virtual ~_tds__GetWsdlUrlResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCapabilities
#define SOAP_TYPE__tds__GetCapabilities (1074)
/* tds:GetCapabilities */
class SOAP_CMAC _tds__GetCapabilities
{
public:
	std::vector<enum tt__CapabilityCategory >Category;	/* optional element of type tt:CapabilityCategory */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1074; } /* = unique type id SOAP_TYPE__tds__GetCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCapabilities() { _tds__GetCapabilities::soap_default(NULL); }
	virtual ~_tds__GetCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCapabilitiesResponse
#define SOAP_TYPE__tds__GetCapabilitiesResponse (1075)
/* tds:GetCapabilitiesResponse */
class SOAP_CMAC _tds__GetCapabilitiesResponse
{
public:
	tt__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1075; } /* = unique type id SOAP_TYPE__tds__GetCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCapabilitiesResponse() { _tds__GetCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tds__GetCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetHostname
#define SOAP_TYPE__tds__GetHostname (1076)
/* tds:GetHostname */
class SOAP_CMAC _tds__GetHostname
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1076; } /* = unique type id SOAP_TYPE__tds__GetHostname */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetHostname() { _tds__GetHostname::soap_default(NULL); }
	virtual ~_tds__GetHostname() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetHostnameResponse
#define SOAP_TYPE__tds__GetHostnameResponse (1077)
/* tds:GetHostnameResponse */
class SOAP_CMAC _tds__GetHostnameResponse
{
public:
	tt__HostnameInformation *HostnameInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:HostnameInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1077; } /* = unique type id SOAP_TYPE__tds__GetHostnameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetHostnameResponse() { _tds__GetHostnameResponse::soap_default(NULL); }
	virtual ~_tds__GetHostnameResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetHostname
#define SOAP_TYPE__tds__SetHostname (1078)
/* tds:SetHostname */
class SOAP_CMAC _tds__SetHostname
{
public:
	std::string Name;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1078; } /* = unique type id SOAP_TYPE__tds__SetHostname */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetHostname() { _tds__SetHostname::soap_default(NULL); }
	virtual ~_tds__SetHostname() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetHostnameResponse
#define SOAP_TYPE__tds__SetHostnameResponse (1079)
/* tds:SetHostnameResponse */
class SOAP_CMAC _tds__SetHostnameResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1079; } /* = unique type id SOAP_TYPE__tds__SetHostnameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetHostnameResponse() { _tds__SetHostnameResponse::soap_default(NULL); }
	virtual ~_tds__SetHostnameResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetHostnameFromDHCP
#define SOAP_TYPE__tds__SetHostnameFromDHCP (1080)
/* tds:SetHostnameFromDHCP */
class SOAP_CMAC _tds__SetHostnameFromDHCP
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1080; } /* = unique type id SOAP_TYPE__tds__SetHostnameFromDHCP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetHostnameFromDHCP() { _tds__SetHostnameFromDHCP::soap_default(NULL); }
	virtual ~_tds__SetHostnameFromDHCP() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetHostnameFromDHCPResponse
#define SOAP_TYPE__tds__SetHostnameFromDHCPResponse (1081)
/* tds:SetHostnameFromDHCPResponse */
class SOAP_CMAC _tds__SetHostnameFromDHCPResponse
{
public:
	bool RebootNeeded;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1081; } /* = unique type id SOAP_TYPE__tds__SetHostnameFromDHCPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetHostnameFromDHCPResponse() { _tds__SetHostnameFromDHCPResponse::soap_default(NULL); }
	virtual ~_tds__SetHostnameFromDHCPResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDNS
#define SOAP_TYPE__tds__GetDNS (1082)
/* tds:GetDNS */
class SOAP_CMAC _tds__GetDNS
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1082; } /* = unique type id SOAP_TYPE__tds__GetDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDNS() { _tds__GetDNS::soap_default(NULL); }
	virtual ~_tds__GetDNS() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDNSResponse
#define SOAP_TYPE__tds__GetDNSResponse (1083)
/* tds:GetDNSResponse */
class SOAP_CMAC _tds__GetDNSResponse
{
public:
	tt__DNSInformation *DNSInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:DNSInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1083; } /* = unique type id SOAP_TYPE__tds__GetDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDNSResponse() { _tds__GetDNSResponse::soap_default(NULL); }
	virtual ~_tds__GetDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDNS
#define SOAP_TYPE__tds__SetDNS (1084)
/* tds:SetDNS */
class SOAP_CMAC _tds__SetDNS
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<std::string >SearchDomain;	/* optional element of type xsd:token */
	std::vector<tt__IPAddress * >DNSManual;	/* optional element of type tt:IPAddress */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1084; } /* = unique type id SOAP_TYPE__tds__SetDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDNS() { _tds__SetDNS::soap_default(NULL); }
	virtual ~_tds__SetDNS() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDNSResponse
#define SOAP_TYPE__tds__SetDNSResponse (1085)
/* tds:SetDNSResponse */
class SOAP_CMAC _tds__SetDNSResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1085; } /* = unique type id SOAP_TYPE__tds__SetDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDNSResponse() { _tds__SetDNSResponse::soap_default(NULL); }
	virtual ~_tds__SetDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNTP
#define SOAP_TYPE__tds__GetNTP (1086)
/* tds:GetNTP */
class SOAP_CMAC _tds__GetNTP
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1086; } /* = unique type id SOAP_TYPE__tds__GetNTP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNTP() { _tds__GetNTP::soap_default(NULL); }
	virtual ~_tds__GetNTP() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNTPResponse
#define SOAP_TYPE__tds__GetNTPResponse (1087)
/* tds:GetNTPResponse */
class SOAP_CMAC _tds__GetNTPResponse
{
public:
	tt__NTPInformation *NTPInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:NTPInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1087; } /* = unique type id SOAP_TYPE__tds__GetNTPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNTPResponse() { _tds__GetNTPResponse::soap_default(NULL); }
	virtual ~_tds__GetNTPResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNTP
#define SOAP_TYPE__tds__SetNTP (1088)
/* tds:SetNTP */
class SOAP_CMAC _tds__SetNTP
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<tt__NetworkHost * >NTPManual;	/* optional element of type tt:NetworkHost */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1088; } /* = unique type id SOAP_TYPE__tds__SetNTP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNTP() { _tds__SetNTP::soap_default(NULL); }
	virtual ~_tds__SetNTP() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNTPResponse
#define SOAP_TYPE__tds__SetNTPResponse (1089)
/* tds:SetNTPResponse */
class SOAP_CMAC _tds__SetNTPResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1089; } /* = unique type id SOAP_TYPE__tds__SetNTPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNTPResponse() { _tds__SetNTPResponse::soap_default(NULL); }
	virtual ~_tds__SetNTPResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDynamicDNS
#define SOAP_TYPE__tds__GetDynamicDNS (1090)
/* tds:GetDynamicDNS */
class SOAP_CMAC _tds__GetDynamicDNS
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1090; } /* = unique type id SOAP_TYPE__tds__GetDynamicDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDynamicDNS() { _tds__GetDynamicDNS::soap_default(NULL); }
	virtual ~_tds__GetDynamicDNS() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDynamicDNSResponse
#define SOAP_TYPE__tds__GetDynamicDNSResponse (1091)
/* tds:GetDynamicDNSResponse */
class SOAP_CMAC _tds__GetDynamicDNSResponse
{
public:
	tt__DynamicDNSInformation *DynamicDNSInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:DynamicDNSInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1091; } /* = unique type id SOAP_TYPE__tds__GetDynamicDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDynamicDNSResponse() { _tds__GetDynamicDNSResponse::soap_default(NULL); }
	virtual ~_tds__GetDynamicDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDynamicDNS
#define SOAP_TYPE__tds__SetDynamicDNS (1092)
/* tds:SetDynamicDNS */
class SOAP_CMAC _tds__SetDynamicDNS
{
public:
	enum tt__DynamicDNSType Type;	/* required element of type tt:DynamicDNSType */
	std::string *Name;	/* optional element of type tt:DNSName */
	LONG64 *TTL;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1092; } /* = unique type id SOAP_TYPE__tds__SetDynamicDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDynamicDNS() { _tds__SetDynamicDNS::soap_default(NULL); }
	virtual ~_tds__SetDynamicDNS() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDynamicDNSResponse
#define SOAP_TYPE__tds__SetDynamicDNSResponse (1093)
/* tds:SetDynamicDNSResponse */
class SOAP_CMAC _tds__SetDynamicDNSResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1093; } /* = unique type id SOAP_TYPE__tds__SetDynamicDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDynamicDNSResponse() { _tds__SetDynamicDNSResponse::soap_default(NULL); }
	virtual ~_tds__SetDynamicDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkInterfaces
#define SOAP_TYPE__tds__GetNetworkInterfaces (1094)
/* tds:GetNetworkInterfaces */
class SOAP_CMAC _tds__GetNetworkInterfaces
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1094; } /* = unique type id SOAP_TYPE__tds__GetNetworkInterfaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkInterfaces() { _tds__GetNetworkInterfaces::soap_default(NULL); }
	virtual ~_tds__GetNetworkInterfaces() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkInterfacesResponse
#define SOAP_TYPE__tds__GetNetworkInterfacesResponse (1095)
/* tds:GetNetworkInterfacesResponse */
class SOAP_CMAC _tds__GetNetworkInterfacesResponse
{
public:
	std::vector<class tt__NetworkInterface * >NetworkInterfaces;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:NetworkInterface */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1095; } /* = unique type id SOAP_TYPE__tds__GetNetworkInterfacesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkInterfacesResponse() { _tds__GetNetworkInterfacesResponse::soap_default(NULL); }
	virtual ~_tds__GetNetworkInterfacesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkInterfaces
#define SOAP_TYPE__tds__SetNetworkInterfaces (1096)
/* tds:SetNetworkInterfaces */
class SOAP_CMAC _tds__SetNetworkInterfaces
{
public:
	std::string InterfaceToken;	/* required element of type tt:ReferenceToken */
	tt__NetworkInterfaceSetConfiguration *NetworkInterface;	/* required element of type tt:NetworkInterfaceSetConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1096; } /* = unique type id SOAP_TYPE__tds__SetNetworkInterfaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkInterfaces() { _tds__SetNetworkInterfaces::soap_default(NULL); }
	virtual ~_tds__SetNetworkInterfaces() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkInterfacesResponse
#define SOAP_TYPE__tds__SetNetworkInterfacesResponse (1097)
/* tds:SetNetworkInterfacesResponse */
class SOAP_CMAC _tds__SetNetworkInterfacesResponse
{
public:
	bool RebootNeeded;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1097; } /* = unique type id SOAP_TYPE__tds__SetNetworkInterfacesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkInterfacesResponse() { _tds__SetNetworkInterfacesResponse::soap_default(NULL); }
	virtual ~_tds__SetNetworkInterfacesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkProtocols
#define SOAP_TYPE__tds__GetNetworkProtocols (1098)
/* tds:GetNetworkProtocols */
class SOAP_CMAC _tds__GetNetworkProtocols
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1098; } /* = unique type id SOAP_TYPE__tds__GetNetworkProtocols */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkProtocols() { _tds__GetNetworkProtocols::soap_default(NULL); }
	virtual ~_tds__GetNetworkProtocols() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkProtocolsResponse
#define SOAP_TYPE__tds__GetNetworkProtocolsResponse (1099)
/* tds:GetNetworkProtocolsResponse */
class SOAP_CMAC _tds__GetNetworkProtocolsResponse
{
public:
	std::vector<tt__NetworkProtocol * >NetworkProtocols;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:NetworkProtocol */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1099; } /* = unique type id SOAP_TYPE__tds__GetNetworkProtocolsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkProtocolsResponse() { _tds__GetNetworkProtocolsResponse::soap_default(NULL); }
	virtual ~_tds__GetNetworkProtocolsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkProtocols
#define SOAP_TYPE__tds__SetNetworkProtocols (1100)
/* tds:SetNetworkProtocols */
class SOAP_CMAC _tds__SetNetworkProtocols
{
public:
	std::vector<tt__NetworkProtocol * >NetworkProtocols;	/* required element of type tt:NetworkProtocol */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1100; } /* = unique type id SOAP_TYPE__tds__SetNetworkProtocols */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkProtocols() { _tds__SetNetworkProtocols::soap_default(NULL); }
	virtual ~_tds__SetNetworkProtocols() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkProtocolsResponse
#define SOAP_TYPE__tds__SetNetworkProtocolsResponse (1101)
/* tds:SetNetworkProtocolsResponse */
class SOAP_CMAC _tds__SetNetworkProtocolsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1101; } /* = unique type id SOAP_TYPE__tds__SetNetworkProtocolsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkProtocolsResponse() { _tds__SetNetworkProtocolsResponse::soap_default(NULL); }
	virtual ~_tds__SetNetworkProtocolsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkDefaultGateway
#define SOAP_TYPE__tds__GetNetworkDefaultGateway (1102)
/* tds:GetNetworkDefaultGateway */
class SOAP_CMAC _tds__GetNetworkDefaultGateway
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1102; } /* = unique type id SOAP_TYPE__tds__GetNetworkDefaultGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkDefaultGateway() { _tds__GetNetworkDefaultGateway::soap_default(NULL); }
	virtual ~_tds__GetNetworkDefaultGateway() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse
#define SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse (1103)
/* tds:GetNetworkDefaultGatewayResponse */
class SOAP_CMAC _tds__GetNetworkDefaultGatewayResponse
{
public:
	tt__NetworkGateway *NetworkGateway;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:NetworkGateway */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1103; } /* = unique type id SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkDefaultGatewayResponse() { _tds__GetNetworkDefaultGatewayResponse::soap_default(NULL); }
	virtual ~_tds__GetNetworkDefaultGatewayResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkDefaultGateway
#define SOAP_TYPE__tds__SetNetworkDefaultGateway (1104)
/* tds:SetNetworkDefaultGateway */
class SOAP_CMAC _tds__SetNetworkDefaultGateway
{
public:
	std::vector<std::string >IPv4Address;	/* optional element of type tt:IPv4Address */
	std::vector<std::string >IPv6Address;	/* optional element of type tt:IPv6Address */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1104; } /* = unique type id SOAP_TYPE__tds__SetNetworkDefaultGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkDefaultGateway() { _tds__SetNetworkDefaultGateway::soap_default(NULL); }
	virtual ~_tds__SetNetworkDefaultGateway() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse
#define SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse (1105)
/* tds:SetNetworkDefaultGatewayResponse */
class SOAP_CMAC _tds__SetNetworkDefaultGatewayResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1105; } /* = unique type id SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkDefaultGatewayResponse() { _tds__SetNetworkDefaultGatewayResponse::soap_default(NULL); }
	virtual ~_tds__SetNetworkDefaultGatewayResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetZeroConfiguration
#define SOAP_TYPE__tds__GetZeroConfiguration (1106)
/* tds:GetZeroConfiguration */
class SOAP_CMAC _tds__GetZeroConfiguration
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1106; } /* = unique type id SOAP_TYPE__tds__GetZeroConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetZeroConfiguration() { _tds__GetZeroConfiguration::soap_default(NULL); }
	virtual ~_tds__GetZeroConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetZeroConfigurationResponse
#define SOAP_TYPE__tds__GetZeroConfigurationResponse (1107)
/* tds:GetZeroConfigurationResponse */
class SOAP_CMAC _tds__GetZeroConfigurationResponse
{
public:
	tt__NetworkZeroConfiguration *ZeroConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:NetworkZeroConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1107; } /* = unique type id SOAP_TYPE__tds__GetZeroConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetZeroConfigurationResponse() { _tds__GetZeroConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__GetZeroConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetZeroConfiguration
#define SOAP_TYPE__tds__SetZeroConfiguration (1108)
/* tds:SetZeroConfiguration */
class SOAP_CMAC _tds__SetZeroConfiguration
{
public:
	std::string InterfaceToken;	/* required element of type tt:ReferenceToken */
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1108; } /* = unique type id SOAP_TYPE__tds__SetZeroConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetZeroConfiguration() { _tds__SetZeroConfiguration::soap_default(NULL); }
	virtual ~_tds__SetZeroConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetZeroConfigurationResponse
#define SOAP_TYPE__tds__SetZeroConfigurationResponse (1109)
/* tds:SetZeroConfigurationResponse */
class SOAP_CMAC _tds__SetZeroConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1109; } /* = unique type id SOAP_TYPE__tds__SetZeroConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetZeroConfigurationResponse() { _tds__SetZeroConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__SetZeroConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetIPAddressFilter
#define SOAP_TYPE__tds__GetIPAddressFilter (1110)
/* tds:GetIPAddressFilter */
class SOAP_CMAC _tds__GetIPAddressFilter
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1110; } /* = unique type id SOAP_TYPE__tds__GetIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetIPAddressFilter() { _tds__GetIPAddressFilter::soap_default(NULL); }
	virtual ~_tds__GetIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetIPAddressFilterResponse
#define SOAP_TYPE__tds__GetIPAddressFilterResponse (1111)
/* tds:GetIPAddressFilterResponse */
class SOAP_CMAC _tds__GetIPAddressFilterResponse
{
public:
	tt__IPAddressFilter *IPAddressFilter;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1111; } /* = unique type id SOAP_TYPE__tds__GetIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetIPAddressFilterResponse() { _tds__GetIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_tds__GetIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetIPAddressFilter
#define SOAP_TYPE__tds__SetIPAddressFilter (1112)
/* tds:SetIPAddressFilter */
class SOAP_CMAC _tds__SetIPAddressFilter
{
public:
	tt__IPAddressFilter *IPAddressFilter;	/* required element of type tt:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1112; } /* = unique type id SOAP_TYPE__tds__SetIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetIPAddressFilter() { _tds__SetIPAddressFilter::soap_default(NULL); }
	virtual ~_tds__SetIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetIPAddressFilterResponse
#define SOAP_TYPE__tds__SetIPAddressFilterResponse (1113)
/* tds:SetIPAddressFilterResponse */
class SOAP_CMAC _tds__SetIPAddressFilterResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1113; } /* = unique type id SOAP_TYPE__tds__SetIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetIPAddressFilterResponse() { _tds__SetIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_tds__SetIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__AddIPAddressFilter
#define SOAP_TYPE__tds__AddIPAddressFilter (1114)
/* tds:AddIPAddressFilter */
class SOAP_CMAC _tds__AddIPAddressFilter
{
public:
	tt__IPAddressFilter *IPAddressFilter;	/* required element of type tt:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1114; } /* = unique type id SOAP_TYPE__tds__AddIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__AddIPAddressFilter() { _tds__AddIPAddressFilter::soap_default(NULL); }
	virtual ~_tds__AddIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__tds__AddIPAddressFilterResponse
#define SOAP_TYPE__tds__AddIPAddressFilterResponse (1115)
/* tds:AddIPAddressFilterResponse */
class SOAP_CMAC _tds__AddIPAddressFilterResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1115; } /* = unique type id SOAP_TYPE__tds__AddIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__AddIPAddressFilterResponse() { _tds__AddIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_tds__AddIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__RemoveIPAddressFilter
#define SOAP_TYPE__tds__RemoveIPAddressFilter (1116)
/* tds:RemoveIPAddressFilter */
class SOAP_CMAC _tds__RemoveIPAddressFilter
{
public:
	tt__IPAddressFilter *IPAddressFilter;	/* required element of type tt:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1116; } /* = unique type id SOAP_TYPE__tds__RemoveIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RemoveIPAddressFilter() { _tds__RemoveIPAddressFilter::soap_default(NULL); }
	virtual ~_tds__RemoveIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__tds__RemoveIPAddressFilterResponse
#define SOAP_TYPE__tds__RemoveIPAddressFilterResponse (1117)
/* tds:RemoveIPAddressFilterResponse */
class SOAP_CMAC _tds__RemoveIPAddressFilterResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1117; } /* = unique type id SOAP_TYPE__tds__RemoveIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RemoveIPAddressFilterResponse() { _tds__RemoveIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_tds__RemoveIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetAccessPolicy
#define SOAP_TYPE__tds__GetAccessPolicy (1118)
/* tds:GetAccessPolicy */
class SOAP_CMAC _tds__GetAccessPolicy
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1118; } /* = unique type id SOAP_TYPE__tds__GetAccessPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetAccessPolicy() { _tds__GetAccessPolicy::soap_default(NULL); }
	virtual ~_tds__GetAccessPolicy() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetAccessPolicyResponse
#define SOAP_TYPE__tds__GetAccessPolicyResponse (1119)
/* tds:GetAccessPolicyResponse */
class SOAP_CMAC _tds__GetAccessPolicyResponse
{
public:
	tt__BinaryData *PolicyFile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1119; } /* = unique type id SOAP_TYPE__tds__GetAccessPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetAccessPolicyResponse() { _tds__GetAccessPolicyResponse::soap_default(NULL); }
	virtual ~_tds__GetAccessPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetAccessPolicy
#define SOAP_TYPE__tds__SetAccessPolicy (1120)
/* tds:SetAccessPolicy */
class SOAP_CMAC _tds__SetAccessPolicy
{
public:
	tt__BinaryData *PolicyFile;	/* required element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1120; } /* = unique type id SOAP_TYPE__tds__SetAccessPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetAccessPolicy() { _tds__SetAccessPolicy::soap_default(NULL); }
	virtual ~_tds__SetAccessPolicy() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetAccessPolicyResponse
#define SOAP_TYPE__tds__SetAccessPolicyResponse (1121)
/* tds:SetAccessPolicyResponse */
class SOAP_CMAC _tds__SetAccessPolicyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1121; } /* = unique type id SOAP_TYPE__tds__SetAccessPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetAccessPolicyResponse() { _tds__SetAccessPolicyResponse::soap_default(NULL); }
	virtual ~_tds__SetAccessPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateCertificate
#define SOAP_TYPE__tds__CreateCertificate (1122)
/* tds:CreateCertificate */
class SOAP_CMAC _tds__CreateCertificate
{
public:
	std::string *CertificateID;	/* optional element of type xsd:token */
	std::string *Subject;	/* optional element of type xsd:string */
	time_t *ValidNotBefore;	/* optional element of type xsd:dateTime */
	time_t *ValidNotAfter;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1122; } /* = unique type id SOAP_TYPE__tds__CreateCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateCertificate() { _tds__CreateCertificate::soap_default(NULL); }
	virtual ~_tds__CreateCertificate() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateCertificateResponse
#define SOAP_TYPE__tds__CreateCertificateResponse (1123)
/* tds:CreateCertificateResponse */
class SOAP_CMAC _tds__CreateCertificateResponse
{
public:
	tt__Certificate *NvtCertificate;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1123; } /* = unique type id SOAP_TYPE__tds__CreateCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateCertificateResponse() { _tds__CreateCertificateResponse::soap_default(NULL); }
	virtual ~_tds__CreateCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificates
#define SOAP_TYPE__tds__GetCertificates (1124)
/* tds:GetCertificates */
class SOAP_CMAC _tds__GetCertificates
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1124; } /* = unique type id SOAP_TYPE__tds__GetCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificates() { _tds__GetCertificates::soap_default(NULL); }
	virtual ~_tds__GetCertificates() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificatesResponse
#define SOAP_TYPE__tds__GetCertificatesResponse (1125)
/* tds:GetCertificatesResponse */
class SOAP_CMAC _tds__GetCertificatesResponse
{
public:
	std::vector<tt__Certificate * >NvtCertificate;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1125; } /* = unique type id SOAP_TYPE__tds__GetCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificatesResponse() { _tds__GetCertificatesResponse::soap_default(NULL); }
	virtual ~_tds__GetCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificatesStatus
#define SOAP_TYPE__tds__GetCertificatesStatus (1126)
/* tds:GetCertificatesStatus */
class SOAP_CMAC _tds__GetCertificatesStatus
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1126; } /* = unique type id SOAP_TYPE__tds__GetCertificatesStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificatesStatus() { _tds__GetCertificatesStatus::soap_default(NULL); }
	virtual ~_tds__GetCertificatesStatus() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificatesStatusResponse
#define SOAP_TYPE__tds__GetCertificatesStatusResponse (1127)
/* tds:GetCertificatesStatusResponse */
class SOAP_CMAC _tds__GetCertificatesStatusResponse
{
public:
	std::vector<tt__CertificateStatus * >CertificateStatus;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:CertificateStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1127; } /* = unique type id SOAP_TYPE__tds__GetCertificatesStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificatesStatusResponse() { _tds__GetCertificatesStatusResponse::soap_default(NULL); }
	virtual ~_tds__GetCertificatesStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetCertificatesStatus
#define SOAP_TYPE__tds__SetCertificatesStatus (1128)
/* tds:SetCertificatesStatus */
class SOAP_CMAC _tds__SetCertificatesStatus
{
public:
	std::vector<tt__CertificateStatus * >CertificateStatus;	/* optional element of type tt:CertificateStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1128; } /* = unique type id SOAP_TYPE__tds__SetCertificatesStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetCertificatesStatus() { _tds__SetCertificatesStatus::soap_default(NULL); }
	virtual ~_tds__SetCertificatesStatus() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetCertificatesStatusResponse
#define SOAP_TYPE__tds__SetCertificatesStatusResponse (1129)
/* tds:SetCertificatesStatusResponse */
class SOAP_CMAC _tds__SetCertificatesStatusResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1129; } /* = unique type id SOAP_TYPE__tds__SetCertificatesStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetCertificatesStatusResponse() { _tds__SetCertificatesStatusResponse::soap_default(NULL); }
	virtual ~_tds__SetCertificatesStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteCertificates
#define SOAP_TYPE__tds__DeleteCertificates (1130)
/* tds:DeleteCertificates */
class SOAP_CMAC _tds__DeleteCertificates
{
public:
	std::vector<std::string >CertificateID;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1130; } /* = unique type id SOAP_TYPE__tds__DeleteCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteCertificates() { _tds__DeleteCertificates::soap_default(NULL); }
	virtual ~_tds__DeleteCertificates() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteCertificatesResponse
#define SOAP_TYPE__tds__DeleteCertificatesResponse (1131)
/* tds:DeleteCertificatesResponse */
class SOAP_CMAC _tds__DeleteCertificatesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1131; } /* = unique type id SOAP_TYPE__tds__DeleteCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteCertificatesResponse() { _tds__DeleteCertificatesResponse::soap_default(NULL); }
	virtual ~_tds__DeleteCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetPkcs10Request
#define SOAP_TYPE__tds__GetPkcs10Request (1132)
/* tds:GetPkcs10Request */
class SOAP_CMAC _tds__GetPkcs10Request
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	std::string *Subject;	/* optional element of type xsd:string */
	tt__BinaryData *Attributes;	/* optional element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1132; } /* = unique type id SOAP_TYPE__tds__GetPkcs10Request */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetPkcs10Request() { _tds__GetPkcs10Request::soap_default(NULL); }
	virtual ~_tds__GetPkcs10Request() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetPkcs10RequestResponse
#define SOAP_TYPE__tds__GetPkcs10RequestResponse (1133)
/* tds:GetPkcs10RequestResponse */
class SOAP_CMAC _tds__GetPkcs10RequestResponse
{
public:
	tt__BinaryData *Pkcs10Request;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1133; } /* = unique type id SOAP_TYPE__tds__GetPkcs10RequestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetPkcs10RequestResponse() { _tds__GetPkcs10RequestResponse::soap_default(NULL); }
	virtual ~_tds__GetPkcs10RequestResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCertificates
#define SOAP_TYPE__tds__LoadCertificates (1134)
/* tds:LoadCertificates */
class SOAP_CMAC _tds__LoadCertificates
{
public:
	std::vector<tt__Certificate * >NVTCertificate;	/* required element of type tt:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1134; } /* = unique type id SOAP_TYPE__tds__LoadCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCertificates() { _tds__LoadCertificates::soap_default(NULL); }
	virtual ~_tds__LoadCertificates() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCertificatesResponse
#define SOAP_TYPE__tds__LoadCertificatesResponse (1135)
/* tds:LoadCertificatesResponse */
class SOAP_CMAC _tds__LoadCertificatesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1135; } /* = unique type id SOAP_TYPE__tds__LoadCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCertificatesResponse() { _tds__LoadCertificatesResponse::soap_default(NULL); }
	virtual ~_tds__LoadCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetClientCertificateMode
#define SOAP_TYPE__tds__GetClientCertificateMode (1136)
/* tds:GetClientCertificateMode */
class SOAP_CMAC _tds__GetClientCertificateMode
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1136; } /* = unique type id SOAP_TYPE__tds__GetClientCertificateMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetClientCertificateMode() { _tds__GetClientCertificateMode::soap_default(NULL); }
	virtual ~_tds__GetClientCertificateMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetClientCertificateModeResponse
#define SOAP_TYPE__tds__GetClientCertificateModeResponse (1137)
/* tds:GetClientCertificateModeResponse */
class SOAP_CMAC _tds__GetClientCertificateModeResponse
{
public:
	bool Enabled;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1137; } /* = unique type id SOAP_TYPE__tds__GetClientCertificateModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetClientCertificateModeResponse() { _tds__GetClientCertificateModeResponse::soap_default(NULL); }
	virtual ~_tds__GetClientCertificateModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetClientCertificateMode
#define SOAP_TYPE__tds__SetClientCertificateMode (1138)
/* tds:SetClientCertificateMode */
class SOAP_CMAC _tds__SetClientCertificateMode
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1138; } /* = unique type id SOAP_TYPE__tds__SetClientCertificateMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetClientCertificateMode() { _tds__SetClientCertificateMode::soap_default(NULL); }
	virtual ~_tds__SetClientCertificateMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetClientCertificateModeResponse
#define SOAP_TYPE__tds__SetClientCertificateModeResponse (1139)
/* tds:SetClientCertificateModeResponse */
class SOAP_CMAC _tds__SetClientCertificateModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1139; } /* = unique type id SOAP_TYPE__tds__SetClientCertificateModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetClientCertificateModeResponse() { _tds__SetClientCertificateModeResponse::soap_default(NULL); }
	virtual ~_tds__SetClientCertificateModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCACertificates
#define SOAP_TYPE__tds__GetCACertificates (1140)
/* tds:GetCACertificates */
class SOAP_CMAC _tds__GetCACertificates
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1140; } /* = unique type id SOAP_TYPE__tds__GetCACertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCACertificates() { _tds__GetCACertificates::soap_default(NULL); }
	virtual ~_tds__GetCACertificates() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCACertificatesResponse
#define SOAP_TYPE__tds__GetCACertificatesResponse (1141)
/* tds:GetCACertificatesResponse */
class SOAP_CMAC _tds__GetCACertificatesResponse
{
public:
	std::vector<tt__Certificate * >CACertificate;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1141; } /* = unique type id SOAP_TYPE__tds__GetCACertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCACertificatesResponse() { _tds__GetCACertificatesResponse::soap_default(NULL); }
	virtual ~_tds__GetCACertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKey
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKey (1142)
/* tds:LoadCertificateWithPrivateKey */
class SOAP_CMAC _tds__LoadCertificateWithPrivateKey
{
public:
	std::vector<tt__CertificateWithPrivateKey * >CertificateWithPrivateKey;	/* required element of type tt:CertificateWithPrivateKey */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1142; } /* = unique type id SOAP_TYPE__tds__LoadCertificateWithPrivateKey */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCertificateWithPrivateKey() { _tds__LoadCertificateWithPrivateKey::soap_default(NULL); }
	virtual ~_tds__LoadCertificateWithPrivateKey() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse (1143)
/* tds:LoadCertificateWithPrivateKeyResponse */
class SOAP_CMAC _tds__LoadCertificateWithPrivateKeyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1143; } /* = unique type id SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCertificateWithPrivateKeyResponse() { _tds__LoadCertificateWithPrivateKeyResponse::soap_default(NULL); }
	virtual ~_tds__LoadCertificateWithPrivateKeyResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificateInformation
#define SOAP_TYPE__tds__GetCertificateInformation (1144)
/* tds:GetCertificateInformation */
class SOAP_CMAC _tds__GetCertificateInformation
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1144; } /* = unique type id SOAP_TYPE__tds__GetCertificateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificateInformation() { _tds__GetCertificateInformation::soap_default(NULL); }
	virtual ~_tds__GetCertificateInformation() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificateInformationResponse
#define SOAP_TYPE__tds__GetCertificateInformationResponse (1145)
/* tds:GetCertificateInformationResponse */
class SOAP_CMAC _tds__GetCertificateInformationResponse
{
public:
	tt__CertificateInformation *CertificateInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:CertificateInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1145; } /* = unique type id SOAP_TYPE__tds__GetCertificateInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificateInformationResponse() { _tds__GetCertificateInformationResponse::soap_default(NULL); }
	virtual ~_tds__GetCertificateInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCACertificates
#define SOAP_TYPE__tds__LoadCACertificates (1146)
/* tds:LoadCACertificates */
class SOAP_CMAC _tds__LoadCACertificates
{
public:
	std::vector<tt__Certificate * >CACertificate;	/* required element of type tt:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1146; } /* = unique type id SOAP_TYPE__tds__LoadCACertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCACertificates() { _tds__LoadCACertificates::soap_default(NULL); }
	virtual ~_tds__LoadCACertificates() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCACertificatesResponse
#define SOAP_TYPE__tds__LoadCACertificatesResponse (1147)
/* tds:LoadCACertificatesResponse */
class SOAP_CMAC _tds__LoadCACertificatesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1147; } /* = unique type id SOAP_TYPE__tds__LoadCACertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCACertificatesResponse() { _tds__LoadCACertificatesResponse::soap_default(NULL); }
	virtual ~_tds__LoadCACertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateDot1XConfiguration
#define SOAP_TYPE__tds__CreateDot1XConfiguration (1148)
/* tds:CreateDot1XConfiguration */
class SOAP_CMAC _tds__CreateDot1XConfiguration
{
public:
	tt__Dot1XConfiguration *Dot1XConfiguration;	/* required element of type tt:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1148; } /* = unique type id SOAP_TYPE__tds__CreateDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateDot1XConfiguration() { _tds__CreateDot1XConfiguration::soap_default(NULL); }
	virtual ~_tds__CreateDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateDot1XConfigurationResponse
#define SOAP_TYPE__tds__CreateDot1XConfigurationResponse (1149)
/* tds:CreateDot1XConfigurationResponse */
class SOAP_CMAC _tds__CreateDot1XConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1149; } /* = unique type id SOAP_TYPE__tds__CreateDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateDot1XConfigurationResponse() { _tds__CreateDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__CreateDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDot1XConfiguration
#define SOAP_TYPE__tds__SetDot1XConfiguration (1150)
/* tds:SetDot1XConfiguration */
class SOAP_CMAC _tds__SetDot1XConfiguration
{
public:
	tt__Dot1XConfiguration *Dot1XConfiguration;	/* required element of type tt:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1150; } /* = unique type id SOAP_TYPE__tds__SetDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDot1XConfiguration() { _tds__SetDot1XConfiguration::soap_default(NULL); }
	virtual ~_tds__SetDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDot1XConfigurationResponse
#define SOAP_TYPE__tds__SetDot1XConfigurationResponse (1151)
/* tds:SetDot1XConfigurationResponse */
class SOAP_CMAC _tds__SetDot1XConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1151; } /* = unique type id SOAP_TYPE__tds__SetDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDot1XConfigurationResponse() { _tds__SetDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__SetDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfiguration
#define SOAP_TYPE__tds__GetDot1XConfiguration (1152)
/* tds:GetDot1XConfiguration */
class SOAP_CMAC _tds__GetDot1XConfiguration
{
public:
	std::string Dot1XConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1152; } /* = unique type id SOAP_TYPE__tds__GetDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot1XConfiguration() { _tds__GetDot1XConfiguration::soap_default(NULL); }
	virtual ~_tds__GetDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfigurationResponse
#define SOAP_TYPE__tds__GetDot1XConfigurationResponse (1153)
/* tds:GetDot1XConfigurationResponse */
class SOAP_CMAC _tds__GetDot1XConfigurationResponse
{
public:
	tt__Dot1XConfiguration *Dot1XConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1153; } /* = unique type id SOAP_TYPE__tds__GetDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot1XConfigurationResponse() { _tds__GetDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__GetDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfigurations
#define SOAP_TYPE__tds__GetDot1XConfigurations (1154)
/* tds:GetDot1XConfigurations */
class SOAP_CMAC _tds__GetDot1XConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1154; } /* = unique type id SOAP_TYPE__tds__GetDot1XConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot1XConfigurations() { _tds__GetDot1XConfigurations::soap_default(NULL); }
	virtual ~_tds__GetDot1XConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfigurationsResponse
#define SOAP_TYPE__tds__GetDot1XConfigurationsResponse (1155)
/* tds:GetDot1XConfigurationsResponse */
class SOAP_CMAC _tds__GetDot1XConfigurationsResponse
{
public:
	std::vector<tt__Dot1XConfiguration * >Dot1XConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1155; } /* = unique type id SOAP_TYPE__tds__GetDot1XConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot1XConfigurationsResponse() { _tds__GetDot1XConfigurationsResponse::soap_default(NULL); }
	virtual ~_tds__GetDot1XConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteDot1XConfiguration
#define SOAP_TYPE__tds__DeleteDot1XConfiguration (1156)
/* tds:DeleteDot1XConfiguration */
class SOAP_CMAC _tds__DeleteDot1XConfiguration
{
public:
	std::vector<std::string >Dot1XConfigurationToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1156; } /* = unique type id SOAP_TYPE__tds__DeleteDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteDot1XConfiguration() { _tds__DeleteDot1XConfiguration::soap_default(NULL); }
	virtual ~_tds__DeleteDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteDot1XConfigurationResponse
#define SOAP_TYPE__tds__DeleteDot1XConfigurationResponse (1157)
/* tds:DeleteDot1XConfigurationResponse */
class SOAP_CMAC _tds__DeleteDot1XConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1157; } /* = unique type id SOAP_TYPE__tds__DeleteDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteDot1XConfigurationResponse() { _tds__DeleteDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__DeleteDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRelayOutputs
#define SOAP_TYPE__tds__GetRelayOutputs (1158)
/* tds:GetRelayOutputs */
class SOAP_CMAC _tds__GetRelayOutputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1158; } /* = unique type id SOAP_TYPE__tds__GetRelayOutputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRelayOutputs() { _tds__GetRelayOutputs::soap_default(NULL); }
	virtual ~_tds__GetRelayOutputs() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRelayOutputsResponse
#define SOAP_TYPE__tds__GetRelayOutputsResponse (1159)
/* tds:GetRelayOutputsResponse */
class SOAP_CMAC _tds__GetRelayOutputsResponse
{
public:
	std::vector<tt__RelayOutput * >RelayOutputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:RelayOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1159; } /* = unique type id SOAP_TYPE__tds__GetRelayOutputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRelayOutputsResponse() { _tds__GetRelayOutputsResponse::soap_default(NULL); }
	virtual ~_tds__GetRelayOutputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputSettings
#define SOAP_TYPE__tds__SetRelayOutputSettings (1160)
/* tds:SetRelayOutputSettings */
class SOAP_CMAC _tds__SetRelayOutputSettings
{
public:
	std::string RelayOutputToken;	/* required element of type tt:ReferenceToken */
	tt__RelayOutputSettings *Properties;	/* required element of type tt:RelayOutputSettings */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1160; } /* = unique type id SOAP_TYPE__tds__SetRelayOutputSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRelayOutputSettings() { _tds__SetRelayOutputSettings::soap_default(NULL); }
	virtual ~_tds__SetRelayOutputSettings() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputSettingsResponse
#define SOAP_TYPE__tds__SetRelayOutputSettingsResponse (1161)
/* tds:SetRelayOutputSettingsResponse */
class SOAP_CMAC _tds__SetRelayOutputSettingsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1161; } /* = unique type id SOAP_TYPE__tds__SetRelayOutputSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRelayOutputSettingsResponse() { _tds__SetRelayOutputSettingsResponse::soap_default(NULL); }
	virtual ~_tds__SetRelayOutputSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputState
#define SOAP_TYPE__tds__SetRelayOutputState (1162)
/* tds:SetRelayOutputState */
class SOAP_CMAC _tds__SetRelayOutputState
{
public:
	std::string RelayOutputToken;	/* required element of type tt:ReferenceToken */
	enum tt__RelayLogicalState LogicalState;	/* required element of type tt:RelayLogicalState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1162; } /* = unique type id SOAP_TYPE__tds__SetRelayOutputState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRelayOutputState() { _tds__SetRelayOutputState::soap_default(NULL); }
	virtual ~_tds__SetRelayOutputState() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputStateResponse
#define SOAP_TYPE__tds__SetRelayOutputStateResponse (1163)
/* tds:SetRelayOutputStateResponse */
class SOAP_CMAC _tds__SetRelayOutputStateResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1163; } /* = unique type id SOAP_TYPE__tds__SetRelayOutputStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRelayOutputStateResponse() { _tds__SetRelayOutputStateResponse::soap_default(NULL); }
	virtual ~_tds__SetRelayOutputStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SendAuxiliaryCommand
#define SOAP_TYPE__tds__SendAuxiliaryCommand (1164)
/* tds:SendAuxiliaryCommand */
class SOAP_CMAC _tds__SendAuxiliaryCommand
{
public:
	std::string AuxiliaryCommand;	/* required element of type tt:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1164; } /* = unique type id SOAP_TYPE__tds__SendAuxiliaryCommand */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SendAuxiliaryCommand() { _tds__SendAuxiliaryCommand::soap_default(NULL); }
	virtual ~_tds__SendAuxiliaryCommand() { }
};
#endif

#ifndef SOAP_TYPE__tds__SendAuxiliaryCommandResponse
#define SOAP_TYPE__tds__SendAuxiliaryCommandResponse (1165)
/* tds:SendAuxiliaryCommandResponse */
class SOAP_CMAC _tds__SendAuxiliaryCommandResponse
{
public:
	std::string *AuxiliaryCommandResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1165; } /* = unique type id SOAP_TYPE__tds__SendAuxiliaryCommandResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SendAuxiliaryCommandResponse() { _tds__SendAuxiliaryCommandResponse::soap_default(NULL); }
	virtual ~_tds__SendAuxiliaryCommandResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot11Capabilities
#define SOAP_TYPE__tds__GetDot11Capabilities (1166)
/* tds:GetDot11Capabilities */
class SOAP_CMAC _tds__GetDot11Capabilities
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1166; } /* = unique type id SOAP_TYPE__tds__GetDot11Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot11Capabilities() { _tds__GetDot11Capabilities::soap_default(NULL); }
	virtual ~_tds__GetDot11Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot11CapabilitiesResponse
#define SOAP_TYPE__tds__GetDot11CapabilitiesResponse (1167)
/* tds:GetDot11CapabilitiesResponse */
class SOAP_CMAC _tds__GetDot11CapabilitiesResponse
{
public:
	tt__Dot11Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Dot11Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1167; } /* = unique type id SOAP_TYPE__tds__GetDot11CapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot11CapabilitiesResponse() { _tds__GetDot11CapabilitiesResponse::soap_default(NULL); }
	virtual ~_tds__GetDot11CapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot11Status
#define SOAP_TYPE__tds__GetDot11Status (1168)
/* tds:GetDot11Status */
class SOAP_CMAC _tds__GetDot11Status
{
public:
	std::string InterfaceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1168; } /* = unique type id SOAP_TYPE__tds__GetDot11Status */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot11Status() { _tds__GetDot11Status::soap_default(NULL); }
	virtual ~_tds__GetDot11Status() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot11StatusResponse
#define SOAP_TYPE__tds__GetDot11StatusResponse (1169)
/* tds:GetDot11StatusResponse */
class SOAP_CMAC _tds__GetDot11StatusResponse
{
public:
	tt__Dot11Status *Status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Dot11Status */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1169; } /* = unique type id SOAP_TYPE__tds__GetDot11StatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot11StatusResponse() { _tds__GetDot11StatusResponse::soap_default(NULL); }
	virtual ~_tds__GetDot11StatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__ScanAvailableDot11Networks
#define SOAP_TYPE__tds__ScanAvailableDot11Networks (1170)
/* tds:ScanAvailableDot11Networks */
class SOAP_CMAC _tds__ScanAvailableDot11Networks
{
public:
	std::string InterfaceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1170; } /* = unique type id SOAP_TYPE__tds__ScanAvailableDot11Networks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__ScanAvailableDot11Networks() { _tds__ScanAvailableDot11Networks::soap_default(NULL); }
	virtual ~_tds__ScanAvailableDot11Networks() { }
};
#endif

#ifndef SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse
#define SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse (1171)
/* tds:ScanAvailableDot11NetworksResponse */
class SOAP_CMAC _tds__ScanAvailableDot11NetworksResponse
{
public:
	std::vector<tt__Dot11AvailableNetworks * >Networks;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Dot11AvailableNetworks */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1171; } /* = unique type id SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__ScanAvailableDot11NetworksResponse() { _tds__ScanAvailableDot11NetworksResponse::soap_default(NULL); }
	virtual ~_tds__ScanAvailableDot11NetworksResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemUris
#define SOAP_TYPE__tds__GetSystemUris (1172)
/* tds:GetSystemUris */
class SOAP_CMAC _tds__GetSystemUris
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1172; } /* = unique type id SOAP_TYPE__tds__GetSystemUris */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemUris() { _tds__GetSystemUris::soap_default(NULL); }
	virtual ~_tds__GetSystemUris() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemUrisResponse_Extension
#define SOAP_TYPE__tds__GetSystemUrisResponse_Extension (1956)
/* tds:GetSystemUrisResponse-Extension */
class SOAP_CMAC _tds__GetSystemUrisResponse_Extension
{
public:
	std::vector<struct soap_dom_element >__any;
public:
	virtual int soap_type() const { return 1956; } /* = unique type id SOAP_TYPE__tds__GetSystemUrisResponse_Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemUrisResponse_Extension() { _tds__GetSystemUrisResponse_Extension::soap_default(NULL); }
	virtual ~_tds__GetSystemUrisResponse_Extension() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemUrisResponse
#define SOAP_TYPE__tds__GetSystemUrisResponse (1173)
/* tds:GetSystemUrisResponse */
class SOAP_CMAC _tds__GetSystemUrisResponse
{
public:
	tt__SystemLogUriList *SystemLogUris;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:SystemLogUriList */
	std::string *SupportInfoUri;	/* optional element of type xsd:anyURI */
	std::string *SystemBackupUri;	/* optional element of type xsd:anyURI */
	_tds__GetSystemUrisResponse_Extension *Extension;	/* optional element of type tds:GetSystemUrisResponse-Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1173; } /* = unique type id SOAP_TYPE__tds__GetSystemUrisResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemUrisResponse() { _tds__GetSystemUrisResponse::soap_default(NULL); }
	virtual ~_tds__GetSystemUrisResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__StartFirmwareUpgrade
#define SOAP_TYPE__tds__StartFirmwareUpgrade (1174)
/* tds:StartFirmwareUpgrade */
class SOAP_CMAC _tds__StartFirmwareUpgrade
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1174; } /* = unique type id SOAP_TYPE__tds__StartFirmwareUpgrade */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__StartFirmwareUpgrade() { _tds__StartFirmwareUpgrade::soap_default(NULL); }
	virtual ~_tds__StartFirmwareUpgrade() { }
};
#endif

#ifndef SOAP_TYPE__tds__StartFirmwareUpgradeResponse
#define SOAP_TYPE__tds__StartFirmwareUpgradeResponse (1175)
/* tds:StartFirmwareUpgradeResponse */
class SOAP_CMAC _tds__StartFirmwareUpgradeResponse
{
public:
	std::string UploadUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	LONG64 UploadDelay;	/* external */
	LONG64 ExpectedDownTime;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1175; } /* = unique type id SOAP_TYPE__tds__StartFirmwareUpgradeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__StartFirmwareUpgradeResponse() { _tds__StartFirmwareUpgradeResponse::soap_default(NULL); }
	virtual ~_tds__StartFirmwareUpgradeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__StartSystemRestore
#define SOAP_TYPE__tds__StartSystemRestore (1176)
/* tds:StartSystemRestore */
class SOAP_CMAC _tds__StartSystemRestore
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1176; } /* = unique type id SOAP_TYPE__tds__StartSystemRestore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__StartSystemRestore() { _tds__StartSystemRestore::soap_default(NULL); }
	virtual ~_tds__StartSystemRestore() { }
};
#endif

#ifndef SOAP_TYPE__tds__StartSystemRestoreResponse
#define SOAP_TYPE__tds__StartSystemRestoreResponse (1177)
/* tds:StartSystemRestoreResponse */
class SOAP_CMAC _tds__StartSystemRestoreResponse
{
public:
	std::string UploadUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	LONG64 ExpectedDownTime;	/* external */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1177; } /* = unique type id SOAP_TYPE__tds__StartSystemRestoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__StartSystemRestoreResponse() { _tds__StartSystemRestoreResponse::soap_default(NULL); }
	virtual ~_tds__StartSystemRestoreResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfigurations
#define SOAP_TYPE__tds__GetStorageConfigurations (1178)
/* tds:GetStorageConfigurations */
class SOAP_CMAC _tds__GetStorageConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1178; } /* = unique type id SOAP_TYPE__tds__GetStorageConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetStorageConfigurations() { _tds__GetStorageConfigurations::soap_default(NULL); }
	virtual ~_tds__GetStorageConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfigurationsResponse
#define SOAP_TYPE__tds__GetStorageConfigurationsResponse (1179)
/* tds:GetStorageConfigurationsResponse */
class SOAP_CMAC _tds__GetStorageConfigurationsResponse
{
public:
	std::vector<class tds__StorageConfiguration * >StorageConfigurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tds:StorageConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1179; } /* = unique type id SOAP_TYPE__tds__GetStorageConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetStorageConfigurationsResponse() { _tds__GetStorageConfigurationsResponse::soap_default(NULL); }
	virtual ~_tds__GetStorageConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateStorageConfiguration
#define SOAP_TYPE__tds__CreateStorageConfiguration (1180)
/* tds:CreateStorageConfiguration */
class SOAP_CMAC _tds__CreateStorageConfiguration
{
public:
	tds__StorageConfigurationData *StorageConfiguration;	/* required element of type tds:StorageConfigurationData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1180; } /* = unique type id SOAP_TYPE__tds__CreateStorageConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateStorageConfiguration() { _tds__CreateStorageConfiguration::soap_default(NULL); }
	virtual ~_tds__CreateStorageConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateStorageConfigurationResponse
#define SOAP_TYPE__tds__CreateStorageConfigurationResponse (1181)
/* tds:CreateStorageConfigurationResponse */
class SOAP_CMAC _tds__CreateStorageConfigurationResponse
{
public:
	std::string Token;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1181; } /* = unique type id SOAP_TYPE__tds__CreateStorageConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateStorageConfigurationResponse() { _tds__CreateStorageConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__CreateStorageConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfiguration
#define SOAP_TYPE__tds__GetStorageConfiguration (1182)
/* tds:GetStorageConfiguration */
class SOAP_CMAC _tds__GetStorageConfiguration
{
public:
	std::string Token;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1182; } /* = unique type id SOAP_TYPE__tds__GetStorageConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetStorageConfiguration() { _tds__GetStorageConfiguration::soap_default(NULL); }
	virtual ~_tds__GetStorageConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetStorageConfigurationResponse
#define SOAP_TYPE__tds__GetStorageConfigurationResponse (1183)
/* tds:GetStorageConfigurationResponse */
class SOAP_CMAC _tds__GetStorageConfigurationResponse
{
public:
	tds__StorageConfiguration *StorageConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tds:StorageConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1183; } /* = unique type id SOAP_TYPE__tds__GetStorageConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetStorageConfigurationResponse() { _tds__GetStorageConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__GetStorageConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetStorageConfiguration
#define SOAP_TYPE__tds__SetStorageConfiguration (1184)
/* tds:SetStorageConfiguration */
class SOAP_CMAC _tds__SetStorageConfiguration
{
public:
	tds__StorageConfiguration *StorageConfiguration;	/* required element of type tds:StorageConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1184; } /* = unique type id SOAP_TYPE__tds__SetStorageConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetStorageConfiguration() { _tds__SetStorageConfiguration::soap_default(NULL); }
	virtual ~_tds__SetStorageConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetStorageConfigurationResponse
#define SOAP_TYPE__tds__SetStorageConfigurationResponse (1185)
/* tds:SetStorageConfigurationResponse */
class SOAP_CMAC _tds__SetStorageConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1185; } /* = unique type id SOAP_TYPE__tds__SetStorageConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetStorageConfigurationResponse() { _tds__SetStorageConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__SetStorageConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteStorageConfiguration
#define SOAP_TYPE__tds__DeleteStorageConfiguration (1186)
/* tds:DeleteStorageConfiguration */
class SOAP_CMAC _tds__DeleteStorageConfiguration
{
public:
	std::string Token;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1186; } /* = unique type id SOAP_TYPE__tds__DeleteStorageConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteStorageConfiguration() { _tds__DeleteStorageConfiguration::soap_default(NULL); }
	virtual ~_tds__DeleteStorageConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteStorageConfigurationResponse
#define SOAP_TYPE__tds__DeleteStorageConfigurationResponse (1187)
/* tds:DeleteStorageConfigurationResponse */
class SOAP_CMAC _tds__DeleteStorageConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1187; } /* = unique type id SOAP_TYPE__tds__DeleteStorageConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteStorageConfigurationResponse() { _tds__DeleteStorageConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__DeleteStorageConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetGeoLocation
#define SOAP_TYPE__tds__GetGeoLocation (1188)
/* tds:GetGeoLocation */
class SOAP_CMAC _tds__GetGeoLocation
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1188; } /* = unique type id SOAP_TYPE__tds__GetGeoLocation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetGeoLocation() { _tds__GetGeoLocation::soap_default(NULL); }
	virtual ~_tds__GetGeoLocation() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetGeoLocationResponse
#define SOAP_TYPE__tds__GetGeoLocationResponse (1189)
/* tds:GetGeoLocationResponse */
class SOAP_CMAC _tds__GetGeoLocationResponse
{
public:
	std::vector<tt__LocationEntity * >Location;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:LocationEntity */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1189; } /* = unique type id SOAP_TYPE__tds__GetGeoLocationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetGeoLocationResponse() { _tds__GetGeoLocationResponse::soap_default(NULL); }
	virtual ~_tds__GetGeoLocationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetGeoLocation
#define SOAP_TYPE__tds__SetGeoLocation (1190)
/* tds:SetGeoLocation */
class SOAP_CMAC _tds__SetGeoLocation
{
public:
	std::vector<tt__LocationEntity * >Location;	/* required element of type tt:LocationEntity */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1190; } /* = unique type id SOAP_TYPE__tds__SetGeoLocation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetGeoLocation() { _tds__SetGeoLocation::soap_default(NULL); }
	virtual ~_tds__SetGeoLocation() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetGeoLocationResponse
#define SOAP_TYPE__tds__SetGeoLocationResponse (1191)
/* tds:SetGeoLocationResponse */
class SOAP_CMAC _tds__SetGeoLocationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1191; } /* = unique type id SOAP_TYPE__tds__SetGeoLocationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetGeoLocationResponse() { _tds__SetGeoLocationResponse::soap_default(NULL); }
	virtual ~_tds__SetGeoLocationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteGeoLocation
#define SOAP_TYPE__tds__DeleteGeoLocation (1192)
/* tds:DeleteGeoLocation */
class SOAP_CMAC _tds__DeleteGeoLocation
{
public:
	std::vector<tt__LocationEntity * >Location;	/* required element of type tt:LocationEntity */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1192; } /* = unique type id SOAP_TYPE__tds__DeleteGeoLocation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteGeoLocation() { _tds__DeleteGeoLocation::soap_default(NULL); }
	virtual ~_tds__DeleteGeoLocation() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteGeoLocationResponse
#define SOAP_TYPE__tds__DeleteGeoLocationResponse (1193)
/* tds:DeleteGeoLocationResponse */
class SOAP_CMAC _tds__DeleteGeoLocationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1193; } /* = unique type id SOAP_TYPE__tds__DeleteGeoLocationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteGeoLocationResponse() { _tds__DeleteGeoLocationResponse::soap_default(NULL); }
	virtual ~_tds__DeleteGeoLocationResponse() { }
};
#endif

#ifndef SOAP_TYPE_timg__Capabilities
#define SOAP_TYPE_timg__Capabilities (1194)
/* timg:Capabilities */
class SOAP_CMAC timg__Capabilities
{
public:
	std::vector<struct soap_dom_element >__any;
	bool *ImageStabilization;	/* optional attribute */
	bool *Presets;	/* optional attribute */
	bool *AdaptablePreset;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1194; } /* = unique type id SOAP_TYPE_timg__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         timg__Capabilities() { timg__Capabilities::soap_default(NULL); }
	virtual ~timg__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_timg__ImagingPreset
#define SOAP_TYPE_timg__ImagingPreset (1195)
/* timg:ImagingPreset */
class SOAP_CMAC timg__ImagingPreset
{
public:
	std::string Name;	/* required element of type tt:Name */
	std::string token;	/* required attribute */
	std::string type;	/* required attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1195; } /* = unique type id SOAP_TYPE_timg__ImagingPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         timg__ImagingPreset() { timg__ImagingPreset::soap_default(NULL); }
	virtual ~timg__ImagingPreset() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetServiceCapabilities
#define SOAP_TYPE__timg__GetServiceCapabilities (1196)
/* timg:GetServiceCapabilities */
class SOAP_CMAC _timg__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1196; } /* = unique type id SOAP_TYPE__timg__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetServiceCapabilities() { _timg__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_timg__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetServiceCapabilitiesResponse
#define SOAP_TYPE__timg__GetServiceCapabilitiesResponse (1197)
/* timg:GetServiceCapabilitiesResponse */
class SOAP_CMAC _timg__GetServiceCapabilitiesResponse
{
public:
	timg__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type timg:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1197; } /* = unique type id SOAP_TYPE__timg__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetServiceCapabilitiesResponse() { _timg__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_timg__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetImagingSettings
#define SOAP_TYPE__timg__GetImagingSettings (1198)
/* timg:GetImagingSettings */
class SOAP_CMAC _timg__GetImagingSettings
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1198; } /* = unique type id SOAP_TYPE__timg__GetImagingSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetImagingSettings() { _timg__GetImagingSettings::soap_default(NULL); }
	virtual ~_timg__GetImagingSettings() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetImagingSettingsResponse
#define SOAP_TYPE__timg__GetImagingSettingsResponse (1199)
/* timg:GetImagingSettingsResponse */
class SOAP_CMAC _timg__GetImagingSettingsResponse
{
public:
	tt__ImagingSettings20 *ImagingSettings;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ImagingSettings20 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1199; } /* = unique type id SOAP_TYPE__timg__GetImagingSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetImagingSettingsResponse() { _timg__GetImagingSettingsResponse::soap_default(NULL); }
	virtual ~_timg__GetImagingSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__SetImagingSettings
#define SOAP_TYPE__timg__SetImagingSettings (1200)
/* timg:SetImagingSettings */
class SOAP_CMAC _timg__SetImagingSettings
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	tt__ImagingSettings20 *ImagingSettings;	/* required element of type tt:ImagingSettings20 */
	bool *ForcePersistence;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1200; } /* = unique type id SOAP_TYPE__timg__SetImagingSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__SetImagingSettings() { _timg__SetImagingSettings::soap_default(NULL); }
	virtual ~_timg__SetImagingSettings() { }
};
#endif

#ifndef SOAP_TYPE__timg__SetImagingSettingsResponse
#define SOAP_TYPE__timg__SetImagingSettingsResponse (1201)
/* timg:SetImagingSettingsResponse */
class SOAP_CMAC _timg__SetImagingSettingsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1201; } /* = unique type id SOAP_TYPE__timg__SetImagingSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__SetImagingSettingsResponse() { _timg__SetImagingSettingsResponse::soap_default(NULL); }
	virtual ~_timg__SetImagingSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetOptions
#define SOAP_TYPE__timg__GetOptions (1202)
/* timg:GetOptions */
class SOAP_CMAC _timg__GetOptions
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1202; } /* = unique type id SOAP_TYPE__timg__GetOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetOptions() { _timg__GetOptions::soap_default(NULL); }
	virtual ~_timg__GetOptions() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetOptionsResponse
#define SOAP_TYPE__timg__GetOptionsResponse (1203)
/* timg:GetOptionsResponse */
class SOAP_CMAC _timg__GetOptionsResponse
{
public:
	tt__ImagingOptions20 *ImagingOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ImagingOptions20 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1203; } /* = unique type id SOAP_TYPE__timg__GetOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetOptionsResponse() { _timg__GetOptionsResponse::soap_default(NULL); }
	virtual ~_timg__GetOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__Move
#define SOAP_TYPE__timg__Move (1204)
/* timg:Move */
class SOAP_CMAC _timg__Move
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	tt__FocusMove *Focus;	/* required element of type tt:FocusMove */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1204; } /* = unique type id SOAP_TYPE__timg__Move */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__Move() { _timg__Move::soap_default(NULL); }
	virtual ~_timg__Move() { }
};
#endif

#ifndef SOAP_TYPE__timg__MoveResponse
#define SOAP_TYPE__timg__MoveResponse (1205)
/* timg:MoveResponse */
class SOAP_CMAC _timg__MoveResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1205; } /* = unique type id SOAP_TYPE__timg__MoveResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__MoveResponse() { _timg__MoveResponse::soap_default(NULL); }
	virtual ~_timg__MoveResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetMoveOptions
#define SOAP_TYPE__timg__GetMoveOptions (1206)
/* timg:GetMoveOptions */
class SOAP_CMAC _timg__GetMoveOptions
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1206; } /* = unique type id SOAP_TYPE__timg__GetMoveOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetMoveOptions() { _timg__GetMoveOptions::soap_default(NULL); }
	virtual ~_timg__GetMoveOptions() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetMoveOptionsResponse
#define SOAP_TYPE__timg__GetMoveOptionsResponse (1207)
/* timg:GetMoveOptionsResponse */
class SOAP_CMAC _timg__GetMoveOptionsResponse
{
public:
	tt__MoveOptions20 *MoveOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MoveOptions20 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1207; } /* = unique type id SOAP_TYPE__timg__GetMoveOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetMoveOptionsResponse() { _timg__GetMoveOptionsResponse::soap_default(NULL); }
	virtual ~_timg__GetMoveOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__Stop
#define SOAP_TYPE__timg__Stop (1208)
/* timg:Stop */
class SOAP_CMAC _timg__Stop
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1208; } /* = unique type id SOAP_TYPE__timg__Stop */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__Stop() { _timg__Stop::soap_default(NULL); }
	virtual ~_timg__Stop() { }
};
#endif

#ifndef SOAP_TYPE__timg__StopResponse
#define SOAP_TYPE__timg__StopResponse (1209)
/* timg:StopResponse */
class SOAP_CMAC _timg__StopResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1209; } /* = unique type id SOAP_TYPE__timg__StopResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__StopResponse() { _timg__StopResponse::soap_default(NULL); }
	virtual ~_timg__StopResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetStatus
#define SOAP_TYPE__timg__GetStatus (1210)
/* timg:GetStatus */
class SOAP_CMAC _timg__GetStatus
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1210; } /* = unique type id SOAP_TYPE__timg__GetStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetStatus() { _timg__GetStatus::soap_default(NULL); }
	virtual ~_timg__GetStatus() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetStatusResponse
#define SOAP_TYPE__timg__GetStatusResponse (1211)
/* timg:GetStatusResponse */
class SOAP_CMAC _timg__GetStatusResponse
{
public:
	tt__ImagingStatus20 *Status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ImagingStatus20 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1211; } /* = unique type id SOAP_TYPE__timg__GetStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetStatusResponse() { _timg__GetStatusResponse::soap_default(NULL); }
	virtual ~_timg__GetStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetPresets
#define SOAP_TYPE__timg__GetPresets (1212)
/* timg:GetPresets */
class SOAP_CMAC _timg__GetPresets
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1212; } /* = unique type id SOAP_TYPE__timg__GetPresets */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetPresets() { _timg__GetPresets::soap_default(NULL); }
	virtual ~_timg__GetPresets() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetPresetsResponse
#define SOAP_TYPE__timg__GetPresetsResponse (1213)
/* timg:GetPresetsResponse */
class SOAP_CMAC _timg__GetPresetsResponse
{
public:
	std::vector<timg__ImagingPreset * >Preset;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type timg:ImagingPreset */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1213; } /* = unique type id SOAP_TYPE__timg__GetPresetsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetPresetsResponse() { _timg__GetPresetsResponse::soap_default(NULL); }
	virtual ~_timg__GetPresetsResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetCurrentPreset
#define SOAP_TYPE__timg__GetCurrentPreset (1214)
/* timg:GetCurrentPreset */
class SOAP_CMAC _timg__GetCurrentPreset
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1214; } /* = unique type id SOAP_TYPE__timg__GetCurrentPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetCurrentPreset() { _timg__GetCurrentPreset::soap_default(NULL); }
	virtual ~_timg__GetCurrentPreset() { }
};
#endif

#ifndef SOAP_TYPE__timg__GetCurrentPresetResponse
#define SOAP_TYPE__timg__GetCurrentPresetResponse (1215)
/* timg:GetCurrentPresetResponse */
class SOAP_CMAC _timg__GetCurrentPresetResponse
{
public:
	timg__ImagingPreset *Preset;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type timg:ImagingPreset */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1215; } /* = unique type id SOAP_TYPE__timg__GetCurrentPresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__GetCurrentPresetResponse() { _timg__GetCurrentPresetResponse::soap_default(NULL); }
	virtual ~_timg__GetCurrentPresetResponse() { }
};
#endif

#ifndef SOAP_TYPE__timg__SetCurrentPreset
#define SOAP_TYPE__timg__SetCurrentPreset (1216)
/* timg:SetCurrentPreset */
class SOAP_CMAC _timg__SetCurrentPreset
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	std::string PresetToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1216; } /* = unique type id SOAP_TYPE__timg__SetCurrentPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__SetCurrentPreset() { _timg__SetCurrentPreset::soap_default(NULL); }
	virtual ~_timg__SetCurrentPreset() { }
};
#endif

#ifndef SOAP_TYPE__timg__SetCurrentPresetResponse
#define SOAP_TYPE__timg__SetCurrentPresetResponse (1217)
/* timg:SetCurrentPresetResponse */
class SOAP_CMAC _timg__SetCurrentPresetResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1217; } /* = unique type id SOAP_TYPE__timg__SetCurrentPresetResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _timg__SetCurrentPresetResponse() { _timg__SetCurrentPresetResponse::soap_default(NULL); }
	virtual ~_timg__SetCurrentPresetResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__DataEntity
#define SOAP_TYPE_ns1__DataEntity (1218)
/* ns1:DataEntity */
class SOAP_CMAC ns1__DataEntity
{
public:
	std::string token;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1218; } /* = unique type id SOAP_TYPE_ns1__DataEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__DataEntity() { ns1__DataEntity::soap_default(NULL); }
	virtual ~ns1__DataEntity() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Attribute
#define SOAP_TYPE_ns1__Attribute (1219)
/* ns1:Attribute */
class SOAP_CMAC ns1__Attribute
{
public:
	std::vector<struct soap_dom_element >__any;
	std::string Name;	/* required attribute */
	std::string *Value;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1219; } /* = unique type id SOAP_TYPE_ns1__Attribute */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Attribute() { ns1__Attribute::soap_default(NULL); }
	virtual ~ns1__Attribute() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSource
#define SOAP_TYPE_tt__VideoSource (210)
/* tt:VideoSource */
class SOAP_CMAC tt__VideoSource : public tt__DeviceEntity
{
public:
	float Framerate;	/* required element of type xsd:float */
	tt__VideoResolution *Resolution;	/* required element of type tt:VideoResolution */
	tt__ImagingSettings *Imaging;	/* optional element of type tt:ImagingSettings */
	tt__VideoSourceExtension *Extension;	/* optional element of type tt:VideoSourceExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 210; } /* = unique type id SOAP_TYPE_tt__VideoSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSource() { tt__VideoSource::soap_default(NULL); }
	virtual ~tt__VideoSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSource
#define SOAP_TYPE_tt__AudioSource (213)
/* tt:AudioSource */
class SOAP_CMAC tt__AudioSource : public tt__DeviceEntity
{
public:
	int Channels;	/* required element of type xsd:int */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 213; } /* = unique type id SOAP_TYPE_tt__AudioSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSource() { tt__AudioSource::soap_default(NULL); }
	virtual ~tt__AudioSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfiguration
#define SOAP_TYPE_tt__VideoSourceConfiguration (218)
/* tt:VideoSourceConfiguration */
class SOAP_CMAC tt__VideoSourceConfiguration : public tt__ConfigurationEntity
{
public:
	std::string SourceToken;	/* required element of type tt:ReferenceToken */
	tt__IntRectangle *Bounds;	/* required element of type tt:IntRectangle */
	std::vector<struct soap_dom_element >__any;
	tt__VideoSourceConfigurationExtension *Extension;	/* optional element of type tt:VideoSourceConfigurationExtension */
	std::string *ViewMode;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 218; } /* = unique type id SOAP_TYPE_tt__VideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfiguration() { tt__VideoSourceConfiguration::soap_default(NULL); }
	virtual ~tt__VideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderConfiguration
#define SOAP_TYPE_tt__VideoEncoderConfiguration (232)
/* tt:VideoEncoderConfiguration */
class SOAP_CMAC tt__VideoEncoderConfiguration : public tt__ConfigurationEntity
{
public:
	enum tt__VideoEncoding Encoding;	/* required element of type tt:VideoEncoding */
	tt__VideoResolution *Resolution;	/* required element of type tt:VideoResolution */
	float Quality;	/* required element of type xsd:float */
	tt__VideoRateControl *RateControl;	/* optional element of type tt:VideoRateControl */
	tt__Mpeg4Configuration *MPEG4;	/* optional element of type tt:Mpeg4Configuration */
	tt__H264Configuration *H264;	/* optional element of type tt:H264Configuration */
	tt__MulticastConfiguration *Multicast;	/* required element of type tt:MulticastConfiguration */
	LONG64 SessionTimeout;	/* external */
	std::vector<struct soap_dom_element >__any;
	bool *GuaranteedFrameRate;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 232; } /* = unique type id SOAP_TYPE_tt__VideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderConfiguration() { tt__VideoEncoderConfiguration::soap_default(NULL); }
	virtual ~tt__VideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__JpegOptions2
#define SOAP_TYPE_tt__JpegOptions2 (241)
/* tt:JpegOptions2 */
class SOAP_CMAC tt__JpegOptions2 : public tt__JpegOptions
{
public:
	tt__IntRange *BitrateRange;	/* required element of type tt:IntRange */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 241; } /* = unique type id SOAP_TYPE_tt__JpegOptions2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__JpegOptions2() { tt__JpegOptions2::soap_default(NULL); }
	virtual ~tt__JpegOptions2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Options2
#define SOAP_TYPE_tt__Mpeg4Options2 (243)
/* tt:Mpeg4Options2 */
class SOAP_CMAC tt__Mpeg4Options2 : public tt__Mpeg4Options
{
public:
	tt__IntRange *BitrateRange;	/* required element of type tt:IntRange */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 243; } /* = unique type id SOAP_TYPE_tt__Mpeg4Options2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4Options2() { tt__Mpeg4Options2::soap_default(NULL); }
	virtual ~tt__Mpeg4Options2() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264Options2
#define SOAP_TYPE_tt__H264Options2 (245)
/* tt:H264Options2 */
class SOAP_CMAC tt__H264Options2 : public tt__H264Options
{
public:
	tt__IntRange *BitrateRange;	/* required element of type tt:IntRange */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 245; } /* = unique type id SOAP_TYPE_tt__H264Options2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264Options2() { tt__H264Options2::soap_default(NULL); }
	virtual ~tt__H264Options2() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoder2Configuration
#define SOAP_TYPE_tt__VideoEncoder2Configuration (246)
/* tt:VideoEncoder2Configuration */
class SOAP_CMAC tt__VideoEncoder2Configuration : public tt__ConfigurationEntity
{
public:
	std::string Encoding;	/* required element of type xsd:string */
	tt__VideoResolution2 *Resolution;	/* required element of type tt:VideoResolution2 */
	tt__VideoRateControl2 *RateControl;	/* optional element of type tt:VideoRateControl2 */
	tt__MulticastConfiguration *Multicast;	/* optional element of type tt:MulticastConfiguration */
	float Quality;	/* required element of type xsd:float */
	std::vector<struct soap_dom_element >__any;
	int *GovLength;	/* optional attribute */
	std::string *Profile;	/* optional attribute */
	bool *GuaranteedFrameRate;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 246; } /* = unique type id SOAP_TYPE_tt__VideoEncoder2Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoder2Configuration() { tt__VideoEncoder2Configuration::soap_default(NULL); }
	virtual ~tt__VideoEncoder2Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSourceConfiguration
#define SOAP_TYPE_tt__AudioSourceConfiguration (250)
/* tt:AudioSourceConfiguration */
class SOAP_CMAC tt__AudioSourceConfiguration : public tt__ConfigurationEntity
{
public:
	std::string SourceToken;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 250; } /* = unique type id SOAP_TYPE_tt__AudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSourceConfiguration() { tt__AudioSourceConfiguration::soap_default(NULL); }
	virtual ~tt__AudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfiguration
#define SOAP_TYPE_tt__AudioEncoderConfiguration (253)
/* tt:AudioEncoderConfiguration */
class SOAP_CMAC tt__AudioEncoderConfiguration : public tt__ConfigurationEntity
{
public:
	enum tt__AudioEncoding Encoding;	/* required element of type tt:AudioEncoding */
	int Bitrate;	/* required element of type xsd:int */
	int SampleRate;	/* required element of type xsd:int */
	tt__MulticastConfiguration *Multicast;	/* required element of type tt:MulticastConfiguration */
	LONG64 SessionTimeout;	/* external */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 253; } /* = unique type id SOAP_TYPE_tt__AudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoderConfiguration() { tt__AudioEncoderConfiguration::soap_default(NULL); }
	virtual ~tt__AudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoder2Configuration
#define SOAP_TYPE_tt__AudioEncoder2Configuration (256)
/* tt:AudioEncoder2Configuration */
class SOAP_CMAC tt__AudioEncoder2Configuration : public tt__ConfigurationEntity
{
public:
	std::string Encoding;	/* required element of type xsd:string */
	tt__MulticastConfiguration *Multicast;	/* optional element of type tt:MulticastConfiguration */
	int Bitrate;	/* required element of type xsd:int */
	int SampleRate;	/* required element of type xsd:int */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 256; } /* = unique type id SOAP_TYPE_tt__AudioEncoder2Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoder2Configuration() { tt__AudioEncoder2Configuration::soap_default(NULL); }
	virtual ~tt__AudioEncoder2Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoAnalyticsConfiguration
#define SOAP_TYPE_tt__VideoAnalyticsConfiguration (258)
/* tt:VideoAnalyticsConfiguration */
class SOAP_CMAC tt__VideoAnalyticsConfiguration : public tt__ConfigurationEntity
{
public:
	tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration;	/* required element of type tt:AnalyticsEngineConfiguration */
	tt__RuleEngineConfiguration *RuleEngineConfiguration;	/* required element of type tt:RuleEngineConfiguration */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 258; } /* = unique type id SOAP_TYPE_tt__VideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoAnalyticsConfiguration() { tt__VideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~tt__VideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfiguration
#define SOAP_TYPE_tt__MetadataConfiguration (259)
/* tt:MetadataConfiguration */
class SOAP_CMAC tt__MetadataConfiguration : public tt__ConfigurationEntity
{
public:
	tt__PTZFilter *PTZStatus;	/* optional element of type tt:PTZFilter */
	tt__EventSubscription *Events;	/* optional element of type tt:EventSubscription */
	bool *Analytics;	/* optional element of type xsd:boolean */
	tt__MulticastConfiguration *Multicast;	/* required element of type tt:MulticastConfiguration */
	LONG64 SessionTimeout;	/* external */
	std::vector<struct soap_dom_element >__any;
	tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration;	/* optional element of type tt:AnalyticsEngineConfiguration */
	tt__MetadataConfigurationExtension *Extension;	/* optional element of type tt:MetadataConfigurationExtension */
	std::string *CompressionType;	/* optional attribute */
	bool *GeoLocation;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 259; } /* = unique type id SOAP_TYPE_tt__MetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfiguration() { tt__MetadataConfiguration::soap_default(NULL); }
	virtual ~tt__MetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutput
#define SOAP_TYPE_tt__VideoOutput (268)
/* tt:VideoOutput */
class SOAP_CMAC tt__VideoOutput : public tt__DeviceEntity
{
public:
	tt__Layout *Layout;	/* required element of type tt:Layout */
	tt__VideoResolution *Resolution;	/* optional element of type tt:VideoResolution */
	float *RefreshRate;	/* optional element of type xsd:float */
	float *AspectRatio;	/* optional element of type xsd:float */
	tt__VideoOutputExtension *Extension;	/* optional element of type tt:VideoOutputExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 268; } /* = unique type id SOAP_TYPE_tt__VideoOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutput() { tt__VideoOutput::soap_default(NULL); }
	virtual ~tt__VideoOutput() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutputConfiguration
#define SOAP_TYPE_tt__VideoOutputConfiguration (270)
/* tt:VideoOutputConfiguration */
class SOAP_CMAC tt__VideoOutputConfiguration : public tt__ConfigurationEntity
{
public:
	std::string OutputToken;	/* required element of type tt:ReferenceToken */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 270; } /* = unique type id SOAP_TYPE_tt__VideoOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutputConfiguration() { tt__VideoOutputConfiguration::soap_default(NULL); }
	virtual ~tt__VideoOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioOutput
#define SOAP_TYPE_tt__AudioOutput (277)
/* tt:AudioOutput */
class SOAP_CMAC tt__AudioOutput : public tt__DeviceEntity
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 277; } /* = unique type id SOAP_TYPE_tt__AudioOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioOutput() { tt__AudioOutput::soap_default(NULL); }
	virtual ~tt__AudioOutput() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioOutputConfiguration
#define SOAP_TYPE_tt__AudioOutputConfiguration (278)
/* tt:AudioOutputConfiguration */
class SOAP_CMAC tt__AudioOutputConfiguration : public tt__ConfigurationEntity
{
public:
	std::string OutputToken;	/* required element of type tt:ReferenceToken */
	std::string *SendPrimacy;	/* optional element of type xsd:anyURI */
	int OutputLevel;	/* required element of type xsd:int */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 278; } /* = unique type id SOAP_TYPE_tt__AudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioOutputConfiguration() { tt__AudioOutputConfiguration::soap_default(NULL); }
	virtual ~tt__AudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfiguration
#define SOAP_TYPE_tt__AudioDecoderConfiguration (280)
/* tt:AudioDecoderConfiguration */
class SOAP_CMAC tt__AudioDecoderConfiguration : public tt__ConfigurationEntity
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 280; } /* = unique type id SOAP_TYPE_tt__AudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioDecoderConfiguration() { tt__AudioDecoderConfiguration::soap_default(NULL); }
	virtual ~tt__AudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterface
#define SOAP_TYPE_tt__NetworkInterface (291)
/* tt:NetworkInterface */
class SOAP_CMAC tt__NetworkInterface : public tt__DeviceEntity
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	tt__NetworkInterfaceInfo *Info;	/* optional element of type tt:NetworkInterfaceInfo */
	tt__NetworkInterfaceLink *Link;	/* optional element of type tt:NetworkInterfaceLink */
	tt__IPv4NetworkInterface *IPv4;	/* optional element of type tt:IPv4NetworkInterface */
	tt__IPv6NetworkInterface *IPv6;	/* optional element of type tt:IPv6NetworkInterface */
	tt__NetworkInterfaceExtension *Extension;	/* optional element of type tt:NetworkInterfaceExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 291; } /* = unique type id SOAP_TYPE_tt__NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterface() { tt__NetworkInterface::soap_default(NULL); }
	virtual ~tt__NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateUsage
#define SOAP_TYPE_tt__CertificateUsage (395)
/* Primitive tt:CertificateUsage schema type: */
class SOAP_CMAC tt__CertificateUsage
{
public:
	std::string __item;
	bool Critical;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 395; } /* = unique type id SOAP_TYPE_tt__CertificateUsage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateUsage() { tt__CertificateUsage::soap_default(NULL); }
	virtual ~tt__CertificateUsage() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelayOutput
#define SOAP_TYPE_tt__RelayOutput (404)
/* tt:RelayOutput */
class SOAP_CMAC tt__RelayOutput : public tt__DeviceEntity
{
public:
	tt__RelayOutputSettings *Properties;	/* required element of type tt:RelayOutputSettings */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 404; } /* = unique type id SOAP_TYPE_tt__RelayOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelayOutput() { tt__RelayOutput::soap_default(NULL); }
	virtual ~tt__RelayOutput() { }
};
#endif

#ifndef SOAP_TYPE_tt__DigitalInput
#define SOAP_TYPE_tt__DigitalInput (405)
/* tt:DigitalInput */
class SOAP_CMAC tt__DigitalInput : public tt__DeviceEntity
{
public:
	std::vector<struct soap_dom_element >__any;
	enum tt__DigitalIdleState *IdleState;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 405; } /* = unique type id SOAP_TYPE_tt__DigitalInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DigitalInput() { tt__DigitalInput::soap_default(NULL); }
	virtual ~tt__DigitalInput() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZNode
#define SOAP_TYPE_tt__PTZNode (406)
/* tt:PTZNode */
class SOAP_CMAC tt__PTZNode : public tt__DeviceEntity
{
public:
	std::string *Name;	/* optional element of type tt:Name */
	tt__PTZSpaces *SupportedPTZSpaces;	/* required element of type tt:PTZSpaces */
	int MaximumNumberOfPresets;	/* required element of type xsd:int */
	bool HomeSupported;	/* required element of type xsd:boolean */
	std::vector<std::string >AuxiliaryCommands;	/* optional element of type tt:AuxiliaryData */
	tt__PTZNodeExtension *Extension;	/* optional element of type tt:PTZNodeExtension */
	bool *FixedHomePosition;	/* optional attribute */
	bool *GeoMove;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 406; } /* = unique type id SOAP_TYPE_tt__PTZNode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZNode() { tt__PTZNode::soap_default(NULL); }
	virtual ~tt__PTZNode() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfiguration
#define SOAP_TYPE_tt__PTZConfiguration (411)
/* tt:PTZConfiguration */
class SOAP_CMAC tt__PTZConfiguration : public tt__ConfigurationEntity
{
public:
	std::string NodeToken;	/* required element of type tt:ReferenceToken */
	std::string *DefaultAbsolutePantTiltPositionSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultAbsoluteZoomPositionSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultRelativePanTiltTranslationSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultRelativeZoomTranslationSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultContinuousPanTiltVelocitySpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultContinuousZoomVelocitySpace;	/* optional element of type xsd:anyURI */
	tt__PTZSpeed *DefaultPTZSpeed;	/* optional element of type tt:PTZSpeed */
	LONG64 *DefaultPTZTimeout;	/* optional element of type xsd:duration */
	tt__PanTiltLimits *PanTiltLimits;	/* optional element of type tt:PanTiltLimits */
	tt__ZoomLimits *ZoomLimits;	/* optional element of type tt:ZoomLimits */
	tt__PTZConfigurationExtension *Extension;	/* optional element of type tt:PTZConfigurationExtension */
	int *MoveRamp;	/* optional attribute */
	int *PresetRamp;	/* optional attribute */
	int *PresetTourRamp;	/* optional attribute */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 411; } /* = unique type id SOAP_TYPE_tt__PTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfiguration() { tt__PTZConfiguration::soap_default(NULL); }
	virtual ~tt__PTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventFilter
#define SOAP_TYPE_tt__EventFilter (562)
/* tt:EventFilter */
class SOAP_CMAC tt__EventFilter : public wsnt__FilterType
{
public:
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 562; } /* = unique type id SOAP_TYPE_tt__EventFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventFilter() { tt__EventFilter::soap_default(NULL); }
	virtual ~tt__EventFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngine
#define SOAP_TYPE_tt__AnalyticsEngine (598)
/* tt:AnalyticsEngine */
class SOAP_CMAC tt__AnalyticsEngine : public tt__ConfigurationEntity
{
public:
	tt__AnalyticsDeviceEngineConfiguration *AnalyticsEngineConfiguration;	/* required element of type tt:AnalyticsDeviceEngineConfiguration */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 598; } /* = unique type id SOAP_TYPE_tt__AnalyticsEngine */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngine() { tt__AnalyticsEngine::soap_default(NULL); }
	virtual ~tt__AnalyticsEngine() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineInput
#define SOAP_TYPE_tt__AnalyticsEngineInput (604)
/* tt:AnalyticsEngineInput */
class SOAP_CMAC tt__AnalyticsEngineInput : public tt__ConfigurationEntity
{
public:
	tt__SourceIdentification *SourceIdentification;	/* required element of type tt:SourceIdentification */
	tt__VideoEncoderConfiguration *VideoInput;	/* required element of type tt:VideoEncoderConfiguration */
	tt__MetadataInput *MetadataInput;	/* required element of type tt:MetadataInput */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 604; } /* = unique type id SOAP_TYPE_tt__AnalyticsEngineInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineInput() { tt__AnalyticsEngineInput::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineInput() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineControl
#define SOAP_TYPE_tt__AnalyticsEngineControl (609)
/* tt:AnalyticsEngineControl */
class SOAP_CMAC tt__AnalyticsEngineControl : public tt__ConfigurationEntity
{
public:
	std::string EngineToken;	/* required element of type tt:ReferenceToken */
	std::string EngineConfigToken;	/* required element of type tt:ReferenceToken */
	std::vector<std::string >InputToken;	/* required element of type tt:ReferenceToken */
	std::vector<std::string >ReceiverToken;	/* required element of type tt:ReferenceToken */
	tt__MulticastConfiguration *Multicast;	/* optional element of type tt:MulticastConfiguration */
	tt__Config *Subscription;	/* required element of type tt:Config */
	enum tt__ModeOfOperation Mode;	/* required element of type tt:ModeOfOperation */
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 609; } /* = unique type id SOAP_TYPE_tt__AnalyticsEngineControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineControl() { tt__AnalyticsEngineControl::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineControl() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDConfiguration
#define SOAP_TYPE_tt__OSDConfiguration (636)
/* tt:OSDConfiguration */
class SOAP_CMAC tt__OSDConfiguration : public tt__DeviceEntity
{
public:
	class tt__OSDReference *VideoSourceConfigurationToken;	/* required element of type tt:OSDReference */
	enum tt__OSDType Type;	/* required element of type tt:OSDType */
	tt__OSDPosConfiguration *Position;	/* required element of type tt:OSDPosConfiguration */
	tt__OSDTextConfiguration *TextString;	/* optional element of type tt:OSDTextConfiguration */
	tt__OSDImgConfiguration *Image;	/* optional element of type tt:OSDImgConfiguration */
	tt__OSDConfigurationExtension *Extension;	/* optional element of type tt:OSDConfigurationExtension */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 636; } /* = unique type id SOAP_TYPE_tt__OSDConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDConfiguration() { tt__OSDConfiguration::soap_default(NULL); }
	virtual ~tt__OSDConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType
#define SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType (672)
/* wsnt:SubscribeCreationFailedFaultType */
class SOAP_CMAC wsnt__SubscribeCreationFailedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 672; } /* = unique type id SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__SubscribeCreationFailedFaultType() { wsnt__SubscribeCreationFailedFaultType::soap_default(NULL); }
	virtual ~wsnt__SubscribeCreationFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidFilterFaultType
#define SOAP_TYPE_wsnt__InvalidFilterFaultType (673)
/* wsnt:InvalidFilterFaultType */
class SOAP_CMAC wsnt__InvalidFilterFaultType : public wsrfbf__BaseFaultType
{
public:
	std::vector<std::string >UnknownFilter;	/* required element of type xsd:QName */
public:
	virtual int soap_type() const { return 673; } /* = unique type id SOAP_TYPE_wsnt__InvalidFilterFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidFilterFaultType() { wsnt__InvalidFilterFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidFilterFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType (674)
/* wsnt:TopicExpressionDialectUnknownFaultType */
class SOAP_CMAC wsnt__TopicExpressionDialectUnknownFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 674; } /* = unique type id SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__TopicExpressionDialectUnknownFaultType() { wsnt__TopicExpressionDialectUnknownFaultType::soap_default(NULL); }
	virtual ~wsnt__TopicExpressionDialectUnknownFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType (675)
/* wsnt:InvalidTopicExpressionFaultType */
class SOAP_CMAC wsnt__InvalidTopicExpressionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 675; } /* = unique type id SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidTopicExpressionFaultType() { wsnt__InvalidTopicExpressionFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidTopicExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__TopicNotSupportedFaultType
#define SOAP_TYPE_wsnt__TopicNotSupportedFaultType (676)
/* wsnt:TopicNotSupportedFaultType */
class SOAP_CMAC wsnt__TopicNotSupportedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 676; } /* = unique type id SOAP_TYPE_wsnt__TopicNotSupportedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__TopicNotSupportedFaultType() { wsnt__TopicNotSupportedFaultType::soap_default(NULL); }
	virtual ~wsnt__TopicNotSupportedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType (677)
/* wsnt:MultipleTopicsSpecifiedFaultType */
class SOAP_CMAC wsnt__MultipleTopicsSpecifiedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 677; } /* = unique type id SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__MultipleTopicsSpecifiedFaultType() { wsnt__MultipleTopicsSpecifiedFaultType::soap_default(NULL); }
	virtual ~wsnt__MultipleTopicsSpecifiedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType (678)
/* wsnt:InvalidProducerPropertiesExpressionFaultType */
class SOAP_CMAC wsnt__InvalidProducerPropertiesExpressionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 678; } /* = unique type id SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidProducerPropertiesExpressionFaultType() { wsnt__InvalidProducerPropertiesExpressionFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidProducerPropertiesExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType (679)
/* wsnt:InvalidMessageContentExpressionFaultType */
class SOAP_CMAC wsnt__InvalidMessageContentExpressionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 679; } /* = unique type id SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidMessageContentExpressionFaultType() { wsnt__InvalidMessageContentExpressionFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidMessageContentExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType (680)
/* wsnt:UnrecognizedPolicyRequestFaultType */
class SOAP_CMAC wsnt__UnrecognizedPolicyRequestFaultType : public wsrfbf__BaseFaultType
{
public:
	std::vector<std::string >UnrecognizedPolicy;	/* optional element of type xsd:QName */
public:
	virtual int soap_type() const { return 680; } /* = unique type id SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnrecognizedPolicyRequestFaultType() { wsnt__UnrecognizedPolicyRequestFaultType::soap_default(NULL); }
	virtual ~wsnt__UnrecognizedPolicyRequestFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType (681)
/* wsnt:UnsupportedPolicyRequestFaultType */
class SOAP_CMAC wsnt__UnsupportedPolicyRequestFaultType : public wsrfbf__BaseFaultType
{
public:
	std::vector<std::string >UnsupportedPolicy;	/* optional element of type xsd:QName */
public:
	virtual int soap_type() const { return 681; } /* = unique type id SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnsupportedPolicyRequestFaultType() { wsnt__UnsupportedPolicyRequestFaultType::soap_default(NULL); }
	virtual ~wsnt__UnsupportedPolicyRequestFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType (682)
/* wsnt:NotifyMessageNotSupportedFaultType */
class SOAP_CMAC wsnt__NotifyMessageNotSupportedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 682; } /* = unique type id SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__NotifyMessageNotSupportedFaultType() { wsnt__NotifyMessageNotSupportedFaultType::soap_default(NULL); }
	virtual ~wsnt__NotifyMessageNotSupportedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType (683)
/* wsnt:UnacceptableInitialTerminationTimeFaultType */
class SOAP_CMAC wsnt__UnacceptableInitialTerminationTimeFaultType : public wsrfbf__BaseFaultType
{
public:
	time_t MinimumTime;	/* required element of type xsd:dateTime */
	time_t *MaximumTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 683; } /* = unique type id SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnacceptableInitialTerminationTimeFaultType() { wsnt__UnacceptableInitialTerminationTimeFaultType::soap_default(NULL); }
	virtual ~wsnt__UnacceptableInitialTerminationTimeFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType (684)
/* wsnt:NoCurrentMessageOnTopicFaultType */
class SOAP_CMAC wsnt__NoCurrentMessageOnTopicFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 684; } /* = unique type id SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__NoCurrentMessageOnTopicFaultType() { wsnt__NoCurrentMessageOnTopicFaultType::soap_default(NULL); }
	virtual ~wsnt__NoCurrentMessageOnTopicFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToGetMessagesFaultType
#define SOAP_TYPE_wsnt__UnableToGetMessagesFaultType (685)
/* wsnt:UnableToGetMessagesFaultType */
class SOAP_CMAC wsnt__UnableToGetMessagesFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 685; } /* = unique type id SOAP_TYPE_wsnt__UnableToGetMessagesFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToGetMessagesFaultType() { wsnt__UnableToGetMessagesFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToGetMessagesFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType (686)
/* wsnt:UnableToDestroyPullPointFaultType */
class SOAP_CMAC wsnt__UnableToDestroyPullPointFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 686; } /* = unique type id SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToDestroyPullPointFaultType() { wsnt__UnableToDestroyPullPointFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToDestroyPullPointFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType
#define SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType (687)
/* wsnt:UnableToCreatePullPointFaultType */
class SOAP_CMAC wsnt__UnableToCreatePullPointFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 687; } /* = unique type id SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToCreatePullPointFaultType() { wsnt__UnableToCreatePullPointFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToCreatePullPointFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType (688)
/* wsnt:UnacceptableTerminationTimeFaultType */
class SOAP_CMAC wsnt__UnacceptableTerminationTimeFaultType : public wsrfbf__BaseFaultType
{
public:
	time_t MinimumTime;	/* required element of type xsd:dateTime */
	time_t *MaximumTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 688; } /* = unique type id SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnacceptableTerminationTimeFaultType() { wsnt__UnacceptableTerminationTimeFaultType::soap_default(NULL); }
	virtual ~wsnt__UnacceptableTerminationTimeFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType (689)
/* wsnt:UnableToDestroySubscriptionFaultType */
class SOAP_CMAC wsnt__UnableToDestroySubscriptionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 689; } /* = unique type id SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToDestroySubscriptionFaultType() { wsnt__UnableToDestroySubscriptionFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToDestroySubscriptionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__PauseFailedFaultType
#define SOAP_TYPE_wsnt__PauseFailedFaultType (690)
/* wsnt:PauseFailedFaultType */
class SOAP_CMAC wsnt__PauseFailedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 690; } /* = unique type id SOAP_TYPE_wsnt__PauseFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__PauseFailedFaultType() { wsnt__PauseFailedFaultType::soap_default(NULL); }
	virtual ~wsnt__PauseFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__ResumeFailedFaultType
#define SOAP_TYPE_wsnt__ResumeFailedFaultType (691)
/* wsnt:ResumeFailedFaultType */
class SOAP_CMAC wsnt__ResumeFailedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 691; } /* = unique type id SOAP_TYPE_wsnt__ResumeFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__ResumeFailedFaultType() { wsnt__ResumeFailedFaultType::soap_default(NULL); }
	virtual ~wsnt__ResumeFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE__wstop__TopicNamespaceType_Topic
#define SOAP_TYPE__wstop__TopicNamespaceType_Topic (2005)
/* wstop:TopicNamespaceType-Topic */
class SOAP_CMAC _wstop__TopicNamespaceType_Topic
{
public:
	wstop__Documentation *documentation;	/* optional element of type wstop:Documentation */
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	wstop__QueryExpressionType *MessagePattern;	/* optional element of type wstop:QueryExpressionType */
	std::vector<class wstop__TopicType * >Topic;	/* optional element of type wstop:TopicType */
	std::vector<struct soap_dom_element >__any;
	std::string name;	/* required attribute */
	std::string *messageTypes;	/* optional attribute */
	bool final;	/* optional attribute */
	std::string *parent;	/* optional attribute */
public:
	virtual int soap_type() const { return 2005; } /* = unique type id SOAP_TYPE__wstop__TopicNamespaceType_Topic */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wstop__TopicNamespaceType_Topic() { _wstop__TopicNamespaceType_Topic::soap_default(NULL); }
	virtual ~_wstop__TopicNamespaceType_Topic() { }
};
#endif

#ifndef SOAP_TYPE_wstop__TopicNamespaceType
#define SOAP_TYPE_wstop__TopicNamespaceType (718)
/* wstop:TopicNamespaceType */
class SOAP_CMAC wstop__TopicNamespaceType : public wstop__ExtensibleDocumented
{
public:
	std::vector<_wstop__TopicNamespaceType_Topic >*Topic;	/* optional element of type wstop:TopicNamespaceType-Topic */
	std::vector<struct soap_dom_element >__any;
	std::string *name;	/* optional attribute */
	std::string targetNamespace;	/* required attribute */
	bool final;	/* optional attribute */
public:
	virtual int soap_type() const { return 718; } /* = unique type id SOAP_TYPE_wstop__TopicNamespaceType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__TopicNamespaceType() { wstop__TopicNamespaceType::soap_default(NULL); }
	virtual ~wstop__TopicNamespaceType() { }
};
#endif

#ifndef SOAP_TYPE_wstop__TopicType
#define SOAP_TYPE_wstop__TopicType (719)
/* wstop:TopicType */
class SOAP_CMAC wstop__TopicType : public wstop__ExtensibleDocumented
{
public:
	wstop__QueryExpressionType *MessagePattern;	/* optional element of type wstop:QueryExpressionType */
	std::vector<wstop__TopicType * >Topic;	/* optional element of type wstop:TopicType */
	std::vector<struct soap_dom_element >__any;
	std::string name;	/* required attribute */
	std::string *messageTypes;	/* optional attribute */
	bool final;	/* optional attribute */
public:
	virtual int soap_type() const { return 719; } /* = unique type id SOAP_TYPE_wstop__TopicType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__TopicType() { wstop__TopicType::soap_default(NULL); }
	virtual ~wstop__TopicType() { }
};
#endif

#ifndef SOAP_TYPE_wstop__TopicSetType
#define SOAP_TYPE_wstop__TopicSetType (720)
/* wstop:TopicSetType */
class SOAP_CMAC wstop__TopicSetType : public wstop__ExtensibleDocumented
{
public:
	std::vector<struct soap_dom_element >__any;
public:
	virtual int soap_type() const { return 720; } /* = unique type id SOAP_TYPE_wstop__TopicSetType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__TopicSetType() { wstop__TopicSetType::soap_default(NULL); }
	virtual ~wstop__TopicSetType() { }
};
#endif

#ifndef SOAP_TYPE_tmd__SerialPort
#define SOAP_TYPE_tmd__SerialPort (728)
/* tmd:SerialPort */
class SOAP_CMAC tmd__SerialPort : public tt__DeviceEntity
{
public:
	std::vector<struct soap_dom_element >__any;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
public:
	virtual int soap_type() const { return 728; } /* = unique type id SOAP_TYPE_tmd__SerialPort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__SerialPort() { tmd__SerialPort::soap_default(NULL); }
	virtual ~tmd__SerialPort() { }
};
#endif

#ifndef SOAP_TYPE_wsrfr__ResourceUnknownFaultType
#define SOAP_TYPE_wsrfr__ResourceUnknownFaultType (794)
/* wsrfr:ResourceUnknownFaultType */
class SOAP_CMAC wsrfr__ResourceUnknownFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 794; } /* = unique type id SOAP_TYPE_wsrfr__ResourceUnknownFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsrfr__ResourceUnknownFaultType() { wsrfr__ResourceUnknownFaultType::soap_default(NULL); }
	virtual ~wsrfr__ResourceUnknownFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsrfr__ResourceUnavailableFaultType
#define SOAP_TYPE_wsrfr__ResourceUnavailableFaultType (795)
/* wsrfr:ResourceUnavailableFaultType */
class SOAP_CMAC wsrfr__ResourceUnavailableFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 795; } /* = unique type id SOAP_TYPE_wsrfr__ResourceUnavailableFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsrfr__ResourceUnavailableFaultType() { wsrfr__ResourceUnavailableFaultType::soap_default(NULL); }
	virtual ~wsrfr__ResourceUnavailableFaultType() { }
};
#endif

#ifndef SOAP_TYPE_tds__StorageConfiguration
#define SOAP_TYPE_tds__StorageConfiguration (1013)
/* tds:StorageConfiguration */
class SOAP_CMAC tds__StorageConfiguration : public tt__DeviceEntity
{
public:
	tds__StorageConfigurationData *Data;	/* required element of type tds:StorageConfigurationData */
public:
	virtual int soap_type() const { return 1013; } /* = unique type id SOAP_TYPE_tds__StorageConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__StorageConfiguration() { tds__StorageConfiguration::soap_default(NULL); }
	virtual ~tds__StorageConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__OSDReference
#define SOAP_TYPE_tt__OSDReference (620)
/* Primitive tt:OSDReference schema type: */
class SOAP_CMAC tt__OSDReference
{
public:
	std::string __item;
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 620; } /* = unique type id SOAP_TYPE_tt__OSDReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OSDReference() { tt__OSDReference::soap_default(NULL); }
	virtual ~tt__OSDReference() { }
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (40)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	struct soap_dom_attribute __anyAttribute;	/* external */	/* optional attribute of type xsd:anyAttribute */
	char *__any;
	wsnt__InvalidFilterFaultType *wsnt__InvalidFilterFault;	/* optional element of type wsnt:InvalidFilterFaultType */
	wsnt__InvalidMessageContentExpressionFaultType *wsnt__InvalidMessageContentExpressionFault;	/* optional element of type wsnt:InvalidMessageContentExpressionFaultType */
	wsnt__InvalidProducerPropertiesExpressionFaultType *wsnt__InvalidProducerPropertiesExpressionFault;	/* optional element of type wsnt:InvalidProducerPropertiesExpressionFaultType */
	wsnt__InvalidTopicExpressionFaultType *wsnt__InvalidTopicExpressionFault;	/* optional element of type wsnt:InvalidTopicExpressionFaultType */
	wsnt__MultipleTopicsSpecifiedFaultType *wsnt__MultipleTopicsSpecifiedFault;	/* optional element of type wsnt:MultipleTopicsSpecifiedFaultType */
	wsnt__NoCurrentMessageOnTopicFaultType *wsnt__NoCurrentMessageOnTopicFault;	/* optional element of type wsnt:NoCurrentMessageOnTopicFaultType */
	wsnt__NotifyMessageNotSupportedFaultType *wsnt__NotifyMessageNotSupportedFault;	/* optional element of type wsnt:NotifyMessageNotSupportedFaultType */
	wsnt__PauseFailedFaultType *wsnt__PauseFailedFault;	/* optional element of type wsnt:PauseFailedFaultType */
	_tev__PullMessagesFaultResponse *tev__PullMessagesFaultResponse;	/* optional element of type tev:PullMessagesFaultResponse */
	wsrfr__ResourceUnknownFaultType *wsrfr__ResourceUnknownFault;	/* optional element of type wsrfr:ResourceUnknownFaultType */
	wsnt__ResumeFailedFaultType *wsnt__ResumeFailedFault;	/* optional element of type wsnt:ResumeFailedFaultType */
	wsnt__SubscribeCreationFailedFaultType *wsnt__SubscribeCreationFailedFault;	/* optional element of type wsnt:SubscribeCreationFailedFaultType */
	wsnt__TopicExpressionDialectUnknownFaultType *wsnt__TopicExpressionDialectUnknownFault;	/* optional element of type wsnt:TopicExpressionDialectUnknownFaultType */
	wsnt__TopicNotSupportedFaultType *wsnt__TopicNotSupportedFault;	/* optional element of type wsnt:TopicNotSupportedFaultType */
	wsnt__UnableToCreatePullPointFaultType *wsnt__UnableToCreatePullPointFault;	/* optional element of type wsnt:UnableToCreatePullPointFaultType */
	wsnt__UnableToDestroyPullPointFaultType *wsnt__UnableToDestroyPullPointFault;	/* optional element of type wsnt:UnableToDestroyPullPointFaultType */
	wsnt__UnableToDestroySubscriptionFaultType *wsnt__UnableToDestroySubscriptionFault;	/* optional element of type wsnt:UnableToDestroySubscriptionFaultType */
	wsnt__UnableToGetMessagesFaultType *wsnt__UnableToGetMessagesFault;	/* optional element of type wsnt:UnableToGetMessagesFaultType */
	wsnt__UnacceptableInitialTerminationTimeFaultType *wsnt__UnacceptableInitialTerminationTimeFault;	/* optional element of type wsnt:UnacceptableInitialTerminationTimeFaultType */
	wsnt__UnacceptableTerminationTimeFaultType *wsnt__UnacceptableTerminationTimeFault;	/* optional element of type wsnt:UnacceptableTerminationTimeFaultType */
	wsnt__UnrecognizedPolicyRequestFaultType *wsnt__UnrecognizedPolicyRequestFault;	/* optional element of type wsnt:UnrecognizedPolicyRequestFaultType */
	wsnt__UnsupportedPolicyRequestFaultType *wsnt__UnsupportedPolicyRequestFault;	/* optional element of type wsnt:UnsupportedPolicyRequestFaultType */
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 40; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef SOAP_TYPE___tdn__Hello
#define SOAP_TYPE___tdn__Hello (2039)
/* Operation wrapper: */
struct __tdn__Hello
{
public:
	struct wsdd__HelloType tdn__Hello;	/* required element of type wsdd:HelloType */
public:
	int soap_type() const { return 2039; } /* = unique type id SOAP_TYPE___tdn__Hello */
};
#endif

#ifndef SOAP_TYPE___tdn__Bye
#define SOAP_TYPE___tdn__Bye (2041)
/* Operation wrapper: */
struct __tdn__Bye
{
public:
	struct wsdd__ByeType tdn__Bye;	/* required element of type wsdd:ByeType */
public:
	int soap_type() const { return 2041; } /* = unique type id SOAP_TYPE___tdn__Bye */
};
#endif

#ifndef SOAP_TYPE___tdn__Probe
#define SOAP_TYPE___tdn__Probe (2044)
/* Operation wrapper: */
struct __tdn__Probe
{
public:
	struct wsdd__ProbeType tdn__Probe;	/* required element of type wsdd:ProbeType */
public:
	int soap_type() const { return 2044; } /* = unique type id SOAP_TYPE___tdn__Probe */
};
#endif

#ifndef SOAP_TYPE___tds__GetServices
#define SOAP_TYPE___tds__GetServices (2048)
/* Operation wrapper: */
struct __tds__GetServices
{
public:
	_tds__GetServices *tds__GetServices;	/* optional element of type tds:GetServices */
public:
	int soap_type() const { return 2048; } /* = unique type id SOAP_TYPE___tds__GetServices */
};
#endif

#ifndef SOAP_TYPE___tds__GetServiceCapabilities
#define SOAP_TYPE___tds__GetServiceCapabilities (2052)
/* Operation wrapper: */
struct __tds__GetServiceCapabilities
{
public:
	_tds__GetServiceCapabilities *tds__GetServiceCapabilities;	/* optional element of type tds:GetServiceCapabilities */
public:
	int soap_type() const { return 2052; } /* = unique type id SOAP_TYPE___tds__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tds__GetDeviceInformation
#define SOAP_TYPE___tds__GetDeviceInformation (2056)
/* Operation wrapper: */
struct __tds__GetDeviceInformation
{
public:
	_tds__GetDeviceInformation *tds__GetDeviceInformation;	/* optional element of type tds:GetDeviceInformation */
public:
	int soap_type() const { return 2056; } /* = unique type id SOAP_TYPE___tds__GetDeviceInformation */
};
#endif

#ifndef SOAP_TYPE___tds__SetSystemDateAndTime
#define SOAP_TYPE___tds__SetSystemDateAndTime (2060)
/* Operation wrapper: */
struct __tds__SetSystemDateAndTime
{
public:
	_tds__SetSystemDateAndTime *tds__SetSystemDateAndTime;	/* optional element of type tds:SetSystemDateAndTime */
public:
	int soap_type() const { return 2060; } /* = unique type id SOAP_TYPE___tds__SetSystemDateAndTime */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemDateAndTime
#define SOAP_TYPE___tds__GetSystemDateAndTime (2064)
/* Operation wrapper: */
struct __tds__GetSystemDateAndTime
{
public:
	_tds__GetSystemDateAndTime *tds__GetSystemDateAndTime;	/* optional element of type tds:GetSystemDateAndTime */
public:
	int soap_type() const { return 2064; } /* = unique type id SOAP_TYPE___tds__GetSystemDateAndTime */
};
#endif

#ifndef SOAP_TYPE___tds__SetSystemFactoryDefault
#define SOAP_TYPE___tds__SetSystemFactoryDefault (2068)
/* Operation wrapper: */
struct __tds__SetSystemFactoryDefault
{
public:
	_tds__SetSystemFactoryDefault *tds__SetSystemFactoryDefault;	/* optional element of type tds:SetSystemFactoryDefault */
public:
	int soap_type() const { return 2068; } /* = unique type id SOAP_TYPE___tds__SetSystemFactoryDefault */
};
#endif

#ifndef SOAP_TYPE___tds__UpgradeSystemFirmware
#define SOAP_TYPE___tds__UpgradeSystemFirmware (2072)
/* Operation wrapper: */
struct __tds__UpgradeSystemFirmware
{
public:
	_tds__UpgradeSystemFirmware *tds__UpgradeSystemFirmware;	/* optional element of type tds:UpgradeSystemFirmware */
public:
	int soap_type() const { return 2072; } /* = unique type id SOAP_TYPE___tds__UpgradeSystemFirmware */
};
#endif

#ifndef SOAP_TYPE___tds__SystemReboot
#define SOAP_TYPE___tds__SystemReboot (2076)
/* Operation wrapper: */
struct __tds__SystemReboot
{
public:
	_tds__SystemReboot *tds__SystemReboot;	/* optional element of type tds:SystemReboot */
public:
	int soap_type() const { return 2076; } /* = unique type id SOAP_TYPE___tds__SystemReboot */
};
#endif

#ifndef SOAP_TYPE___tds__RestoreSystem
#define SOAP_TYPE___tds__RestoreSystem (2080)
/* Operation wrapper: */
struct __tds__RestoreSystem
{
public:
	_tds__RestoreSystem *tds__RestoreSystem;	/* optional element of type tds:RestoreSystem */
public:
	int soap_type() const { return 2080; } /* = unique type id SOAP_TYPE___tds__RestoreSystem */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemBackup
#define SOAP_TYPE___tds__GetSystemBackup (2084)
/* Operation wrapper: */
struct __tds__GetSystemBackup
{
public:
	_tds__GetSystemBackup *tds__GetSystemBackup;	/* optional element of type tds:GetSystemBackup */
public:
	int soap_type() const { return 2084; } /* = unique type id SOAP_TYPE___tds__GetSystemBackup */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemLog
#define SOAP_TYPE___tds__GetSystemLog (2088)
/* Operation wrapper: */
struct __tds__GetSystemLog
{
public:
	_tds__GetSystemLog *tds__GetSystemLog;	/* optional element of type tds:GetSystemLog */
public:
	int soap_type() const { return 2088; } /* = unique type id SOAP_TYPE___tds__GetSystemLog */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemSupportInformation
#define SOAP_TYPE___tds__GetSystemSupportInformation (2092)
/* Operation wrapper: */
struct __tds__GetSystemSupportInformation
{
public:
	_tds__GetSystemSupportInformation *tds__GetSystemSupportInformation;	/* optional element of type tds:GetSystemSupportInformation */
public:
	int soap_type() const { return 2092; } /* = unique type id SOAP_TYPE___tds__GetSystemSupportInformation */
};
#endif

#ifndef SOAP_TYPE___tds__GetScopes
#define SOAP_TYPE___tds__GetScopes (2096)
/* Operation wrapper: */
struct __tds__GetScopes
{
public:
	_tds__GetScopes *tds__GetScopes;	/* optional element of type tds:GetScopes */
public:
	int soap_type() const { return 2096; } /* = unique type id SOAP_TYPE___tds__GetScopes */
};
#endif

#ifndef SOAP_TYPE___tds__SetScopes
#define SOAP_TYPE___tds__SetScopes (2100)
/* Operation wrapper: */
struct __tds__SetScopes
{
public:
	_tds__SetScopes *tds__SetScopes;	/* optional element of type tds:SetScopes */
public:
	int soap_type() const { return 2100; } /* = unique type id SOAP_TYPE___tds__SetScopes */
};
#endif

#ifndef SOAP_TYPE___tds__AddScopes
#define SOAP_TYPE___tds__AddScopes (2104)
/* Operation wrapper: */
struct __tds__AddScopes
{
public:
	_tds__AddScopes *tds__AddScopes;	/* optional element of type tds:AddScopes */
public:
	int soap_type() const { return 2104; } /* = unique type id SOAP_TYPE___tds__AddScopes */
};
#endif

#ifndef SOAP_TYPE___tds__RemoveScopes
#define SOAP_TYPE___tds__RemoveScopes (2108)
/* Operation wrapper: */
struct __tds__RemoveScopes
{
public:
	_tds__RemoveScopes *tds__RemoveScopes;	/* optional element of type tds:RemoveScopes */
public:
	int soap_type() const { return 2108; } /* = unique type id SOAP_TYPE___tds__RemoveScopes */
};
#endif

#ifndef SOAP_TYPE___tds__GetDiscoveryMode
#define SOAP_TYPE___tds__GetDiscoveryMode (2112)
/* Operation wrapper: */
struct __tds__GetDiscoveryMode
{
public:
	_tds__GetDiscoveryMode *tds__GetDiscoveryMode;	/* optional element of type tds:GetDiscoveryMode */
public:
	int soap_type() const { return 2112; } /* = unique type id SOAP_TYPE___tds__GetDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___tds__SetDiscoveryMode
#define SOAP_TYPE___tds__SetDiscoveryMode (2116)
/* Operation wrapper: */
struct __tds__SetDiscoveryMode
{
public:
	_tds__SetDiscoveryMode *tds__SetDiscoveryMode;	/* optional element of type tds:SetDiscoveryMode */
public:
	int soap_type() const { return 2116; } /* = unique type id SOAP_TYPE___tds__SetDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___tds__GetRemoteDiscoveryMode
#define SOAP_TYPE___tds__GetRemoteDiscoveryMode (2120)
/* Operation wrapper: */
struct __tds__GetRemoteDiscoveryMode
{
public:
	_tds__GetRemoteDiscoveryMode *tds__GetRemoteDiscoveryMode;	/* optional element of type tds:GetRemoteDiscoveryMode */
public:
	int soap_type() const { return 2120; } /* = unique type id SOAP_TYPE___tds__GetRemoteDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___tds__SetRemoteDiscoveryMode
#define SOAP_TYPE___tds__SetRemoteDiscoveryMode (2124)
/* Operation wrapper: */
struct __tds__SetRemoteDiscoveryMode
{
public:
	_tds__SetRemoteDiscoveryMode *tds__SetRemoteDiscoveryMode;	/* optional element of type tds:SetRemoteDiscoveryMode */
public:
	int soap_type() const { return 2124; } /* = unique type id SOAP_TYPE___tds__SetRemoteDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___tds__GetDPAddresses
#define SOAP_TYPE___tds__GetDPAddresses (2128)
/* Operation wrapper: */
struct __tds__GetDPAddresses
{
public:
	_tds__GetDPAddresses *tds__GetDPAddresses;	/* optional element of type tds:GetDPAddresses */
public:
	int soap_type() const { return 2128; } /* = unique type id SOAP_TYPE___tds__GetDPAddresses */
};
#endif

#ifndef SOAP_TYPE___tds__GetEndpointReference
#define SOAP_TYPE___tds__GetEndpointReference (2132)
/* Operation wrapper: */
struct __tds__GetEndpointReference
{
public:
	_tds__GetEndpointReference *tds__GetEndpointReference;	/* optional element of type tds:GetEndpointReference */
public:
	int soap_type() const { return 2132; } /* = unique type id SOAP_TYPE___tds__GetEndpointReference */
};
#endif

#ifndef SOAP_TYPE___tds__GetRemoteUser
#define SOAP_TYPE___tds__GetRemoteUser (2136)
/* Operation wrapper: */
struct __tds__GetRemoteUser
{
public:
	_tds__GetRemoteUser *tds__GetRemoteUser;	/* optional element of type tds:GetRemoteUser */
public:
	int soap_type() const { return 2136; } /* = unique type id SOAP_TYPE___tds__GetRemoteUser */
};
#endif

#ifndef SOAP_TYPE___tds__SetRemoteUser
#define SOAP_TYPE___tds__SetRemoteUser (2140)
/* Operation wrapper: */
struct __tds__SetRemoteUser
{
public:
	_tds__SetRemoteUser *tds__SetRemoteUser;	/* optional element of type tds:SetRemoteUser */
public:
	int soap_type() const { return 2140; } /* = unique type id SOAP_TYPE___tds__SetRemoteUser */
};
#endif

#ifndef SOAP_TYPE___tds__GetUsers
#define SOAP_TYPE___tds__GetUsers (2144)
/* Operation wrapper: */
struct __tds__GetUsers
{
public:
	_tds__GetUsers *tds__GetUsers;	/* optional element of type tds:GetUsers */
public:
	int soap_type() const { return 2144; } /* = unique type id SOAP_TYPE___tds__GetUsers */
};
#endif

#ifndef SOAP_TYPE___tds__CreateUsers
#define SOAP_TYPE___tds__CreateUsers (2148)
/* Operation wrapper: */
struct __tds__CreateUsers
{
public:
	_tds__CreateUsers *tds__CreateUsers;	/* optional element of type tds:CreateUsers */
public:
	int soap_type() const { return 2148; } /* = unique type id SOAP_TYPE___tds__CreateUsers */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteUsers
#define SOAP_TYPE___tds__DeleteUsers (2152)
/* Operation wrapper: */
struct __tds__DeleteUsers
{
public:
	_tds__DeleteUsers *tds__DeleteUsers;	/* optional element of type tds:DeleteUsers */
public:
	int soap_type() const { return 2152; } /* = unique type id SOAP_TYPE___tds__DeleteUsers */
};
#endif

#ifndef SOAP_TYPE___tds__SetUser
#define SOAP_TYPE___tds__SetUser (2156)
/* Operation wrapper: */
struct __tds__SetUser
{
public:
	_tds__SetUser *tds__SetUser;	/* optional element of type tds:SetUser */
public:
	int soap_type() const { return 2156; } /* = unique type id SOAP_TYPE___tds__SetUser */
};
#endif

#ifndef SOAP_TYPE___tds__GetWsdlUrl
#define SOAP_TYPE___tds__GetWsdlUrl (2160)
/* Operation wrapper: */
struct __tds__GetWsdlUrl
{
public:
	_tds__GetWsdlUrl *tds__GetWsdlUrl;	/* optional element of type tds:GetWsdlUrl */
public:
	int soap_type() const { return 2160; } /* = unique type id SOAP_TYPE___tds__GetWsdlUrl */
};
#endif

#ifndef SOAP_TYPE___tds__GetCapabilities
#define SOAP_TYPE___tds__GetCapabilities (2164)
/* Operation wrapper: */
struct __tds__GetCapabilities
{
public:
	_tds__GetCapabilities *tds__GetCapabilities;	/* optional element of type tds:GetCapabilities */
public:
	int soap_type() const { return 2164; } /* = unique type id SOAP_TYPE___tds__GetCapabilities */
};
#endif

#ifndef SOAP_TYPE___tds__SetDPAddresses
#define SOAP_TYPE___tds__SetDPAddresses (2168)
/* Operation wrapper: */
struct __tds__SetDPAddresses
{
public:
	_tds__SetDPAddresses *tds__SetDPAddresses;	/* optional element of type tds:SetDPAddresses */
public:
	int soap_type() const { return 2168; } /* = unique type id SOAP_TYPE___tds__SetDPAddresses */
};
#endif

#ifndef SOAP_TYPE___tds__GetHostname
#define SOAP_TYPE___tds__GetHostname (2172)
/* Operation wrapper: */
struct __tds__GetHostname
{
public:
	_tds__GetHostname *tds__GetHostname;	/* optional element of type tds:GetHostname */
public:
	int soap_type() const { return 2172; } /* = unique type id SOAP_TYPE___tds__GetHostname */
};
#endif

#ifndef SOAP_TYPE___tds__SetHostname
#define SOAP_TYPE___tds__SetHostname (2176)
/* Operation wrapper: */
struct __tds__SetHostname
{
public:
	_tds__SetHostname *tds__SetHostname;	/* optional element of type tds:SetHostname */
public:
	int soap_type() const { return 2176; } /* = unique type id SOAP_TYPE___tds__SetHostname */
};
#endif

#ifndef SOAP_TYPE___tds__SetHostnameFromDHCP
#define SOAP_TYPE___tds__SetHostnameFromDHCP (2180)
/* Operation wrapper: */
struct __tds__SetHostnameFromDHCP
{
public:
	_tds__SetHostnameFromDHCP *tds__SetHostnameFromDHCP;	/* optional element of type tds:SetHostnameFromDHCP */
public:
	int soap_type() const { return 2180; } /* = unique type id SOAP_TYPE___tds__SetHostnameFromDHCP */
};
#endif

#ifndef SOAP_TYPE___tds__GetDNS
#define SOAP_TYPE___tds__GetDNS (2184)
/* Operation wrapper: */
struct __tds__GetDNS
{
public:
	_tds__GetDNS *tds__GetDNS;	/* optional element of type tds:GetDNS */
public:
	int soap_type() const { return 2184; } /* = unique type id SOAP_TYPE___tds__GetDNS */
};
#endif

#ifndef SOAP_TYPE___tds__SetDNS
#define SOAP_TYPE___tds__SetDNS (2188)
/* Operation wrapper: */
struct __tds__SetDNS
{
public:
	_tds__SetDNS *tds__SetDNS;	/* optional element of type tds:SetDNS */
public:
	int soap_type() const { return 2188; } /* = unique type id SOAP_TYPE___tds__SetDNS */
};
#endif

#ifndef SOAP_TYPE___tds__GetNTP
#define SOAP_TYPE___tds__GetNTP (2192)
/* Operation wrapper: */
struct __tds__GetNTP
{
public:
	_tds__GetNTP *tds__GetNTP;	/* optional element of type tds:GetNTP */
public:
	int soap_type() const { return 2192; } /* = unique type id SOAP_TYPE___tds__GetNTP */
};
#endif

#ifndef SOAP_TYPE___tds__SetNTP
#define SOAP_TYPE___tds__SetNTP (2196)
/* Operation wrapper: */
struct __tds__SetNTP
{
public:
	_tds__SetNTP *tds__SetNTP;	/* optional element of type tds:SetNTP */
public:
	int soap_type() const { return 2196; } /* = unique type id SOAP_TYPE___tds__SetNTP */
};
#endif

#ifndef SOAP_TYPE___tds__GetDynamicDNS
#define SOAP_TYPE___tds__GetDynamicDNS (2200)
/* Operation wrapper: */
struct __tds__GetDynamicDNS
{
public:
	_tds__GetDynamicDNS *tds__GetDynamicDNS;	/* optional element of type tds:GetDynamicDNS */
public:
	int soap_type() const { return 2200; } /* = unique type id SOAP_TYPE___tds__GetDynamicDNS */
};
#endif

#ifndef SOAP_TYPE___tds__SetDynamicDNS
#define SOAP_TYPE___tds__SetDynamicDNS (2204)
/* Operation wrapper: */
struct __tds__SetDynamicDNS
{
public:
	_tds__SetDynamicDNS *tds__SetDynamicDNS;	/* optional element of type tds:SetDynamicDNS */
public:
	int soap_type() const { return 2204; } /* = unique type id SOAP_TYPE___tds__SetDynamicDNS */
};
#endif

#ifndef SOAP_TYPE___tds__GetNetworkInterfaces
#define SOAP_TYPE___tds__GetNetworkInterfaces (2208)
/* Operation wrapper: */
struct __tds__GetNetworkInterfaces
{
public:
	_tds__GetNetworkInterfaces *tds__GetNetworkInterfaces;	/* optional element of type tds:GetNetworkInterfaces */
public:
	int soap_type() const { return 2208; } /* = unique type id SOAP_TYPE___tds__GetNetworkInterfaces */
};
#endif

#ifndef SOAP_TYPE___tds__SetNetworkInterfaces
#define SOAP_TYPE___tds__SetNetworkInterfaces (2212)
/* Operation wrapper: */
struct __tds__SetNetworkInterfaces
{
public:
	_tds__SetNetworkInterfaces *tds__SetNetworkInterfaces;	/* optional element of type tds:SetNetworkInterfaces */
public:
	int soap_type() const { return 2212; } /* = unique type id SOAP_TYPE___tds__SetNetworkInterfaces */
};
#endif

#ifndef SOAP_TYPE___tds__GetNetworkProtocols
#define SOAP_TYPE___tds__GetNetworkProtocols (2216)
/* Operation wrapper: */
struct __tds__GetNetworkProtocols
{
public:
	_tds__GetNetworkProtocols *tds__GetNetworkProtocols;	/* optional element of type tds:GetNetworkProtocols */
public:
	int soap_type() const { return 2216; } /* = unique type id SOAP_TYPE___tds__GetNetworkProtocols */
};
#endif

#ifndef SOAP_TYPE___tds__SetNetworkProtocols
#define SOAP_TYPE___tds__SetNetworkProtocols (2220)
/* Operation wrapper: */
struct __tds__SetNetworkProtocols
{
public:
	_tds__SetNetworkProtocols *tds__SetNetworkProtocols;	/* optional element of type tds:SetNetworkProtocols */
public:
	int soap_type() const { return 2220; } /* = unique type id SOAP_TYPE___tds__SetNetworkProtocols */
};
#endif

#ifndef SOAP_TYPE___tds__GetNetworkDefaultGateway
#define SOAP_TYPE___tds__GetNetworkDefaultGateway (2224)
/* Operation wrapper: */
struct __tds__GetNetworkDefaultGateway
{
public:
	_tds__GetNetworkDefaultGateway *tds__GetNetworkDefaultGateway;	/* optional element of type tds:GetNetworkDefaultGateway */
public:
	int soap_type() const { return 2224; } /* = unique type id SOAP_TYPE___tds__GetNetworkDefaultGateway */
};
#endif

#ifndef SOAP_TYPE___tds__SetNetworkDefaultGateway
#define SOAP_TYPE___tds__SetNetworkDefaultGateway (2228)
/* Operation wrapper: */
struct __tds__SetNetworkDefaultGateway
{
public:
	_tds__SetNetworkDefaultGateway *tds__SetNetworkDefaultGateway;	/* optional element of type tds:SetNetworkDefaultGateway */
public:
	int soap_type() const { return 2228; } /* = unique type id SOAP_TYPE___tds__SetNetworkDefaultGateway */
};
#endif

#ifndef SOAP_TYPE___tds__GetZeroConfiguration
#define SOAP_TYPE___tds__GetZeroConfiguration (2232)
/* Operation wrapper: */
struct __tds__GetZeroConfiguration
{
public:
	_tds__GetZeroConfiguration *tds__GetZeroConfiguration;	/* optional element of type tds:GetZeroConfiguration */
public:
	int soap_type() const { return 2232; } /* = unique type id SOAP_TYPE___tds__GetZeroConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__SetZeroConfiguration
#define SOAP_TYPE___tds__SetZeroConfiguration (2236)
/* Operation wrapper: */
struct __tds__SetZeroConfiguration
{
public:
	_tds__SetZeroConfiguration *tds__SetZeroConfiguration;	/* optional element of type tds:SetZeroConfiguration */
public:
	int soap_type() const { return 2236; } /* = unique type id SOAP_TYPE___tds__SetZeroConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetIPAddressFilter
#define SOAP_TYPE___tds__GetIPAddressFilter (2240)
/* Operation wrapper: */
struct __tds__GetIPAddressFilter
{
public:
	_tds__GetIPAddressFilter *tds__GetIPAddressFilter;	/* optional element of type tds:GetIPAddressFilter */
public:
	int soap_type() const { return 2240; } /* = unique type id SOAP_TYPE___tds__GetIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___tds__SetIPAddressFilter
#define SOAP_TYPE___tds__SetIPAddressFilter (2244)
/* Operation wrapper: */
struct __tds__SetIPAddressFilter
{
public:
	_tds__SetIPAddressFilter *tds__SetIPAddressFilter;	/* optional element of type tds:SetIPAddressFilter */
public:
	int soap_type() const { return 2244; } /* = unique type id SOAP_TYPE___tds__SetIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___tds__AddIPAddressFilter
#define SOAP_TYPE___tds__AddIPAddressFilter (2248)
/* Operation wrapper: */
struct __tds__AddIPAddressFilter
{
public:
	_tds__AddIPAddressFilter *tds__AddIPAddressFilter;	/* optional element of type tds:AddIPAddressFilter */
public:
	int soap_type() const { return 2248; } /* = unique type id SOAP_TYPE___tds__AddIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___tds__RemoveIPAddressFilter
#define SOAP_TYPE___tds__RemoveIPAddressFilter (2252)
/* Operation wrapper: */
struct __tds__RemoveIPAddressFilter
{
public:
	_tds__RemoveIPAddressFilter *tds__RemoveIPAddressFilter;	/* optional element of type tds:RemoveIPAddressFilter */
public:
	int soap_type() const { return 2252; } /* = unique type id SOAP_TYPE___tds__RemoveIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___tds__GetAccessPolicy
#define SOAP_TYPE___tds__GetAccessPolicy (2256)
/* Operation wrapper: */
struct __tds__GetAccessPolicy
{
public:
	_tds__GetAccessPolicy *tds__GetAccessPolicy;	/* optional element of type tds:GetAccessPolicy */
public:
	int soap_type() const { return 2256; } /* = unique type id SOAP_TYPE___tds__GetAccessPolicy */
};
#endif

#ifndef SOAP_TYPE___tds__SetAccessPolicy
#define SOAP_TYPE___tds__SetAccessPolicy (2260)
/* Operation wrapper: */
struct __tds__SetAccessPolicy
{
public:
	_tds__SetAccessPolicy *tds__SetAccessPolicy;	/* optional element of type tds:SetAccessPolicy */
public:
	int soap_type() const { return 2260; } /* = unique type id SOAP_TYPE___tds__SetAccessPolicy */
};
#endif

#ifndef SOAP_TYPE___tds__CreateCertificate
#define SOAP_TYPE___tds__CreateCertificate (2264)
/* Operation wrapper: */
struct __tds__CreateCertificate
{
public:
	_tds__CreateCertificate *tds__CreateCertificate;	/* optional element of type tds:CreateCertificate */
public:
	int soap_type() const { return 2264; } /* = unique type id SOAP_TYPE___tds__CreateCertificate */
};
#endif

#ifndef SOAP_TYPE___tds__GetCertificates
#define SOAP_TYPE___tds__GetCertificates (2268)
/* Operation wrapper: */
struct __tds__GetCertificates
{
public:
	_tds__GetCertificates *tds__GetCertificates;	/* optional element of type tds:GetCertificates */
public:
	int soap_type() const { return 2268; } /* = unique type id SOAP_TYPE___tds__GetCertificates */
};
#endif

#ifndef SOAP_TYPE___tds__GetCertificatesStatus
#define SOAP_TYPE___tds__GetCertificatesStatus (2272)
/* Operation wrapper: */
struct __tds__GetCertificatesStatus
{
public:
	_tds__GetCertificatesStatus *tds__GetCertificatesStatus;	/* optional element of type tds:GetCertificatesStatus */
public:
	int soap_type() const { return 2272; } /* = unique type id SOAP_TYPE___tds__GetCertificatesStatus */
};
#endif

#ifndef SOAP_TYPE___tds__SetCertificatesStatus
#define SOAP_TYPE___tds__SetCertificatesStatus (2276)
/* Operation wrapper: */
struct __tds__SetCertificatesStatus
{
public:
	_tds__SetCertificatesStatus *tds__SetCertificatesStatus;	/* optional element of type tds:SetCertificatesStatus */
public:
	int soap_type() const { return 2276; } /* = unique type id SOAP_TYPE___tds__SetCertificatesStatus */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteCertificates
#define SOAP_TYPE___tds__DeleteCertificates (2280)
/* Operation wrapper: */
struct __tds__DeleteCertificates
{
public:
	_tds__DeleteCertificates *tds__DeleteCertificates;	/* optional element of type tds:DeleteCertificates */
public:
	int soap_type() const { return 2280; } /* = unique type id SOAP_TYPE___tds__DeleteCertificates */
};
#endif

#ifndef SOAP_TYPE___tds__GetPkcs10Request
#define SOAP_TYPE___tds__GetPkcs10Request (2284)
/* Operation wrapper: */
struct __tds__GetPkcs10Request
{
public:
	_tds__GetPkcs10Request *tds__GetPkcs10Request;	/* optional element of type tds:GetPkcs10Request */
public:
	int soap_type() const { return 2284; } /* = unique type id SOAP_TYPE___tds__GetPkcs10Request */
};
#endif

#ifndef SOAP_TYPE___tds__LoadCertificates
#define SOAP_TYPE___tds__LoadCertificates (2288)
/* Operation wrapper: */
struct __tds__LoadCertificates
{
public:
	_tds__LoadCertificates *tds__LoadCertificates;	/* optional element of type tds:LoadCertificates */
public:
	int soap_type() const { return 2288; } /* = unique type id SOAP_TYPE___tds__LoadCertificates */
};
#endif

#ifndef SOAP_TYPE___tds__GetClientCertificateMode
#define SOAP_TYPE___tds__GetClientCertificateMode (2292)
/* Operation wrapper: */
struct __tds__GetClientCertificateMode
{
public:
	_tds__GetClientCertificateMode *tds__GetClientCertificateMode;	/* optional element of type tds:GetClientCertificateMode */
public:
	int soap_type() const { return 2292; } /* = unique type id SOAP_TYPE___tds__GetClientCertificateMode */
};
#endif

#ifndef SOAP_TYPE___tds__SetClientCertificateMode
#define SOAP_TYPE___tds__SetClientCertificateMode (2296)
/* Operation wrapper: */
struct __tds__SetClientCertificateMode
{
public:
	_tds__SetClientCertificateMode *tds__SetClientCertificateMode;	/* optional element of type tds:SetClientCertificateMode */
public:
	int soap_type() const { return 2296; } /* = unique type id SOAP_TYPE___tds__SetClientCertificateMode */
};
#endif

#ifndef SOAP_TYPE___tds__GetRelayOutputs
#define SOAP_TYPE___tds__GetRelayOutputs (2300)
/* Operation wrapper: */
struct __tds__GetRelayOutputs
{
public:
	_tds__GetRelayOutputs *tds__GetRelayOutputs;	/* optional element of type tds:GetRelayOutputs */
public:
	int soap_type() const { return 2300; } /* = unique type id SOAP_TYPE___tds__GetRelayOutputs */
};
#endif

#ifndef SOAP_TYPE___tds__SetRelayOutputSettings
#define SOAP_TYPE___tds__SetRelayOutputSettings (2304)
/* Operation wrapper: */
struct __tds__SetRelayOutputSettings
{
public:
	_tds__SetRelayOutputSettings *tds__SetRelayOutputSettings;	/* optional element of type tds:SetRelayOutputSettings */
public:
	int soap_type() const { return 2304; } /* = unique type id SOAP_TYPE___tds__SetRelayOutputSettings */
};
#endif

#ifndef SOAP_TYPE___tds__SetRelayOutputState
#define SOAP_TYPE___tds__SetRelayOutputState (2308)
/* Operation wrapper: */
struct __tds__SetRelayOutputState
{
public:
	_tds__SetRelayOutputState *tds__SetRelayOutputState;	/* optional element of type tds:SetRelayOutputState */
public:
	int soap_type() const { return 2308; } /* = unique type id SOAP_TYPE___tds__SetRelayOutputState */
};
#endif

#ifndef SOAP_TYPE___tds__SendAuxiliaryCommand
#define SOAP_TYPE___tds__SendAuxiliaryCommand (2312)
/* Operation wrapper: */
struct __tds__SendAuxiliaryCommand
{
public:
	_tds__SendAuxiliaryCommand *tds__SendAuxiliaryCommand;	/* optional element of type tds:SendAuxiliaryCommand */
public:
	int soap_type() const { return 2312; } /* = unique type id SOAP_TYPE___tds__SendAuxiliaryCommand */
};
#endif

#ifndef SOAP_TYPE___tds__GetCACertificates
#define SOAP_TYPE___tds__GetCACertificates (2316)
/* Operation wrapper: */
struct __tds__GetCACertificates
{
public:
	_tds__GetCACertificates *tds__GetCACertificates;	/* optional element of type tds:GetCACertificates */
public:
	int soap_type() const { return 2316; } /* = unique type id SOAP_TYPE___tds__GetCACertificates */
};
#endif

#ifndef SOAP_TYPE___tds__LoadCertificateWithPrivateKey
#define SOAP_TYPE___tds__LoadCertificateWithPrivateKey (2320)
/* Operation wrapper: */
struct __tds__LoadCertificateWithPrivateKey
{
public:
	_tds__LoadCertificateWithPrivateKey *tds__LoadCertificateWithPrivateKey;	/* optional element of type tds:LoadCertificateWithPrivateKey */
public:
	int soap_type() const { return 2320; } /* = unique type id SOAP_TYPE___tds__LoadCertificateWithPrivateKey */
};
#endif

#ifndef SOAP_TYPE___tds__GetCertificateInformation
#define SOAP_TYPE___tds__GetCertificateInformation (2324)
/* Operation wrapper: */
struct __tds__GetCertificateInformation
{
public:
	_tds__GetCertificateInformation *tds__GetCertificateInformation;	/* optional element of type tds:GetCertificateInformation */
public:
	int soap_type() const { return 2324; } /* = unique type id SOAP_TYPE___tds__GetCertificateInformation */
};
#endif

#ifndef SOAP_TYPE___tds__LoadCACertificates
#define SOAP_TYPE___tds__LoadCACertificates (2328)
/* Operation wrapper: */
struct __tds__LoadCACertificates
{
public:
	_tds__LoadCACertificates *tds__LoadCACertificates;	/* optional element of type tds:LoadCACertificates */
public:
	int soap_type() const { return 2328; } /* = unique type id SOAP_TYPE___tds__LoadCACertificates */
};
#endif

#ifndef SOAP_TYPE___tds__CreateDot1XConfiguration
#define SOAP_TYPE___tds__CreateDot1XConfiguration (2332)
/* Operation wrapper: */
struct __tds__CreateDot1XConfiguration
{
public:
	_tds__CreateDot1XConfiguration *tds__CreateDot1XConfiguration;	/* optional element of type tds:CreateDot1XConfiguration */
public:
	int soap_type() const { return 2332; } /* = unique type id SOAP_TYPE___tds__CreateDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__SetDot1XConfiguration
#define SOAP_TYPE___tds__SetDot1XConfiguration (2336)
/* Operation wrapper: */
struct __tds__SetDot1XConfiguration
{
public:
	_tds__SetDot1XConfiguration *tds__SetDot1XConfiguration;	/* optional element of type tds:SetDot1XConfiguration */
public:
	int soap_type() const { return 2336; } /* = unique type id SOAP_TYPE___tds__SetDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot1XConfiguration
#define SOAP_TYPE___tds__GetDot1XConfiguration (2340)
/* Operation wrapper: */
struct __tds__GetDot1XConfiguration
{
public:
	_tds__GetDot1XConfiguration *tds__GetDot1XConfiguration;	/* optional element of type tds:GetDot1XConfiguration */
public:
	int soap_type() const { return 2340; } /* = unique type id SOAP_TYPE___tds__GetDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot1XConfigurations
#define SOAP_TYPE___tds__GetDot1XConfigurations (2344)
/* Operation wrapper: */
struct __tds__GetDot1XConfigurations
{
public:
	_tds__GetDot1XConfigurations *tds__GetDot1XConfigurations;	/* optional element of type tds:GetDot1XConfigurations */
public:
	int soap_type() const { return 2344; } /* = unique type id SOAP_TYPE___tds__GetDot1XConfigurations */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteDot1XConfiguration
#define SOAP_TYPE___tds__DeleteDot1XConfiguration (2348)
/* Operation wrapper: */
struct __tds__DeleteDot1XConfiguration
{
public:
	_tds__DeleteDot1XConfiguration *tds__DeleteDot1XConfiguration;	/* optional element of type tds:DeleteDot1XConfiguration */
public:
	int soap_type() const { return 2348; } /* = unique type id SOAP_TYPE___tds__DeleteDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot11Capabilities
#define SOAP_TYPE___tds__GetDot11Capabilities (2352)
/* Operation wrapper: */
struct __tds__GetDot11Capabilities
{
public:
	_tds__GetDot11Capabilities *tds__GetDot11Capabilities;	/* optional element of type tds:GetDot11Capabilities */
public:
	int soap_type() const { return 2352; } /* = unique type id SOAP_TYPE___tds__GetDot11Capabilities */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot11Status
#define SOAP_TYPE___tds__GetDot11Status (2356)
/* Operation wrapper: */
struct __tds__GetDot11Status
{
public:
	_tds__GetDot11Status *tds__GetDot11Status;	/* optional element of type tds:GetDot11Status */
public:
	int soap_type() const { return 2356; } /* = unique type id SOAP_TYPE___tds__GetDot11Status */
};
#endif

#ifndef SOAP_TYPE___tds__ScanAvailableDot11Networks
#define SOAP_TYPE___tds__ScanAvailableDot11Networks (2360)
/* Operation wrapper: */
struct __tds__ScanAvailableDot11Networks
{
public:
	_tds__ScanAvailableDot11Networks *tds__ScanAvailableDot11Networks;	/* optional element of type tds:ScanAvailableDot11Networks */
public:
	int soap_type() const { return 2360; } /* = unique type id SOAP_TYPE___tds__ScanAvailableDot11Networks */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemUris
#define SOAP_TYPE___tds__GetSystemUris (2364)
/* Operation wrapper: */
struct __tds__GetSystemUris
{
public:
	_tds__GetSystemUris *tds__GetSystemUris;	/* optional element of type tds:GetSystemUris */
public:
	int soap_type() const { return 2364; } /* = unique type id SOAP_TYPE___tds__GetSystemUris */
};
#endif

#ifndef SOAP_TYPE___tds__StartFirmwareUpgrade
#define SOAP_TYPE___tds__StartFirmwareUpgrade (2368)
/* Operation wrapper: */
struct __tds__StartFirmwareUpgrade
{
public:
	_tds__StartFirmwareUpgrade *tds__StartFirmwareUpgrade;	/* optional element of type tds:StartFirmwareUpgrade */
public:
	int soap_type() const { return 2368; } /* = unique type id SOAP_TYPE___tds__StartFirmwareUpgrade */
};
#endif

#ifndef SOAP_TYPE___tds__StartSystemRestore
#define SOAP_TYPE___tds__StartSystemRestore (2372)
/* Operation wrapper: */
struct __tds__StartSystemRestore
{
public:
	_tds__StartSystemRestore *tds__StartSystemRestore;	/* optional element of type tds:StartSystemRestore */
public:
	int soap_type() const { return 2372; } /* = unique type id SOAP_TYPE___tds__StartSystemRestore */
};
#endif

#ifndef SOAP_TYPE___tds__GetStorageConfigurations
#define SOAP_TYPE___tds__GetStorageConfigurations (2376)
/* Operation wrapper: */
struct __tds__GetStorageConfigurations
{
public:
	_tds__GetStorageConfigurations *tds__GetStorageConfigurations;	/* optional element of type tds:GetStorageConfigurations */
public:
	int soap_type() const { return 2376; } /* = unique type id SOAP_TYPE___tds__GetStorageConfigurations */
};
#endif

#ifndef SOAP_TYPE___tds__CreateStorageConfiguration
#define SOAP_TYPE___tds__CreateStorageConfiguration (2380)
/* Operation wrapper: */
struct __tds__CreateStorageConfiguration
{
public:
	_tds__CreateStorageConfiguration *tds__CreateStorageConfiguration;	/* optional element of type tds:CreateStorageConfiguration */
public:
	int soap_type() const { return 2380; } /* = unique type id SOAP_TYPE___tds__CreateStorageConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetStorageConfiguration
#define SOAP_TYPE___tds__GetStorageConfiguration (2384)
/* Operation wrapper: */
struct __tds__GetStorageConfiguration
{
public:
	_tds__GetStorageConfiguration *tds__GetStorageConfiguration;	/* optional element of type tds:GetStorageConfiguration */
public:
	int soap_type() const { return 2384; } /* = unique type id SOAP_TYPE___tds__GetStorageConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__SetStorageConfiguration
#define SOAP_TYPE___tds__SetStorageConfiguration (2388)
/* Operation wrapper: */
struct __tds__SetStorageConfiguration
{
public:
	_tds__SetStorageConfiguration *tds__SetStorageConfiguration;	/* optional element of type tds:SetStorageConfiguration */
public:
	int soap_type() const { return 2388; } /* = unique type id SOAP_TYPE___tds__SetStorageConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteStorageConfiguration
#define SOAP_TYPE___tds__DeleteStorageConfiguration (2392)
/* Operation wrapper: */
struct __tds__DeleteStorageConfiguration
{
public:
	_tds__DeleteStorageConfiguration *tds__DeleteStorageConfiguration;	/* optional element of type tds:DeleteStorageConfiguration */
public:
	int soap_type() const { return 2392; } /* = unique type id SOAP_TYPE___tds__DeleteStorageConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetGeoLocation
#define SOAP_TYPE___tds__GetGeoLocation (2396)
/* Operation wrapper: */
struct __tds__GetGeoLocation
{
public:
	_tds__GetGeoLocation *tds__GetGeoLocation;	/* optional element of type tds:GetGeoLocation */
public:
	int soap_type() const { return 2396; } /* = unique type id SOAP_TYPE___tds__GetGeoLocation */
};
#endif

#ifndef SOAP_TYPE___tds__SetGeoLocation
#define SOAP_TYPE___tds__SetGeoLocation (2400)
/* Operation wrapper: */
struct __tds__SetGeoLocation
{
public:
	_tds__SetGeoLocation *tds__SetGeoLocation;	/* optional element of type tds:SetGeoLocation */
public:
	int soap_type() const { return 2400; } /* = unique type id SOAP_TYPE___tds__SetGeoLocation */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteGeoLocation
#define SOAP_TYPE___tds__DeleteGeoLocation (2404)
/* Operation wrapper: */
struct __tds__DeleteGeoLocation
{
public:
	_tds__DeleteGeoLocation *tds__DeleteGeoLocation;	/* optional element of type tds:DeleteGeoLocation */
public:
	int soap_type() const { return 2404; } /* = unique type id SOAP_TYPE___tds__DeleteGeoLocation */
};
#endif

#ifndef SOAP_TYPE___tev__PullMessages
#define SOAP_TYPE___tev__PullMessages (2408)
/* Operation wrapper: */
struct __tev__PullMessages
{
public:
	_tev__PullMessages *tev__PullMessages;	/* optional element of type tev:PullMessages */
public:
	int soap_type() const { return 2408; } /* = unique type id SOAP_TYPE___tev__PullMessages */
};
#endif

#ifndef SOAP_TYPE___tev__Seek
#define SOAP_TYPE___tev__Seek (2412)
/* Operation wrapper: */
struct __tev__Seek
{
public:
	_tev__Seek *tev__Seek;	/* optional element of type tev:Seek */
public:
	int soap_type() const { return 2412; } /* = unique type id SOAP_TYPE___tev__Seek */
};
#endif

#ifndef SOAP_TYPE___tev__SetSynchronizationPoint
#define SOAP_TYPE___tev__SetSynchronizationPoint (2416)
/* Operation wrapper: */
struct __tev__SetSynchronizationPoint
{
public:
	_tev__SetSynchronizationPoint *tev__SetSynchronizationPoint;	/* optional element of type tev:SetSynchronizationPoint */
public:
	int soap_type() const { return 2416; } /* = unique type id SOAP_TYPE___tev__SetSynchronizationPoint */
};
#endif

#ifndef SOAP_TYPE___tev__Unsubscribe
#define SOAP_TYPE___tev__Unsubscribe (2420)
/* Operation wrapper: */
struct __tev__Unsubscribe
{
public:
	_wsnt__Unsubscribe *wsnt__Unsubscribe;	/* optional element of type wsnt:Unsubscribe */
public:
	int soap_type() const { return 2420; } /* = unique type id SOAP_TYPE___tev__Unsubscribe */
};
#endif

#ifndef SOAP_TYPE___tev__GetServiceCapabilities
#define SOAP_TYPE___tev__GetServiceCapabilities (2424)
/* Operation wrapper: */
struct __tev__GetServiceCapabilities
{
public:
	_tev__GetServiceCapabilities *tev__GetServiceCapabilities;	/* optional element of type tev:GetServiceCapabilities */
public:
	int soap_type() const { return 2424; } /* = unique type id SOAP_TYPE___tev__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tev__CreatePullPointSubscription
#define SOAP_TYPE___tev__CreatePullPointSubscription (2428)
/* Operation wrapper: */
struct __tev__CreatePullPointSubscription
{
public:
	_tev__CreatePullPointSubscription *tev__CreatePullPointSubscription;	/* optional element of type tev:CreatePullPointSubscription */
public:
	int soap_type() const { return 2428; } /* = unique type id SOAP_TYPE___tev__CreatePullPointSubscription */
};
#endif

#ifndef SOAP_TYPE___tev__GetEventProperties
#define SOAP_TYPE___tev__GetEventProperties (2432)
/* Operation wrapper: */
struct __tev__GetEventProperties
{
public:
	_tev__GetEventProperties *tev__GetEventProperties;	/* optional element of type tev:GetEventProperties */
public:
	int soap_type() const { return 2432; } /* = unique type id SOAP_TYPE___tev__GetEventProperties */
};
#endif

#ifndef SOAP_TYPE___tev__Renew
#define SOAP_TYPE___tev__Renew (2436)
/* Operation wrapper: */
struct __tev__Renew
{
public:
	_wsnt__Renew *wsnt__Renew;	/* optional element of type wsnt:Renew */
public:
	int soap_type() const { return 2436; } /* = unique type id SOAP_TYPE___tev__Renew */
};
#endif

#ifndef SOAP_TYPE___tev__Unsubscribe_
#define SOAP_TYPE___tev__Unsubscribe_ (2438)
/* Operation wrapper: */
struct __tev__Unsubscribe_
{
public:
	_wsnt__Unsubscribe *wsnt__Unsubscribe;	/* optional element of type wsnt:Unsubscribe */
public:
	int soap_type() const { return 2438; } /* = unique type id SOAP_TYPE___tev__Unsubscribe_ */
};
#endif

#ifndef SOAP_TYPE___tev__Subscribe
#define SOAP_TYPE___tev__Subscribe (2442)
/* Operation wrapper: */
struct __tev__Subscribe
{
public:
	_wsnt__Subscribe *wsnt__Subscribe;	/* optional element of type wsnt:Subscribe */
public:
	int soap_type() const { return 2442; } /* = unique type id SOAP_TYPE___tev__Subscribe */
};
#endif

#ifndef SOAP_TYPE___tev__GetCurrentMessage
#define SOAP_TYPE___tev__GetCurrentMessage (2446)
/* Operation wrapper: */
struct __tev__GetCurrentMessage
{
public:
	_wsnt__GetCurrentMessage *wsnt__GetCurrentMessage;	/* optional element of type wsnt:GetCurrentMessage */
public:
	int soap_type() const { return 2446; } /* = unique type id SOAP_TYPE___tev__GetCurrentMessage */
};
#endif

#ifndef SOAP_TYPE___tev__Notify
#define SOAP_TYPE___tev__Notify (2449)
/* Operation wrapper: */
struct __tev__Notify
{
public:
	_wsnt__Notify *wsnt__Notify;	/* optional element of type wsnt:Notify */
public:
	int soap_type() const { return 2449; } /* = unique type id SOAP_TYPE___tev__Notify */
};
#endif

#ifndef SOAP_TYPE___tev__GetMessages
#define SOAP_TYPE___tev__GetMessages (2453)
/* Operation wrapper: */
struct __tev__GetMessages
{
public:
	_wsnt__GetMessages *wsnt__GetMessages;	/* optional element of type wsnt:GetMessages */
public:
	int soap_type() const { return 2453; } /* = unique type id SOAP_TYPE___tev__GetMessages */
};
#endif

#ifndef SOAP_TYPE___tev__DestroyPullPoint
#define SOAP_TYPE___tev__DestroyPullPoint (2457)
/* Operation wrapper: */
struct __tev__DestroyPullPoint
{
public:
	_wsnt__DestroyPullPoint *wsnt__DestroyPullPoint;	/* optional element of type wsnt:DestroyPullPoint */
public:
	int soap_type() const { return 2457; } /* = unique type id SOAP_TYPE___tev__DestroyPullPoint */
};
#endif

#ifndef SOAP_TYPE___tev__Notify_
#define SOAP_TYPE___tev__Notify_ (2459)
/* Operation wrapper: */
struct __tev__Notify_
{
public:
	_wsnt__Notify *wsnt__Notify;	/* optional element of type wsnt:Notify */
public:
	int soap_type() const { return 2459; } /* = unique type id SOAP_TYPE___tev__Notify_ */
};
#endif

#ifndef SOAP_TYPE___tev__CreatePullPoint
#define SOAP_TYPE___tev__CreatePullPoint (2463)
/* Operation wrapper: */
struct __tev__CreatePullPoint
{
public:
	_wsnt__CreatePullPoint *wsnt__CreatePullPoint;	/* optional element of type wsnt:CreatePullPoint */
public:
	int soap_type() const { return 2463; } /* = unique type id SOAP_TYPE___tev__CreatePullPoint */
};
#endif

#ifndef SOAP_TYPE___tev__Renew_
#define SOAP_TYPE___tev__Renew_ (2465)
/* Operation wrapper: */
struct __tev__Renew_
{
public:
	_wsnt__Renew *wsnt__Renew;	/* optional element of type wsnt:Renew */
public:
	int soap_type() const { return 2465; } /* = unique type id SOAP_TYPE___tev__Renew_ */
};
#endif

#ifndef SOAP_TYPE___tev__Unsubscribe__
#define SOAP_TYPE___tev__Unsubscribe__ (2467)
/* Operation wrapper: */
struct __tev__Unsubscribe__
{
public:
	_wsnt__Unsubscribe *wsnt__Unsubscribe;	/* optional element of type wsnt:Unsubscribe */
public:
	int soap_type() const { return 2467; } /* = unique type id SOAP_TYPE___tev__Unsubscribe__ */
};
#endif

#ifndef SOAP_TYPE___tev__PauseSubscription
#define SOAP_TYPE___tev__PauseSubscription (2471)
/* Operation wrapper: */
struct __tev__PauseSubscription
{
public:
	_wsnt__PauseSubscription *wsnt__PauseSubscription;	/* optional element of type wsnt:PauseSubscription */
public:
	int soap_type() const { return 2471; } /* = unique type id SOAP_TYPE___tev__PauseSubscription */
};
#endif

#ifndef SOAP_TYPE___tev__ResumeSubscription
#define SOAP_TYPE___tev__ResumeSubscription (2475)
/* Operation wrapper: */
struct __tev__ResumeSubscription
{
public:
	_wsnt__ResumeSubscription *wsnt__ResumeSubscription;	/* optional element of type wsnt:ResumeSubscription */
public:
	int soap_type() const { return 2475; } /* = unique type id SOAP_TYPE___tev__ResumeSubscription */
};
#endif

#ifndef SOAP_TYPE___timg__GetServiceCapabilities
#define SOAP_TYPE___timg__GetServiceCapabilities (2479)
/* Operation wrapper: */
struct __timg__GetServiceCapabilities
{
public:
	_timg__GetServiceCapabilities *timg__GetServiceCapabilities;	/* optional element of type timg:GetServiceCapabilities */
public:
	int soap_type() const { return 2479; } /* = unique type id SOAP_TYPE___timg__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___timg__GetImagingSettings
#define SOAP_TYPE___timg__GetImagingSettings (2483)
/* Operation wrapper: */
struct __timg__GetImagingSettings
{
public:
	_timg__GetImagingSettings *timg__GetImagingSettings;	/* optional element of type timg:GetImagingSettings */
public:
	int soap_type() const { return 2483; } /* = unique type id SOAP_TYPE___timg__GetImagingSettings */
};
#endif

#ifndef SOAP_TYPE___timg__SetImagingSettings
#define SOAP_TYPE___timg__SetImagingSettings (2487)
/* Operation wrapper: */
struct __timg__SetImagingSettings
{
public:
	_timg__SetImagingSettings *timg__SetImagingSettings;	/* optional element of type timg:SetImagingSettings */
public:
	int soap_type() const { return 2487; } /* = unique type id SOAP_TYPE___timg__SetImagingSettings */
};
#endif

#ifndef SOAP_TYPE___timg__GetOptions
#define SOAP_TYPE___timg__GetOptions (2491)
/* Operation wrapper: */
struct __timg__GetOptions
{
public:
	_timg__GetOptions *timg__GetOptions;	/* optional element of type timg:GetOptions */
public:
	int soap_type() const { return 2491; } /* = unique type id SOAP_TYPE___timg__GetOptions */
};
#endif

#ifndef SOAP_TYPE___timg__Move
#define SOAP_TYPE___timg__Move (2495)
/* Operation wrapper: */
struct __timg__Move
{
public:
	_timg__Move *timg__Move;	/* optional element of type timg:Move */
public:
	int soap_type() const { return 2495; } /* = unique type id SOAP_TYPE___timg__Move */
};
#endif

#ifndef SOAP_TYPE___timg__Stop
#define SOAP_TYPE___timg__Stop (2499)
/* Operation wrapper: */
struct __timg__Stop
{
public:
	_timg__Stop *timg__Stop;	/* optional element of type timg:Stop */
public:
	int soap_type() const { return 2499; } /* = unique type id SOAP_TYPE___timg__Stop */
};
#endif

#ifndef SOAP_TYPE___timg__GetStatus
#define SOAP_TYPE___timg__GetStatus (2503)
/* Operation wrapper: */
struct __timg__GetStatus
{
public:
	_timg__GetStatus *timg__GetStatus;	/* optional element of type timg:GetStatus */
public:
	int soap_type() const { return 2503; } /* = unique type id SOAP_TYPE___timg__GetStatus */
};
#endif

#ifndef SOAP_TYPE___timg__GetMoveOptions
#define SOAP_TYPE___timg__GetMoveOptions (2507)
/* Operation wrapper: */
struct __timg__GetMoveOptions
{
public:
	_timg__GetMoveOptions *timg__GetMoveOptions;	/* optional element of type timg:GetMoveOptions */
public:
	int soap_type() const { return 2507; } /* = unique type id SOAP_TYPE___timg__GetMoveOptions */
};
#endif

#ifndef SOAP_TYPE___timg__GetPresets
#define SOAP_TYPE___timg__GetPresets (2511)
/* Operation wrapper: */
struct __timg__GetPresets
{
public:
	_timg__GetPresets *timg__GetPresets;	/* optional element of type timg:GetPresets */
public:
	int soap_type() const { return 2511; } /* = unique type id SOAP_TYPE___timg__GetPresets */
};
#endif

#ifndef SOAP_TYPE___timg__GetCurrentPreset
#define SOAP_TYPE___timg__GetCurrentPreset (2515)
/* Operation wrapper: */
struct __timg__GetCurrentPreset
{
public:
	_timg__GetCurrentPreset *timg__GetCurrentPreset;	/* optional element of type timg:GetCurrentPreset */
public:
	int soap_type() const { return 2515; } /* = unique type id SOAP_TYPE___timg__GetCurrentPreset */
};
#endif

#ifndef SOAP_TYPE___timg__SetCurrentPreset
#define SOAP_TYPE___timg__SetCurrentPreset (2519)
/* Operation wrapper: */
struct __timg__SetCurrentPreset
{
public:
	_timg__SetCurrentPreset *timg__SetCurrentPreset;	/* optional element of type timg:SetCurrentPreset */
public:
	int soap_type() const { return 2519; } /* = unique type id SOAP_TYPE___timg__SetCurrentPreset */
};
#endif

#ifndef SOAP_TYPE___tmd__GetServiceCapabilities
#define SOAP_TYPE___tmd__GetServiceCapabilities (2523)
/* Operation wrapper: */
struct __tmd__GetServiceCapabilities
{
public:
	_tmd__GetServiceCapabilities *tmd__GetServiceCapabilities;	/* optional element of type tmd:GetServiceCapabilities */
public:
	int soap_type() const { return 2523; } /* = unique type id SOAP_TYPE___tmd__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tmd__GetRelayOutputOptions
#define SOAP_TYPE___tmd__GetRelayOutputOptions (2527)
/* Operation wrapper: */
struct __tmd__GetRelayOutputOptions
{
public:
	_tmd__GetRelayOutputOptions *tmd__GetRelayOutputOptions;	/* optional element of type tmd:GetRelayOutputOptions */
public:
	int soap_type() const { return 2527; } /* = unique type id SOAP_TYPE___tmd__GetRelayOutputOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioSources
#define SOAP_TYPE___tmd__GetAudioSources (2531)
/* Operation wrapper: */
struct __tmd__GetAudioSources
{
public:
	tmd__Get *tmd__GetAudioSources;	/* optional element of type tmd:Get */
public:
	int soap_type() const { return 2531; } /* = unique type id SOAP_TYPE___tmd__GetAudioSources */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioOutputs
#define SOAP_TYPE___tmd__GetAudioOutputs (2533)
/* Operation wrapper: */
struct __tmd__GetAudioOutputs
{
public:
	tmd__Get *tmd__GetAudioOutputs;	/* optional element of type tmd:Get */
public:
	int soap_type() const { return 2533; } /* = unique type id SOAP_TYPE___tmd__GetAudioOutputs */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoSources
#define SOAP_TYPE___tmd__GetVideoSources (2535)
/* Operation wrapper: */
struct __tmd__GetVideoSources
{
public:
	tmd__Get *tmd__GetVideoSources;	/* optional element of type tmd:Get */
public:
	int soap_type() const { return 2535; } /* = unique type id SOAP_TYPE___tmd__GetVideoSources */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoOutputs
#define SOAP_TYPE___tmd__GetVideoOutputs (2539)
/* Operation wrapper: */
struct __tmd__GetVideoOutputs
{
public:
	_tmd__GetVideoOutputs *tmd__GetVideoOutputs;	/* optional element of type tmd:GetVideoOutputs */
public:
	int soap_type() const { return 2539; } /* = unique type id SOAP_TYPE___tmd__GetVideoOutputs */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoSourceConfiguration
#define SOAP_TYPE___tmd__GetVideoSourceConfiguration (2543)
/* Operation wrapper: */
struct __tmd__GetVideoSourceConfiguration
{
public:
	_tmd__GetVideoSourceConfiguration *tmd__GetVideoSourceConfiguration;	/* optional element of type tmd:GetVideoSourceConfiguration */
public:
	int soap_type() const { return 2543; } /* = unique type id SOAP_TYPE___tmd__GetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoOutputConfiguration
#define SOAP_TYPE___tmd__GetVideoOutputConfiguration (2547)
/* Operation wrapper: */
struct __tmd__GetVideoOutputConfiguration
{
public:
	_tmd__GetVideoOutputConfiguration *tmd__GetVideoOutputConfiguration;	/* optional element of type tmd:GetVideoOutputConfiguration */
public:
	int soap_type() const { return 2547; } /* = unique type id SOAP_TYPE___tmd__GetVideoOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioSourceConfiguration
#define SOAP_TYPE___tmd__GetAudioSourceConfiguration (2551)
/* Operation wrapper: */
struct __tmd__GetAudioSourceConfiguration
{
public:
	_tmd__GetAudioSourceConfiguration *tmd__GetAudioSourceConfiguration;	/* optional element of type tmd:GetAudioSourceConfiguration */
public:
	int soap_type() const { return 2551; } /* = unique type id SOAP_TYPE___tmd__GetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioOutputConfiguration
#define SOAP_TYPE___tmd__GetAudioOutputConfiguration (2555)
/* Operation wrapper: */
struct __tmd__GetAudioOutputConfiguration
{
public:
	_tmd__GetAudioOutputConfiguration *tmd__GetAudioOutputConfiguration;	/* optional element of type tmd:GetAudioOutputConfiguration */
public:
	int soap_type() const { return 2555; } /* = unique type id SOAP_TYPE___tmd__GetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__SetVideoSourceConfiguration
#define SOAP_TYPE___tmd__SetVideoSourceConfiguration (2559)
/* Operation wrapper: */
struct __tmd__SetVideoSourceConfiguration
{
public:
	_tmd__SetVideoSourceConfiguration *tmd__SetVideoSourceConfiguration;	/* optional element of type tmd:SetVideoSourceConfiguration */
public:
	int soap_type() const { return 2559; } /* = unique type id SOAP_TYPE___tmd__SetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__SetVideoOutputConfiguration
#define SOAP_TYPE___tmd__SetVideoOutputConfiguration (2563)
/* Operation wrapper: */
struct __tmd__SetVideoOutputConfiguration
{
public:
	_tmd__SetVideoOutputConfiguration *tmd__SetVideoOutputConfiguration;	/* optional element of type tmd:SetVideoOutputConfiguration */
public:
	int soap_type() const { return 2563; } /* = unique type id SOAP_TYPE___tmd__SetVideoOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__SetAudioSourceConfiguration
#define SOAP_TYPE___tmd__SetAudioSourceConfiguration (2567)
/* Operation wrapper: */
struct __tmd__SetAudioSourceConfiguration
{
public:
	_tmd__SetAudioSourceConfiguration *tmd__SetAudioSourceConfiguration;	/* optional element of type tmd:SetAudioSourceConfiguration */
public:
	int soap_type() const { return 2567; } /* = unique type id SOAP_TYPE___tmd__SetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__SetAudioOutputConfiguration
#define SOAP_TYPE___tmd__SetAudioOutputConfiguration (2571)
/* Operation wrapper: */
struct __tmd__SetAudioOutputConfiguration
{
public:
	_tmd__SetAudioOutputConfiguration *tmd__SetAudioOutputConfiguration;	/* optional element of type tmd:SetAudioOutputConfiguration */
public:
	int soap_type() const { return 2571; } /* = unique type id SOAP_TYPE___tmd__SetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoSourceConfigurationOptions
#define SOAP_TYPE___tmd__GetVideoSourceConfigurationOptions (2575)
/* Operation wrapper: */
struct __tmd__GetVideoSourceConfigurationOptions
{
public:
	_tmd__GetVideoSourceConfigurationOptions *tmd__GetVideoSourceConfigurationOptions;	/* optional element of type tmd:GetVideoSourceConfigurationOptions */
public:
	int soap_type() const { return 2575; } /* = unique type id SOAP_TYPE___tmd__GetVideoSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoOutputConfigurationOptions
#define SOAP_TYPE___tmd__GetVideoOutputConfigurationOptions (2579)
/* Operation wrapper: */
struct __tmd__GetVideoOutputConfigurationOptions
{
public:
	_tmd__GetVideoOutputConfigurationOptions *tmd__GetVideoOutputConfigurationOptions;	/* optional element of type tmd:GetVideoOutputConfigurationOptions */
public:
	int soap_type() const { return 2579; } /* = unique type id SOAP_TYPE___tmd__GetVideoOutputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioSourceConfigurationOptions
#define SOAP_TYPE___tmd__GetAudioSourceConfigurationOptions (2583)
/* Operation wrapper: */
struct __tmd__GetAudioSourceConfigurationOptions
{
public:
	_tmd__GetAudioSourceConfigurationOptions *tmd__GetAudioSourceConfigurationOptions;	/* optional element of type tmd:GetAudioSourceConfigurationOptions */
public:
	int soap_type() const { return 2583; } /* = unique type id SOAP_TYPE___tmd__GetAudioSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioOutputConfigurationOptions
#define SOAP_TYPE___tmd__GetAudioOutputConfigurationOptions (2587)
/* Operation wrapper: */
struct __tmd__GetAudioOutputConfigurationOptions
{
public:
	_tmd__GetAudioOutputConfigurationOptions *tmd__GetAudioOutputConfigurationOptions;	/* optional element of type tmd:GetAudioOutputConfigurationOptions */
public:
	int soap_type() const { return 2587; } /* = unique type id SOAP_TYPE___tmd__GetAudioOutputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__GetRelayOutputs
#define SOAP_TYPE___tmd__GetRelayOutputs (2589)
/* Operation wrapper: */
struct __tmd__GetRelayOutputs
{
public:
	_tds__GetRelayOutputs *tds__GetRelayOutputs;	/* optional element of type tds:GetRelayOutputs */
public:
	int soap_type() const { return 2589; } /* = unique type id SOAP_TYPE___tmd__GetRelayOutputs */
};
#endif

#ifndef SOAP_TYPE___tmd__SetRelayOutputSettings
#define SOAP_TYPE___tmd__SetRelayOutputSettings (2593)
/* Operation wrapper: */
struct __tmd__SetRelayOutputSettings
{
public:
	_tmd__SetRelayOutputSettings *tmd__SetRelayOutputSettings;	/* optional element of type tmd:SetRelayOutputSettings */
public:
	int soap_type() const { return 2593; } /* = unique type id SOAP_TYPE___tmd__SetRelayOutputSettings */
};
#endif

#ifndef SOAP_TYPE___tmd__SetRelayOutputState
#define SOAP_TYPE___tmd__SetRelayOutputState (2595)
/* Operation wrapper: */
struct __tmd__SetRelayOutputState
{
public:
	_tds__SetRelayOutputState *tds__SetRelayOutputState;	/* optional element of type tds:SetRelayOutputState */
public:
	int soap_type() const { return 2595; } /* = unique type id SOAP_TYPE___tmd__SetRelayOutputState */
};
#endif

#ifndef SOAP_TYPE___tmd__GetDigitalInputs
#define SOAP_TYPE___tmd__GetDigitalInputs (2599)
/* Operation wrapper: */
struct __tmd__GetDigitalInputs
{
public:
	_tmd__GetDigitalInputs *tmd__GetDigitalInputs;	/* optional element of type tmd:GetDigitalInputs */
public:
	int soap_type() const { return 2599; } /* = unique type id SOAP_TYPE___tmd__GetDigitalInputs */
};
#endif

#ifndef SOAP_TYPE___tmd__GetDigitalInputConfigurationOptions
#define SOAP_TYPE___tmd__GetDigitalInputConfigurationOptions (2603)
/* Operation wrapper: */
struct __tmd__GetDigitalInputConfigurationOptions
{
public:
	_tmd__GetDigitalInputConfigurationOptions *tmd__GetDigitalInputConfigurationOptions;	/* optional element of type tmd:GetDigitalInputConfigurationOptions */
public:
	int soap_type() const { return 2603; } /* = unique type id SOAP_TYPE___tmd__GetDigitalInputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__SetDigitalInputConfigurations
#define SOAP_TYPE___tmd__SetDigitalInputConfigurations (2607)
/* Operation wrapper: */
struct __tmd__SetDigitalInputConfigurations
{
public:
	_tmd__SetDigitalInputConfigurations *tmd__SetDigitalInputConfigurations;	/* optional element of type tmd:SetDigitalInputConfigurations */
public:
	int soap_type() const { return 2607; } /* = unique type id SOAP_TYPE___tmd__SetDigitalInputConfigurations */
};
#endif

#ifndef SOAP_TYPE___tmd__GetSerialPorts
#define SOAP_TYPE___tmd__GetSerialPorts (2611)
/* Operation wrapper: */
struct __tmd__GetSerialPorts
{
public:
	_tmd__GetSerialPorts *tmd__GetSerialPorts;	/* optional element of type tmd:GetSerialPorts */
public:
	int soap_type() const { return 2611; } /* = unique type id SOAP_TYPE___tmd__GetSerialPorts */
};
#endif

#ifndef SOAP_TYPE___tmd__GetSerialPortConfiguration
#define SOAP_TYPE___tmd__GetSerialPortConfiguration (2615)
/* Operation wrapper: */
struct __tmd__GetSerialPortConfiguration
{
public:
	_tmd__GetSerialPortConfiguration *tmd__GetSerialPortConfiguration;	/* optional element of type tmd:GetSerialPortConfiguration */
public:
	int soap_type() const { return 2615; } /* = unique type id SOAP_TYPE___tmd__GetSerialPortConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__SetSerialPortConfiguration
#define SOAP_TYPE___tmd__SetSerialPortConfiguration (2619)
/* Operation wrapper: */
struct __tmd__SetSerialPortConfiguration
{
public:
	_tmd__SetSerialPortConfiguration *tmd__SetSerialPortConfiguration;	/* optional element of type tmd:SetSerialPortConfiguration */
public:
	int soap_type() const { return 2619; } /* = unique type id SOAP_TYPE___tmd__SetSerialPortConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetSerialPortConfigurationOptions
#define SOAP_TYPE___tmd__GetSerialPortConfigurationOptions (2623)
/* Operation wrapper: */
struct __tmd__GetSerialPortConfigurationOptions
{
public:
	_tmd__GetSerialPortConfigurationOptions *tmd__GetSerialPortConfigurationOptions;	/* optional element of type tmd:GetSerialPortConfigurationOptions */
public:
	int soap_type() const { return 2623; } /* = unique type id SOAP_TYPE___tmd__GetSerialPortConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__SendReceiveSerialCommand
#define SOAP_TYPE___tmd__SendReceiveSerialCommand (2627)
/* Operation wrapper: */
struct __tmd__SendReceiveSerialCommand
{
public:
	_tmd__SendReceiveSerialCommand *tmd__SendReceiveSerialCommand;	/* optional element of type tmd:SendReceiveSerialCommand */
public:
	int soap_type() const { return 2627; } /* = unique type id SOAP_TYPE___tmd__SendReceiveSerialCommand */
};
#endif

#ifndef SOAP_TYPE___tptz__GetServiceCapabilities
#define SOAP_TYPE___tptz__GetServiceCapabilities (2631)
/* Operation wrapper: */
struct __tptz__GetServiceCapabilities
{
public:
	_tptz__GetServiceCapabilities *tptz__GetServiceCapabilities;	/* optional element of type tptz:GetServiceCapabilities */
public:
	int soap_type() const { return 2631; } /* = unique type id SOAP_TYPE___tptz__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tptz__GetConfigurations
#define SOAP_TYPE___tptz__GetConfigurations (2635)
/* Operation wrapper: */
struct __tptz__GetConfigurations
{
public:
	_tptz__GetConfigurations *tptz__GetConfigurations;	/* optional element of type tptz:GetConfigurations */
public:
	int soap_type() const { return 2635; } /* = unique type id SOAP_TYPE___tptz__GetConfigurations */
};
#endif

#ifndef SOAP_TYPE___tptz__GetPresets
#define SOAP_TYPE___tptz__GetPresets (2639)
/* Operation wrapper: */
struct __tptz__GetPresets
{
public:
	_tptz__GetPresets *tptz__GetPresets;	/* optional element of type tptz:GetPresets */
public:
	int soap_type() const { return 2639; } /* = unique type id SOAP_TYPE___tptz__GetPresets */
};
#endif

#ifndef SOAP_TYPE___tptz__SetPreset
#define SOAP_TYPE___tptz__SetPreset (2643)
/* Operation wrapper: */
struct __tptz__SetPreset
{
public:
	_tptz__SetPreset *tptz__SetPreset;	/* optional element of type tptz:SetPreset */
public:
	int soap_type() const { return 2643; } /* = unique type id SOAP_TYPE___tptz__SetPreset */
};
#endif

#ifndef SOAP_TYPE___tptz__RemovePreset
#define SOAP_TYPE___tptz__RemovePreset (2647)
/* Operation wrapper: */
struct __tptz__RemovePreset
{
public:
	_tptz__RemovePreset *tptz__RemovePreset;	/* optional element of type tptz:RemovePreset */
public:
	int soap_type() const { return 2647; } /* = unique type id SOAP_TYPE___tptz__RemovePreset */
};
#endif

#ifndef SOAP_TYPE___tptz__GotoPreset
#define SOAP_TYPE___tptz__GotoPreset (2651)
/* Operation wrapper: */
struct __tptz__GotoPreset
{
public:
	_tptz__GotoPreset *tptz__GotoPreset;	/* optional element of type tptz:GotoPreset */
public:
	int soap_type() const { return 2651; } /* = unique type id SOAP_TYPE___tptz__GotoPreset */
};
#endif

#ifndef SOAP_TYPE___tptz__GetStatus
#define SOAP_TYPE___tptz__GetStatus (2655)
/* Operation wrapper: */
struct __tptz__GetStatus
{
public:
	_tptz__GetStatus *tptz__GetStatus;	/* optional element of type tptz:GetStatus */
public:
	int soap_type() const { return 2655; } /* = unique type id SOAP_TYPE___tptz__GetStatus */
};
#endif

#ifndef SOAP_TYPE___tptz__GetConfiguration
#define SOAP_TYPE___tptz__GetConfiguration (2659)
/* Operation wrapper: */
struct __tptz__GetConfiguration
{
public:
	_tptz__GetConfiguration *tptz__GetConfiguration;	/* optional element of type tptz:GetConfiguration */
public:
	int soap_type() const { return 2659; } /* = unique type id SOAP_TYPE___tptz__GetConfiguration */
};
#endif

#ifndef SOAP_TYPE___tptz__GetNodes
#define SOAP_TYPE___tptz__GetNodes (2663)
/* Operation wrapper: */
struct __tptz__GetNodes
{
public:
	_tptz__GetNodes *tptz__GetNodes;	/* optional element of type tptz:GetNodes */
public:
	int soap_type() const { return 2663; } /* = unique type id SOAP_TYPE___tptz__GetNodes */
};
#endif

#ifndef SOAP_TYPE___tptz__GetNode
#define SOAP_TYPE___tptz__GetNode (2667)
/* Operation wrapper: */
struct __tptz__GetNode
{
public:
	_tptz__GetNode *tptz__GetNode;	/* optional element of type tptz:GetNode */
public:
	int soap_type() const { return 2667; } /* = unique type id SOAP_TYPE___tptz__GetNode */
};
#endif

#ifndef SOAP_TYPE___tptz__SetConfiguration
#define SOAP_TYPE___tptz__SetConfiguration (2671)
/* Operation wrapper: */
struct __tptz__SetConfiguration
{
public:
	_tptz__SetConfiguration *tptz__SetConfiguration;	/* optional element of type tptz:SetConfiguration */
public:
	int soap_type() const { return 2671; } /* = unique type id SOAP_TYPE___tptz__SetConfiguration */
};
#endif

#ifndef SOAP_TYPE___tptz__GetConfigurationOptions
#define SOAP_TYPE___tptz__GetConfigurationOptions (2675)
/* Operation wrapper: */
struct __tptz__GetConfigurationOptions
{
public:
	_tptz__GetConfigurationOptions *tptz__GetConfigurationOptions;	/* optional element of type tptz:GetConfigurationOptions */
public:
	int soap_type() const { return 2675; } /* = unique type id SOAP_TYPE___tptz__GetConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tptz__GotoHomePosition
#define SOAP_TYPE___tptz__GotoHomePosition (2679)
/* Operation wrapper: */
struct __tptz__GotoHomePosition
{
public:
	_tptz__GotoHomePosition *tptz__GotoHomePosition;	/* optional element of type tptz:GotoHomePosition */
public:
	int soap_type() const { return 2679; } /* = unique type id SOAP_TYPE___tptz__GotoHomePosition */
};
#endif

#ifndef SOAP_TYPE___tptz__SetHomePosition
#define SOAP_TYPE___tptz__SetHomePosition (2683)
/* Operation wrapper: */
struct __tptz__SetHomePosition
{
public:
	_tptz__SetHomePosition *tptz__SetHomePosition;	/* optional element of type tptz:SetHomePosition */
public:
	int soap_type() const { return 2683; } /* = unique type id SOAP_TYPE___tptz__SetHomePosition */
};
#endif

#ifndef SOAP_TYPE___tptz__ContinuousMove
#define SOAP_TYPE___tptz__ContinuousMove (2687)
/* Operation wrapper: */
struct __tptz__ContinuousMove
{
public:
	_tptz__ContinuousMove *tptz__ContinuousMove;	/* optional element of type tptz:ContinuousMove */
public:
	int soap_type() const { return 2687; } /* = unique type id SOAP_TYPE___tptz__ContinuousMove */
};
#endif

#ifndef SOAP_TYPE___tptz__RelativeMove
#define SOAP_TYPE___tptz__RelativeMove (2691)
/* Operation wrapper: */
struct __tptz__RelativeMove
{
public:
	_tptz__RelativeMove *tptz__RelativeMove;	/* optional element of type tptz:RelativeMove */
public:
	int soap_type() const { return 2691; } /* = unique type id SOAP_TYPE___tptz__RelativeMove */
};
#endif

#ifndef SOAP_TYPE___tptz__SendAuxiliaryCommand
#define SOAP_TYPE___tptz__SendAuxiliaryCommand (2695)
/* Operation wrapper: */
struct __tptz__SendAuxiliaryCommand
{
public:
	_tptz__SendAuxiliaryCommand *tptz__SendAuxiliaryCommand;	/* optional element of type tptz:SendAuxiliaryCommand */
public:
	int soap_type() const { return 2695; } /* = unique type id SOAP_TYPE___tptz__SendAuxiliaryCommand */
};
#endif

#ifndef SOAP_TYPE___tptz__AbsoluteMove
#define SOAP_TYPE___tptz__AbsoluteMove (2699)
/* Operation wrapper: */
struct __tptz__AbsoluteMove
{
public:
	_tptz__AbsoluteMove *tptz__AbsoluteMove;	/* optional element of type tptz:AbsoluteMove */
public:
	int soap_type() const { return 2699; } /* = unique type id SOAP_TYPE___tptz__AbsoluteMove */
};
#endif

#ifndef SOAP_TYPE___tptz__GeoMove
#define SOAP_TYPE___tptz__GeoMove (2703)
/* Operation wrapper: */
struct __tptz__GeoMove
{
public:
	_tptz__GeoMove *tptz__GeoMove;	/* optional element of type tptz:GeoMove */
public:
	int soap_type() const { return 2703; } /* = unique type id SOAP_TYPE___tptz__GeoMove */
};
#endif

#ifndef SOAP_TYPE___tptz__Stop
#define SOAP_TYPE___tptz__Stop (2707)
/* Operation wrapper: */
struct __tptz__Stop
{
public:
	_tptz__Stop *tptz__Stop;	/* optional element of type tptz:Stop */
public:
	int soap_type() const { return 2707; } /* = unique type id SOAP_TYPE___tptz__Stop */
};
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTours
#define SOAP_TYPE___tptz__GetPresetTours (2711)
/* Operation wrapper: */
struct __tptz__GetPresetTours
{
public:
	_tptz__GetPresetTours *tptz__GetPresetTours;	/* optional element of type tptz:GetPresetTours */
public:
	int soap_type() const { return 2711; } /* = unique type id SOAP_TYPE___tptz__GetPresetTours */
};
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTour
#define SOAP_TYPE___tptz__GetPresetTour (2715)
/* Operation wrapper: */
struct __tptz__GetPresetTour
{
public:
	_tptz__GetPresetTour *tptz__GetPresetTour;	/* optional element of type tptz:GetPresetTour */
public:
	int soap_type() const { return 2715; } /* = unique type id SOAP_TYPE___tptz__GetPresetTour */
};
#endif

#ifndef SOAP_TYPE___tptz__GetPresetTourOptions
#define SOAP_TYPE___tptz__GetPresetTourOptions (2719)
/* Operation wrapper: */
struct __tptz__GetPresetTourOptions
{
public:
	_tptz__GetPresetTourOptions *tptz__GetPresetTourOptions;	/* optional element of type tptz:GetPresetTourOptions */
public:
	int soap_type() const { return 2719; } /* = unique type id SOAP_TYPE___tptz__GetPresetTourOptions */
};
#endif

#ifndef SOAP_TYPE___tptz__CreatePresetTour
#define SOAP_TYPE___tptz__CreatePresetTour (2723)
/* Operation wrapper: */
struct __tptz__CreatePresetTour
{
public:
	_tptz__CreatePresetTour *tptz__CreatePresetTour;	/* optional element of type tptz:CreatePresetTour */
public:
	int soap_type() const { return 2723; } /* = unique type id SOAP_TYPE___tptz__CreatePresetTour */
};
#endif

#ifndef SOAP_TYPE___tptz__ModifyPresetTour
#define SOAP_TYPE___tptz__ModifyPresetTour (2727)
/* Operation wrapper: */
struct __tptz__ModifyPresetTour
{
public:
	_tptz__ModifyPresetTour *tptz__ModifyPresetTour;	/* optional element of type tptz:ModifyPresetTour */
public:
	int soap_type() const { return 2727; } /* = unique type id SOAP_TYPE___tptz__ModifyPresetTour */
};
#endif

#ifndef SOAP_TYPE___tptz__OperatePresetTour
#define SOAP_TYPE___tptz__OperatePresetTour (2731)
/* Operation wrapper: */
struct __tptz__OperatePresetTour
{
public:
	_tptz__OperatePresetTour *tptz__OperatePresetTour;	/* optional element of type tptz:OperatePresetTour */
public:
	int soap_type() const { return 2731; } /* = unique type id SOAP_TYPE___tptz__OperatePresetTour */
};
#endif

#ifndef SOAP_TYPE___tptz__RemovePresetTour
#define SOAP_TYPE___tptz__RemovePresetTour (2735)
/* Operation wrapper: */
struct __tptz__RemovePresetTour
{
public:
	_tptz__RemovePresetTour *tptz__RemovePresetTour;	/* optional element of type tptz:RemovePresetTour */
public:
	int soap_type() const { return 2735; } /* = unique type id SOAP_TYPE___tptz__RemovePresetTour */
};
#endif

#ifndef SOAP_TYPE___tptz__GetCompatibleConfigurations
#define SOAP_TYPE___tptz__GetCompatibleConfigurations (2739)
/* Operation wrapper: */
struct __tptz__GetCompatibleConfigurations
{
public:
	_tptz__GetCompatibleConfigurations *tptz__GetCompatibleConfigurations;	/* optional element of type tptz:GetCompatibleConfigurations */
public:
	int soap_type() const { return 2739; } /* = unique type id SOAP_TYPE___tptz__GetCompatibleConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetServiceCapabilities
#define SOAP_TYPE___trt__GetServiceCapabilities (2743)
/* Operation wrapper: */
struct __trt__GetServiceCapabilities
{
public:
	_trt__GetServiceCapabilities *trt__GetServiceCapabilities;	/* optional element of type trt:GetServiceCapabilities */
public:
	int soap_type() const { return 2743; } /* = unique type id SOAP_TYPE___trt__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSources
#define SOAP_TYPE___trt__GetVideoSources (2747)
/* Operation wrapper: */
struct __trt__GetVideoSources
{
public:
	_trt__GetVideoSources *trt__GetVideoSources;	/* optional element of type trt:GetVideoSources */
public:
	int soap_type() const { return 2747; } /* = unique type id SOAP_TYPE___trt__GetVideoSources */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSources
#define SOAP_TYPE___trt__GetAudioSources (2751)
/* Operation wrapper: */
struct __trt__GetAudioSources
{
public:
	_trt__GetAudioSources *trt__GetAudioSources;	/* optional element of type trt:GetAudioSources */
public:
	int soap_type() const { return 2751; } /* = unique type id SOAP_TYPE___trt__GetAudioSources */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputs
#define SOAP_TYPE___trt__GetAudioOutputs (2755)
/* Operation wrapper: */
struct __trt__GetAudioOutputs
{
public:
	_trt__GetAudioOutputs *trt__GetAudioOutputs;	/* optional element of type trt:GetAudioOutputs */
public:
	int soap_type() const { return 2755; } /* = unique type id SOAP_TYPE___trt__GetAudioOutputs */
};
#endif

#ifndef SOAP_TYPE___trt__CreateProfile
#define SOAP_TYPE___trt__CreateProfile (2759)
/* Operation wrapper: */
struct __trt__CreateProfile
{
public:
	_trt__CreateProfile *trt__CreateProfile;	/* optional element of type trt:CreateProfile */
public:
	int soap_type() const { return 2759; } /* = unique type id SOAP_TYPE___trt__CreateProfile */
};
#endif

#ifndef SOAP_TYPE___trt__GetProfile
#define SOAP_TYPE___trt__GetProfile (2763)
/* Operation wrapper: */
struct __trt__GetProfile
{
public:
	_trt__GetProfile *trt__GetProfile;	/* optional element of type trt:GetProfile */
public:
	int soap_type() const { return 2763; } /* = unique type id SOAP_TYPE___trt__GetProfile */
};
#endif

#ifndef SOAP_TYPE___trt__GetProfiles
#define SOAP_TYPE___trt__GetProfiles (2767)
/* Operation wrapper: */
struct __trt__GetProfiles
{
public:
	_trt__GetProfiles *trt__GetProfiles;	/* optional element of type trt:GetProfiles */
public:
	int soap_type() const { return 2767; } /* = unique type id SOAP_TYPE___trt__GetProfiles */
};
#endif

#ifndef SOAP_TYPE___trt__AddVideoEncoderConfiguration
#define SOAP_TYPE___trt__AddVideoEncoderConfiguration (2771)
/* Operation wrapper: */
struct __trt__AddVideoEncoderConfiguration
{
public:
	_trt__AddVideoEncoderConfiguration *trt__AddVideoEncoderConfiguration;	/* optional element of type trt:AddVideoEncoderConfiguration */
public:
	int soap_type() const { return 2771; } /* = unique type id SOAP_TYPE___trt__AddVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddVideoSourceConfiguration
#define SOAP_TYPE___trt__AddVideoSourceConfiguration (2775)
/* Operation wrapper: */
struct __trt__AddVideoSourceConfiguration
{
public:
	_trt__AddVideoSourceConfiguration *trt__AddVideoSourceConfiguration;	/* optional element of type trt:AddVideoSourceConfiguration */
public:
	int soap_type() const { return 2775; } /* = unique type id SOAP_TYPE___trt__AddVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioEncoderConfiguration
#define SOAP_TYPE___trt__AddAudioEncoderConfiguration (2779)
/* Operation wrapper: */
struct __trt__AddAudioEncoderConfiguration
{
public:
	_trt__AddAudioEncoderConfiguration *trt__AddAudioEncoderConfiguration;	/* optional element of type trt:AddAudioEncoderConfiguration */
public:
	int soap_type() const { return 2779; } /* = unique type id SOAP_TYPE___trt__AddAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioSourceConfiguration
#define SOAP_TYPE___trt__AddAudioSourceConfiguration (2783)
/* Operation wrapper: */
struct __trt__AddAudioSourceConfiguration
{
public:
	_trt__AddAudioSourceConfiguration *trt__AddAudioSourceConfiguration;	/* optional element of type trt:AddAudioSourceConfiguration */
public:
	int soap_type() const { return 2783; } /* = unique type id SOAP_TYPE___trt__AddAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddPTZConfiguration
#define SOAP_TYPE___trt__AddPTZConfiguration (2787)
/* Operation wrapper: */
struct __trt__AddPTZConfiguration
{
public:
	_trt__AddPTZConfiguration *trt__AddPTZConfiguration;	/* optional element of type trt:AddPTZConfiguration */
public:
	int soap_type() const { return 2787; } /* = unique type id SOAP_TYPE___trt__AddPTZConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__AddVideoAnalyticsConfiguration (2791)
/* Operation wrapper: */
struct __trt__AddVideoAnalyticsConfiguration
{
public:
	_trt__AddVideoAnalyticsConfiguration *trt__AddVideoAnalyticsConfiguration;	/* optional element of type trt:AddVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 2791; } /* = unique type id SOAP_TYPE___trt__AddVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddMetadataConfiguration
#define SOAP_TYPE___trt__AddMetadataConfiguration (2795)
/* Operation wrapper: */
struct __trt__AddMetadataConfiguration
{
public:
	_trt__AddMetadataConfiguration *trt__AddMetadataConfiguration;	/* optional element of type trt:AddMetadataConfiguration */
public:
	int soap_type() const { return 2795; } /* = unique type id SOAP_TYPE___trt__AddMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioOutputConfiguration
#define SOAP_TYPE___trt__AddAudioOutputConfiguration (2799)
/* Operation wrapper: */
struct __trt__AddAudioOutputConfiguration
{
public:
	_trt__AddAudioOutputConfiguration *trt__AddAudioOutputConfiguration;	/* optional element of type trt:AddAudioOutputConfiguration */
public:
	int soap_type() const { return 2799; } /* = unique type id SOAP_TYPE___trt__AddAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioDecoderConfiguration
#define SOAP_TYPE___trt__AddAudioDecoderConfiguration (2803)
/* Operation wrapper: */
struct __trt__AddAudioDecoderConfiguration
{
public:
	_trt__AddAudioDecoderConfiguration *trt__AddAudioDecoderConfiguration;	/* optional element of type trt:AddAudioDecoderConfiguration */
public:
	int soap_type() const { return 2803; } /* = unique type id SOAP_TYPE___trt__AddAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE___trt__RemoveVideoEncoderConfiguration (2807)
/* Operation wrapper: */
struct __trt__RemoveVideoEncoderConfiguration
{
public:
	_trt__RemoveVideoEncoderConfiguration *trt__RemoveVideoEncoderConfiguration;	/* optional element of type trt:RemoveVideoEncoderConfiguration */
public:
	int soap_type() const { return 2807; } /* = unique type id SOAP_TYPE___trt__RemoveVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE___trt__RemoveVideoSourceConfiguration (2811)
/* Operation wrapper: */
struct __trt__RemoveVideoSourceConfiguration
{
public:
	_trt__RemoveVideoSourceConfiguration *trt__RemoveVideoSourceConfiguration;	/* optional element of type trt:RemoveVideoSourceConfiguration */
public:
	int soap_type() const { return 2811; } /* = unique type id SOAP_TYPE___trt__RemoveVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE___trt__RemoveAudioEncoderConfiguration (2815)
/* Operation wrapper: */
struct __trt__RemoveAudioEncoderConfiguration
{
public:
	_trt__RemoveAudioEncoderConfiguration *trt__RemoveAudioEncoderConfiguration;	/* optional element of type trt:RemoveAudioEncoderConfiguration */
public:
	int soap_type() const { return 2815; } /* = unique type id SOAP_TYPE___trt__RemoveAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE___trt__RemoveAudioSourceConfiguration (2819)
/* Operation wrapper: */
struct __trt__RemoveAudioSourceConfiguration
{
public:
	_trt__RemoveAudioSourceConfiguration *trt__RemoveAudioSourceConfiguration;	/* optional element of type trt:RemoveAudioSourceConfiguration */
public:
	int soap_type() const { return 2819; } /* = unique type id SOAP_TYPE___trt__RemoveAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemovePTZConfiguration
#define SOAP_TYPE___trt__RemovePTZConfiguration (2823)
/* Operation wrapper: */
struct __trt__RemovePTZConfiguration
{
public:
	_trt__RemovePTZConfiguration *trt__RemovePTZConfiguration;	/* optional element of type trt:RemovePTZConfiguration */
public:
	int soap_type() const { return 2823; } /* = unique type id SOAP_TYPE___trt__RemovePTZConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration (2827)
/* Operation wrapper: */
struct __trt__RemoveVideoAnalyticsConfiguration
{
public:
	_trt__RemoveVideoAnalyticsConfiguration *trt__RemoveVideoAnalyticsConfiguration;	/* optional element of type trt:RemoveVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 2827; } /* = unique type id SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveMetadataConfiguration
#define SOAP_TYPE___trt__RemoveMetadataConfiguration (2831)
/* Operation wrapper: */
struct __trt__RemoveMetadataConfiguration
{
public:
	_trt__RemoveMetadataConfiguration *trt__RemoveMetadataConfiguration;	/* optional element of type trt:RemoveMetadataConfiguration */
public:
	int soap_type() const { return 2831; } /* = unique type id SOAP_TYPE___trt__RemoveMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE___trt__RemoveAudioOutputConfiguration (2835)
/* Operation wrapper: */
struct __trt__RemoveAudioOutputConfiguration
{
public:
	_trt__RemoveAudioOutputConfiguration *trt__RemoveAudioOutputConfiguration;	/* optional element of type trt:RemoveAudioOutputConfiguration */
public:
	int soap_type() const { return 2835; } /* = unique type id SOAP_TYPE___trt__RemoveAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE___trt__RemoveAudioDecoderConfiguration (2839)
/* Operation wrapper: */
struct __trt__RemoveAudioDecoderConfiguration
{
public:
	_trt__RemoveAudioDecoderConfiguration *trt__RemoveAudioDecoderConfiguration;	/* optional element of type trt:RemoveAudioDecoderConfiguration */
public:
	int soap_type() const { return 2839; } /* = unique type id SOAP_TYPE___trt__RemoveAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__DeleteProfile
#define SOAP_TYPE___trt__DeleteProfile (2843)
/* Operation wrapper: */
struct __trt__DeleteProfile
{
public:
	_trt__DeleteProfile *trt__DeleteProfile;	/* optional element of type trt:DeleteProfile */
public:
	int soap_type() const { return 2843; } /* = unique type id SOAP_TYPE___trt__DeleteProfile */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurations
#define SOAP_TYPE___trt__GetVideoSourceConfigurations (2847)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfigurations
{
public:
	_trt__GetVideoSourceConfigurations *trt__GetVideoSourceConfigurations;	/* optional element of type trt:GetVideoSourceConfigurations */
public:
	int soap_type() const { return 2847; } /* = unique type id SOAP_TYPE___trt__GetVideoSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurations
#define SOAP_TYPE___trt__GetVideoEncoderConfigurations (2851)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfigurations
{
public:
	_trt__GetVideoEncoderConfigurations *trt__GetVideoEncoderConfigurations;	/* optional element of type trt:GetVideoEncoderConfigurations */
public:
	int soap_type() const { return 2851; } /* = unique type id SOAP_TYPE___trt__GetVideoEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurations
#define SOAP_TYPE___trt__GetAudioSourceConfigurations (2855)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfigurations
{
public:
	_trt__GetAudioSourceConfigurations *trt__GetAudioSourceConfigurations;	/* optional element of type trt:GetAudioSourceConfigurations */
public:
	int soap_type() const { return 2855; } /* = unique type id SOAP_TYPE___trt__GetAudioSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurations
#define SOAP_TYPE___trt__GetAudioEncoderConfigurations (2859)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfigurations
{
public:
	_trt__GetAudioEncoderConfigurations *trt__GetAudioEncoderConfigurations;	/* optional element of type trt:GetAudioEncoderConfigurations */
public:
	int soap_type() const { return 2859; } /* = unique type id SOAP_TYPE___trt__GetAudioEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE___trt__GetVideoAnalyticsConfigurations (2863)
/* Operation wrapper: */
struct __trt__GetVideoAnalyticsConfigurations
{
public:
	_trt__GetVideoAnalyticsConfigurations *trt__GetVideoAnalyticsConfigurations;	/* optional element of type trt:GetVideoAnalyticsConfigurations */
public:
	int soap_type() const { return 2863; } /* = unique type id SOAP_TYPE___trt__GetVideoAnalyticsConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfigurations
#define SOAP_TYPE___trt__GetMetadataConfigurations (2867)
/* Operation wrapper: */
struct __trt__GetMetadataConfigurations
{
public:
	_trt__GetMetadataConfigurations *trt__GetMetadataConfigurations;	/* optional element of type trt:GetMetadataConfigurations */
public:
	int soap_type() const { return 2867; } /* = unique type id SOAP_TYPE___trt__GetMetadataConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurations
#define SOAP_TYPE___trt__GetAudioOutputConfigurations (2871)
/* Operation wrapper: */
struct __trt__GetAudioOutputConfigurations
{
public:
	_trt__GetAudioOutputConfigurations *trt__GetAudioOutputConfigurations;	/* optional element of type trt:GetAudioOutputConfigurations */
public:
	int soap_type() const { return 2871; } /* = unique type id SOAP_TYPE___trt__GetAudioOutputConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurations
#define SOAP_TYPE___trt__GetAudioDecoderConfigurations (2875)
/* Operation wrapper: */
struct __trt__GetAudioDecoderConfigurations
{
public:
	_trt__GetAudioDecoderConfigurations *trt__GetAudioDecoderConfigurations;	/* optional element of type trt:GetAudioDecoderConfigurations */
public:
	int soap_type() const { return 2875; } /* = unique type id SOAP_TYPE___trt__GetAudioDecoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfiguration
#define SOAP_TYPE___trt__GetVideoSourceConfiguration (2879)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfiguration
{
public:
	_trt__GetVideoSourceConfiguration *trt__GetVideoSourceConfiguration;	/* optional element of type trt:GetVideoSourceConfiguration */
public:
	int soap_type() const { return 2879; } /* = unique type id SOAP_TYPE___trt__GetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfiguration
#define SOAP_TYPE___trt__GetVideoEncoderConfiguration (2883)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfiguration
{
public:
	_trt__GetVideoEncoderConfiguration *trt__GetVideoEncoderConfiguration;	/* optional element of type trt:GetVideoEncoderConfiguration */
public:
	int soap_type() const { return 2883; } /* = unique type id SOAP_TYPE___trt__GetVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfiguration
#define SOAP_TYPE___trt__GetAudioSourceConfiguration (2887)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfiguration
{
public:
	_trt__GetAudioSourceConfiguration *trt__GetAudioSourceConfiguration;	/* optional element of type trt:GetAudioSourceConfiguration */
public:
	int soap_type() const { return 2887; } /* = unique type id SOAP_TYPE___trt__GetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfiguration
#define SOAP_TYPE___trt__GetAudioEncoderConfiguration (2891)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfiguration
{
public:
	_trt__GetAudioEncoderConfiguration *trt__GetAudioEncoderConfiguration;	/* optional element of type trt:GetAudioEncoderConfiguration */
public:
	int soap_type() const { return 2891; } /* = unique type id SOAP_TYPE___trt__GetAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__GetVideoAnalyticsConfiguration (2895)
/* Operation wrapper: */
struct __trt__GetVideoAnalyticsConfiguration
{
public:
	_trt__GetVideoAnalyticsConfiguration *trt__GetVideoAnalyticsConfiguration;	/* optional element of type trt:GetVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 2895; } /* = unique type id SOAP_TYPE___trt__GetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfiguration
#define SOAP_TYPE___trt__GetMetadataConfiguration (2899)
/* Operation wrapper: */
struct __trt__GetMetadataConfiguration
{
public:
	_trt__GetMetadataConfiguration *trt__GetMetadataConfiguration;	/* optional element of type trt:GetMetadataConfiguration */
public:
	int soap_type() const { return 2899; } /* = unique type id SOAP_TYPE___trt__GetMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfiguration
#define SOAP_TYPE___trt__GetAudioOutputConfiguration (2903)
/* Operation wrapper: */
struct __trt__GetAudioOutputConfiguration
{
public:
	_trt__GetAudioOutputConfiguration *trt__GetAudioOutputConfiguration;	/* optional element of type trt:GetAudioOutputConfiguration */
public:
	int soap_type() const { return 2903; } /* = unique type id SOAP_TYPE___trt__GetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfiguration
#define SOAP_TYPE___trt__GetAudioDecoderConfiguration (2907)
/* Operation wrapper: */
struct __trt__GetAudioDecoderConfiguration
{
public:
	_trt__GetAudioDecoderConfiguration *trt__GetAudioDecoderConfiguration;	/* optional element of type trt:GetAudioDecoderConfiguration */
public:
	int soap_type() const { return 2907; } /* = unique type id SOAP_TYPE___trt__GetAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations (2911)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoEncoderConfigurations
{
public:
	_trt__GetCompatibleVideoEncoderConfigurations *trt__GetCompatibleVideoEncoderConfigurations;	/* optional element of type trt:GetCompatibleVideoEncoderConfigurations */
public:
	int soap_type() const { return 2911; } /* = unique type id SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations (2915)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoSourceConfigurations
{
public:
	_trt__GetCompatibleVideoSourceConfigurations *trt__GetCompatibleVideoSourceConfigurations;	/* optional element of type trt:GetCompatibleVideoSourceConfigurations */
public:
	int soap_type() const { return 2915; } /* = unique type id SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations (2919)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioEncoderConfigurations
{
public:
	_trt__GetCompatibleAudioEncoderConfigurations *trt__GetCompatibleAudioEncoderConfigurations;	/* optional element of type trt:GetCompatibleAudioEncoderConfigurations */
public:
	int soap_type() const { return 2919; } /* = unique type id SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations (2923)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioSourceConfigurations
{
public:
	_trt__GetCompatibleAudioSourceConfigurations *trt__GetCompatibleAudioSourceConfigurations;	/* optional element of type trt:GetCompatibleAudioSourceConfigurations */
public:
	int soap_type() const { return 2923; } /* = unique type id SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations (2927)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoAnalyticsConfigurations
{
public:
	_trt__GetCompatibleVideoAnalyticsConfigurations *trt__GetCompatibleVideoAnalyticsConfigurations;	/* optional element of type trt:GetCompatibleVideoAnalyticsConfigurations */
public:
	int soap_type() const { return 2927; } /* = unique type id SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE___trt__GetCompatibleMetadataConfigurations (2931)
/* Operation wrapper: */
struct __trt__GetCompatibleMetadataConfigurations
{
public:
	_trt__GetCompatibleMetadataConfigurations *trt__GetCompatibleMetadataConfigurations;	/* optional element of type trt:GetCompatibleMetadataConfigurations */
public:
	int soap_type() const { return 2931; } /* = unique type id SOAP_TYPE___trt__GetCompatibleMetadataConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations (2935)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioOutputConfigurations
{
public:
	_trt__GetCompatibleAudioOutputConfigurations *trt__GetCompatibleAudioOutputConfigurations;	/* optional element of type trt:GetCompatibleAudioOutputConfigurations */
public:
	int soap_type() const { return 2935; } /* = unique type id SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations (2939)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioDecoderConfigurations
{
public:
	_trt__GetCompatibleAudioDecoderConfigurations *trt__GetCompatibleAudioDecoderConfigurations;	/* optional element of type trt:GetCompatibleAudioDecoderConfigurations */
public:
	int soap_type() const { return 2939; } /* = unique type id SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoSourceConfiguration
#define SOAP_TYPE___trt__SetVideoSourceConfiguration (2943)
/* Operation wrapper: */
struct __trt__SetVideoSourceConfiguration
{
public:
	_trt__SetVideoSourceConfiguration *trt__SetVideoSourceConfiguration;	/* optional element of type trt:SetVideoSourceConfiguration */
public:
	int soap_type() const { return 2943; } /* = unique type id SOAP_TYPE___trt__SetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoEncoderConfiguration
#define SOAP_TYPE___trt__SetVideoEncoderConfiguration (2947)
/* Operation wrapper: */
struct __trt__SetVideoEncoderConfiguration
{
public:
	_trt__SetVideoEncoderConfiguration *trt__SetVideoEncoderConfiguration;	/* optional element of type trt:SetVideoEncoderConfiguration */
public:
	int soap_type() const { return 2947; } /* = unique type id SOAP_TYPE___trt__SetVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioSourceConfiguration
#define SOAP_TYPE___trt__SetAudioSourceConfiguration (2951)
/* Operation wrapper: */
struct __trt__SetAudioSourceConfiguration
{
public:
	_trt__SetAudioSourceConfiguration *trt__SetAudioSourceConfiguration;	/* optional element of type trt:SetAudioSourceConfiguration */
public:
	int soap_type() const { return 2951; } /* = unique type id SOAP_TYPE___trt__SetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioEncoderConfiguration
#define SOAP_TYPE___trt__SetAudioEncoderConfiguration (2955)
/* Operation wrapper: */
struct __trt__SetAudioEncoderConfiguration
{
public:
	_trt__SetAudioEncoderConfiguration *trt__SetAudioEncoderConfiguration;	/* optional element of type trt:SetAudioEncoderConfiguration */
public:
	int soap_type() const { return 2955; } /* = unique type id SOAP_TYPE___trt__SetAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__SetVideoAnalyticsConfiguration (2959)
/* Operation wrapper: */
struct __trt__SetVideoAnalyticsConfiguration
{
public:
	_trt__SetVideoAnalyticsConfiguration *trt__SetVideoAnalyticsConfiguration;	/* optional element of type trt:SetVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 2959; } /* = unique type id SOAP_TYPE___trt__SetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetMetadataConfiguration
#define SOAP_TYPE___trt__SetMetadataConfiguration (2963)
/* Operation wrapper: */
struct __trt__SetMetadataConfiguration
{
public:
	_trt__SetMetadataConfiguration *trt__SetMetadataConfiguration;	/* optional element of type trt:SetMetadataConfiguration */
public:
	int soap_type() const { return 2963; } /* = unique type id SOAP_TYPE___trt__SetMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioOutputConfiguration
#define SOAP_TYPE___trt__SetAudioOutputConfiguration (2967)
/* Operation wrapper: */
struct __trt__SetAudioOutputConfiguration
{
public:
	_trt__SetAudioOutputConfiguration *trt__SetAudioOutputConfiguration;	/* optional element of type trt:SetAudioOutputConfiguration */
public:
	int soap_type() const { return 2967; } /* = unique type id SOAP_TYPE___trt__SetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioDecoderConfiguration
#define SOAP_TYPE___trt__SetAudioDecoderConfiguration (2971)
/* Operation wrapper: */
struct __trt__SetAudioDecoderConfiguration
{
public:
	_trt__SetAudioDecoderConfiguration *trt__SetAudioDecoderConfiguration;	/* optional element of type trt:SetAudioDecoderConfiguration */
public:
	int soap_type() const { return 2971; } /* = unique type id SOAP_TYPE___trt__SetAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE___trt__GetVideoSourceConfigurationOptions (2975)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfigurationOptions
{
public:
	_trt__GetVideoSourceConfigurationOptions *trt__GetVideoSourceConfigurationOptions;	/* optional element of type trt:GetVideoSourceConfigurationOptions */
public:
	int soap_type() const { return 2975; } /* = unique type id SOAP_TYPE___trt__GetVideoSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions (2979)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfigurationOptions
{
public:
	_trt__GetVideoEncoderConfigurationOptions *trt__GetVideoEncoderConfigurationOptions;	/* optional element of type trt:GetVideoEncoderConfigurationOptions */
public:
	int soap_type() const { return 2979; } /* = unique type id SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE___trt__GetAudioSourceConfigurationOptions (2983)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfigurationOptions
{
public:
	_trt__GetAudioSourceConfigurationOptions *trt__GetAudioSourceConfigurationOptions;	/* optional element of type trt:GetAudioSourceConfigurationOptions */
public:
	int soap_type() const { return 2983; } /* = unique type id SOAP_TYPE___trt__GetAudioSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions (2987)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfigurationOptions
{
public:
	_trt__GetAudioEncoderConfigurationOptions *trt__GetAudioEncoderConfigurationOptions;	/* optional element of type trt:GetAudioEncoderConfigurationOptions */
public:
	int soap_type() const { return 2987; } /* = unique type id SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfigurationOptions
#define SOAP_TYPE___trt__GetMetadataConfigurationOptions (2991)
/* Operation wrapper: */
struct __trt__GetMetadataConfigurationOptions
{
public:
	_trt__GetMetadataConfigurationOptions *trt__GetMetadataConfigurationOptions;	/* optional element of type trt:GetMetadataConfigurationOptions */
public:
	int soap_type() const { return 2991; } /* = unique type id SOAP_TYPE___trt__GetMetadataConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE___trt__GetAudioOutputConfigurationOptions (2995)
/* Operation wrapper: */
struct __trt__GetAudioOutputConfigurationOptions
{
public:
	_trt__GetAudioOutputConfigurationOptions *trt__GetAudioOutputConfigurationOptions;	/* optional element of type trt:GetAudioOutputConfigurationOptions */
public:
	int soap_type() const { return 2995; } /* = unique type id SOAP_TYPE___trt__GetAudioOutputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions (2999)
/* Operation wrapper: */
struct __trt__GetAudioDecoderConfigurationOptions
{
public:
	_trt__GetAudioDecoderConfigurationOptions *trt__GetAudioDecoderConfigurationOptions;	/* optional element of type trt:GetAudioDecoderConfigurationOptions */
public:
	int soap_type() const { return 2999; } /* = unique type id SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances (3003)
/* Operation wrapper: */
struct __trt__GetGuaranteedNumberOfVideoEncoderInstances
{
public:
	_trt__GetGuaranteedNumberOfVideoEncoderInstances *trt__GetGuaranteedNumberOfVideoEncoderInstances;	/* optional element of type trt:GetGuaranteedNumberOfVideoEncoderInstances */
public:
	int soap_type() const { return 3003; } /* = unique type id SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances */
};
#endif

#ifndef SOAP_TYPE___trt__GetStreamUri
#define SOAP_TYPE___trt__GetStreamUri (3007)
/* Operation wrapper: */
struct __trt__GetStreamUri
{
public:
	_trt__GetStreamUri *trt__GetStreamUri;	/* optional element of type trt:GetStreamUri */
public:
	int soap_type() const { return 3007; } /* = unique type id SOAP_TYPE___trt__GetStreamUri */
};
#endif

#ifndef SOAP_TYPE___trt__StartMulticastStreaming
#define SOAP_TYPE___trt__StartMulticastStreaming (3011)
/* Operation wrapper: */
struct __trt__StartMulticastStreaming
{
public:
	_trt__StartMulticastStreaming *trt__StartMulticastStreaming;	/* optional element of type trt:StartMulticastStreaming */
public:
	int soap_type() const { return 3011; } /* = unique type id SOAP_TYPE___trt__StartMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE___trt__StopMulticastStreaming
#define SOAP_TYPE___trt__StopMulticastStreaming (3015)
/* Operation wrapper: */
struct __trt__StopMulticastStreaming
{
public:
	_trt__StopMulticastStreaming *trt__StopMulticastStreaming;	/* optional element of type trt:StopMulticastStreaming */
public:
	int soap_type() const { return 3015; } /* = unique type id SOAP_TYPE___trt__StopMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE___trt__SetSynchronizationPoint
#define SOAP_TYPE___trt__SetSynchronizationPoint (3019)
/* Operation wrapper: */
struct __trt__SetSynchronizationPoint
{
public:
	_trt__SetSynchronizationPoint *trt__SetSynchronizationPoint;	/* optional element of type trt:SetSynchronizationPoint */
public:
	int soap_type() const { return 3019; } /* = unique type id SOAP_TYPE___trt__SetSynchronizationPoint */
};
#endif

#ifndef SOAP_TYPE___trt__GetSnapshotUri
#define SOAP_TYPE___trt__GetSnapshotUri (3023)
/* Operation wrapper: */
struct __trt__GetSnapshotUri
{
public:
	_trt__GetSnapshotUri *trt__GetSnapshotUri;	/* optional element of type trt:GetSnapshotUri */
public:
	int soap_type() const { return 3023; } /* = unique type id SOAP_TYPE___trt__GetSnapshotUri */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceModes
#define SOAP_TYPE___trt__GetVideoSourceModes (3027)
/* Operation wrapper: */
struct __trt__GetVideoSourceModes
{
public:
	_trt__GetVideoSourceModes *trt__GetVideoSourceModes;	/* optional element of type trt:GetVideoSourceModes */
public:
	int soap_type() const { return 3027; } /* = unique type id SOAP_TYPE___trt__GetVideoSourceModes */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoSourceMode
#define SOAP_TYPE___trt__SetVideoSourceMode (3031)
/* Operation wrapper: */
struct __trt__SetVideoSourceMode
{
public:
	_trt__SetVideoSourceMode *trt__SetVideoSourceMode;	/* optional element of type trt:SetVideoSourceMode */
public:
	int soap_type() const { return 3031; } /* = unique type id SOAP_TYPE___trt__SetVideoSourceMode */
};
#endif

#ifndef SOAP_TYPE___trt__GetOSDs
#define SOAP_TYPE___trt__GetOSDs (3035)
/* Operation wrapper: */
struct __trt__GetOSDs
{
public:
	_trt__GetOSDs *trt__GetOSDs;	/* optional element of type trt:GetOSDs */
public:
	int soap_type() const { return 3035; } /* = unique type id SOAP_TYPE___trt__GetOSDs */
};
#endif

#ifndef SOAP_TYPE___trt__GetOSD
#define SOAP_TYPE___trt__GetOSD (3039)
/* Operation wrapper: */
struct __trt__GetOSD
{
public:
	_trt__GetOSD *trt__GetOSD;	/* optional element of type trt:GetOSD */
public:
	int soap_type() const { return 3039; } /* = unique type id SOAP_TYPE___trt__GetOSD */
};
#endif

#ifndef SOAP_TYPE___trt__GetOSDOptions
#define SOAP_TYPE___trt__GetOSDOptions (3043)
/* Operation wrapper: */
struct __trt__GetOSDOptions
{
public:
	_trt__GetOSDOptions *trt__GetOSDOptions;	/* optional element of type trt:GetOSDOptions */
public:
	int soap_type() const { return 3043; } /* = unique type id SOAP_TYPE___trt__GetOSDOptions */
};
#endif

#ifndef SOAP_TYPE___trt__SetOSD
#define SOAP_TYPE___trt__SetOSD (3047)
/* Operation wrapper: */
struct __trt__SetOSD
{
public:
	_trt__SetOSD *trt__SetOSD;	/* optional element of type trt:SetOSD */
public:
	int soap_type() const { return 3047; } /* = unique type id SOAP_TYPE___trt__SetOSD */
};
#endif

#ifndef SOAP_TYPE___trt__CreateOSD
#define SOAP_TYPE___trt__CreateOSD (3051)
/* Operation wrapper: */
struct __trt__CreateOSD
{
public:
	_trt__CreateOSD *trt__CreateOSD;	/* optional element of type trt:CreateOSD */
public:
	int soap_type() const { return 3051; } /* = unique type id SOAP_TYPE___trt__CreateOSD */
};
#endif

#ifndef SOAP_TYPE___trt__DeleteOSD
#define SOAP_TYPE___trt__DeleteOSD (3055)
/* Operation wrapper: */
struct __trt__DeleteOSD
{
public:
	_trt__DeleteOSD *trt__DeleteOSD;	/* optional element of type trt:DeleteOSD */
public:
	int soap_type() const { return 3055; } /* = unique type id SOAP_TYPE___trt__DeleteOSD */
};
#endif

#ifndef SOAP_TYPE___trv__GetServiceCapabilities
#define SOAP_TYPE___trv__GetServiceCapabilities (3059)
/* Operation wrapper: */
struct __trv__GetServiceCapabilities
{
public:
	_trv__GetServiceCapabilities *trv__GetServiceCapabilities;	/* optional element of type trv:GetServiceCapabilities */
public:
	int soap_type() const { return 3059; } /* = unique type id SOAP_TYPE___trv__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___trv__GetReceivers
#define SOAP_TYPE___trv__GetReceivers (3063)
/* Operation wrapper: */
struct __trv__GetReceivers
{
public:
	_trv__GetReceivers *trv__GetReceivers;	/* optional element of type trv:GetReceivers */
public:
	int soap_type() const { return 3063; } /* = unique type id SOAP_TYPE___trv__GetReceivers */
};
#endif

#ifndef SOAP_TYPE___trv__GetReceiver
#define SOAP_TYPE___trv__GetReceiver (3067)
/* Operation wrapper: */
struct __trv__GetReceiver
{
public:
	_trv__GetReceiver *trv__GetReceiver;	/* optional element of type trv:GetReceiver */
public:
	int soap_type() const { return 3067; } /* = unique type id SOAP_TYPE___trv__GetReceiver */
};
#endif

#ifndef SOAP_TYPE___trv__CreateReceiver
#define SOAP_TYPE___trv__CreateReceiver (3071)
/* Operation wrapper: */
struct __trv__CreateReceiver
{
public:
	_trv__CreateReceiver *trv__CreateReceiver;	/* optional element of type trv:CreateReceiver */
public:
	int soap_type() const { return 3071; } /* = unique type id SOAP_TYPE___trv__CreateReceiver */
};
#endif

#ifndef SOAP_TYPE___trv__DeleteReceiver
#define SOAP_TYPE___trv__DeleteReceiver (3075)
/* Operation wrapper: */
struct __trv__DeleteReceiver
{
public:
	_trv__DeleteReceiver *trv__DeleteReceiver;	/* optional element of type trv:DeleteReceiver */
public:
	int soap_type() const { return 3075; } /* = unique type id SOAP_TYPE___trv__DeleteReceiver */
};
#endif

#ifndef SOAP_TYPE___trv__ConfigureReceiver
#define SOAP_TYPE___trv__ConfigureReceiver (3079)
/* Operation wrapper: */
struct __trv__ConfigureReceiver
{
public:
	_trv__ConfigureReceiver *trv__ConfigureReceiver;	/* optional element of type trv:ConfigureReceiver */
public:
	int soap_type() const { return 3079; } /* = unique type id SOAP_TYPE___trv__ConfigureReceiver */
};
#endif

#ifndef SOAP_TYPE___trv__SetReceiverMode
#define SOAP_TYPE___trv__SetReceiverMode (3083)
/* Operation wrapper: */
struct __trv__SetReceiverMode
{
public:
	_trv__SetReceiverMode *trv__SetReceiverMode;	/* optional element of type trv:SetReceiverMode */
public:
	int soap_type() const { return 3083; } /* = unique type id SOAP_TYPE___trv__SetReceiverMode */
};
#endif

#ifndef SOAP_TYPE___trv__GetReceiverState
#define SOAP_TYPE___trv__GetReceiverState (3087)
/* Operation wrapper: */
struct __trv__GetReceiverState
{
public:
	_trv__GetReceiverState *trv__GetReceiverState;	/* optional element of type trv:GetReceiverState */
public:
	int soap_type() const { return 3087; } /* = unique type id SOAP_TYPE___trv__GetReceiverState */
};
#endif

#ifndef SOAP_TYPE___tse__GetServiceCapabilities
#define SOAP_TYPE___tse__GetServiceCapabilities (3091)
/* Operation wrapper: */
struct __tse__GetServiceCapabilities
{
public:
	_tse__GetServiceCapabilities *tse__GetServiceCapabilities;	/* optional element of type tse:GetServiceCapabilities */
public:
	int soap_type() const { return 3091; } /* = unique type id SOAP_TYPE___tse__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tse__GetRecordingSummary
#define SOAP_TYPE___tse__GetRecordingSummary (3095)
/* Operation wrapper: */
struct __tse__GetRecordingSummary
{
public:
	_tse__GetRecordingSummary *tse__GetRecordingSummary;	/* optional element of type tse:GetRecordingSummary */
public:
	int soap_type() const { return 3095; } /* = unique type id SOAP_TYPE___tse__GetRecordingSummary */
};
#endif

#ifndef SOAP_TYPE___tse__GetRecordingInformation
#define SOAP_TYPE___tse__GetRecordingInformation (3099)
/* Operation wrapper: */
struct __tse__GetRecordingInformation
{
public:
	_tse__GetRecordingInformation *tse__GetRecordingInformation;	/* optional element of type tse:GetRecordingInformation */
public:
	int soap_type() const { return 3099; } /* = unique type id SOAP_TYPE___tse__GetRecordingInformation */
};
#endif

#ifndef SOAP_TYPE___tse__GetMediaAttributes
#define SOAP_TYPE___tse__GetMediaAttributes (3103)
/* Operation wrapper: */
struct __tse__GetMediaAttributes
{
public:
	_tse__GetMediaAttributes *tse__GetMediaAttributes;	/* optional element of type tse:GetMediaAttributes */
public:
	int soap_type() const { return 3103; } /* = unique type id SOAP_TYPE___tse__GetMediaAttributes */
};
#endif

#ifndef SOAP_TYPE___tse__FindRecordings
#define SOAP_TYPE___tse__FindRecordings (3107)
/* Operation wrapper: */
struct __tse__FindRecordings
{
public:
	_tse__FindRecordings *tse__FindRecordings;	/* optional element of type tse:FindRecordings */
public:
	int soap_type() const { return 3107; } /* = unique type id SOAP_TYPE___tse__FindRecordings */
};
#endif

#ifndef SOAP_TYPE___tse__GetRecordingSearchResults
#define SOAP_TYPE___tse__GetRecordingSearchResults (3111)
/* Operation wrapper: */
struct __tse__GetRecordingSearchResults
{
public:
	_tse__GetRecordingSearchResults *tse__GetRecordingSearchResults;	/* optional element of type tse:GetRecordingSearchResults */
public:
	int soap_type() const { return 3111; } /* = unique type id SOAP_TYPE___tse__GetRecordingSearchResults */
};
#endif

#ifndef SOAP_TYPE___tse__FindEvents
#define SOAP_TYPE___tse__FindEvents (3115)
/* Operation wrapper: */
struct __tse__FindEvents
{
public:
	_tse__FindEvents *tse__FindEvents;	/* optional element of type tse:FindEvents */
public:
	int soap_type() const { return 3115; } /* = unique type id SOAP_TYPE___tse__FindEvents */
};
#endif

#ifndef SOAP_TYPE___tse__GetEventSearchResults
#define SOAP_TYPE___tse__GetEventSearchResults (3119)
/* Operation wrapper: */
struct __tse__GetEventSearchResults
{
public:
	_tse__GetEventSearchResults *tse__GetEventSearchResults;	/* optional element of type tse:GetEventSearchResults */
public:
	int soap_type() const { return 3119; } /* = unique type id SOAP_TYPE___tse__GetEventSearchResults */
};
#endif

#ifndef SOAP_TYPE___tse__FindPTZPosition
#define SOAP_TYPE___tse__FindPTZPosition (3123)
/* Operation wrapper: */
struct __tse__FindPTZPosition
{
public:
	_tse__FindPTZPosition *tse__FindPTZPosition;	/* optional element of type tse:FindPTZPosition */
public:
	int soap_type() const { return 3123; } /* = unique type id SOAP_TYPE___tse__FindPTZPosition */
};
#endif

#ifndef SOAP_TYPE___tse__GetPTZPositionSearchResults
#define SOAP_TYPE___tse__GetPTZPositionSearchResults (3127)
/* Operation wrapper: */
struct __tse__GetPTZPositionSearchResults
{
public:
	_tse__GetPTZPositionSearchResults *tse__GetPTZPositionSearchResults;	/* optional element of type tse:GetPTZPositionSearchResults */
public:
	int soap_type() const { return 3127; } /* = unique type id SOAP_TYPE___tse__GetPTZPositionSearchResults */
};
#endif

#ifndef SOAP_TYPE___tse__GetSearchState
#define SOAP_TYPE___tse__GetSearchState (3131)
/* Operation wrapper: */
struct __tse__GetSearchState
{
public:
	_tse__GetSearchState *tse__GetSearchState;	/* optional element of type tse:GetSearchState */
public:
	int soap_type() const { return 3131; } /* = unique type id SOAP_TYPE___tse__GetSearchState */
};
#endif

#ifndef SOAP_TYPE___tse__EndSearch
#define SOAP_TYPE___tse__EndSearch (3135)
/* Operation wrapper: */
struct __tse__EndSearch
{
public:
	_tse__EndSearch *tse__EndSearch;	/* optional element of type tse:EndSearch */
public:
	int soap_type() const { return 3135; } /* = unique type id SOAP_TYPE___tse__EndSearch */
};
#endif

#ifndef SOAP_TYPE___tse__FindMetadata
#define SOAP_TYPE___tse__FindMetadata (3139)
/* Operation wrapper: */
struct __tse__FindMetadata
{
public:
	_tse__FindMetadata *tse__FindMetadata;	/* optional element of type tse:FindMetadata */
public:
	int soap_type() const { return 3139; } /* = unique type id SOAP_TYPE___tse__FindMetadata */
};
#endif

#ifndef SOAP_TYPE___tse__GetMetadataSearchResults
#define SOAP_TYPE___tse__GetMetadataSearchResults (3143)
/* Operation wrapper: */
struct __tse__GetMetadataSearchResults
{
public:
	_tse__GetMetadataSearchResults *tse__GetMetadataSearchResults;	/* optional element of type tse:GetMetadataSearchResults */
public:
	int soap_type() const { return 3143; } /* = unique type id SOAP_TYPE___tse__GetMetadataSearchResults */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__wsa__EndpointReference
#define SOAP_TYPE__wsa__EndpointReference (25)
typedef struct wsa__EndpointReferenceType _wsa__EndpointReference;
#endif

#ifndef SOAP_TYPE__wsa__MessageID
#define SOAP_TYPE__wsa__MessageID (26)
typedef char *_wsa__MessageID;
#endif

#ifndef SOAP_TYPE__wsa__RelatesTo
#define SOAP_TYPE__wsa__RelatesTo (27)
typedef struct wsa__Relationship _wsa__RelatesTo;
#endif

#ifndef SOAP_TYPE__wsa__To
#define SOAP_TYPE__wsa__To (28)
typedef char *_wsa__To;
#endif

#ifndef SOAP_TYPE__wsa__Action
#define SOAP_TYPE__wsa__Action (29)
typedef char *_wsa__Action;
#endif

#ifndef SOAP_TYPE__wsa__From
#define SOAP_TYPE__wsa__From (30)
typedef struct wsa__EndpointReferenceType _wsa__From;
#endif

#ifndef SOAP_TYPE__wsa__ReplyTo
#define SOAP_TYPE__wsa__ReplyTo (31)
typedef struct wsa__EndpointReferenceType _wsa__ReplyTo;
#endif

#ifndef SOAP_TYPE__wsa__FaultTo
#define SOAP_TYPE__wsa__FaultTo (32)
typedef struct wsa__EndpointReferenceType _wsa__FaultTo;
#endif

#ifndef SOAP_TYPE__wsa__ReplyAfter
#define SOAP_TYPE__wsa__ReplyAfter (34)
typedef unsigned int _wsa__ReplyAfter;
#endif

#ifndef SOAP_TYPE_wsdd__QNameListType
#define SOAP_TYPE_wsdd__QNameListType (61)
typedef char *wsdd__QNameListType;
#endif

#ifndef SOAP_TYPE_wsdd__UriListType
#define SOAP_TYPE_wsdd__UriListType (62)
typedef char *wsdd__UriListType;
#endif

#ifndef SOAP_TYPE_wsdd__FaultCodeOpenType
#define SOAP_TYPE_wsdd__FaultCodeOpenType (63)
typedef char *wsdd__FaultCodeOpenType;
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum (97)
typedef char *wsa5__RelationshipTypeOpenEnum;
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType (98)
typedef char *wsa5__FaultCodesOpenEnumType;
#endif

#ifndef SOAP_TYPE__wsa5__EndpointReference
#define SOAP_TYPE__wsa5__EndpointReference (104)
typedef struct wsa5__EndpointReferenceType _wsa5__EndpointReference;
#endif

#ifndef SOAP_TYPE__wsa5__ReferenceParameters
#define SOAP_TYPE__wsa5__ReferenceParameters (105)
typedef struct wsa5__ReferenceParametersType _wsa5__ReferenceParameters;
#endif

#ifndef SOAP_TYPE__wsa5__Metadata
#define SOAP_TYPE__wsa5__Metadata (106)
typedef struct wsa5__MetadataType _wsa5__Metadata;
#endif

#ifndef SOAP_TYPE__wsa5__MessageID
#define SOAP_TYPE__wsa5__MessageID (107)
typedef char *_wsa5__MessageID;
#endif

#ifndef SOAP_TYPE__wsa5__RelatesTo
#define SOAP_TYPE__wsa5__RelatesTo (108)
typedef struct wsa5__RelatesToType _wsa5__RelatesTo;
#endif

#ifndef SOAP_TYPE__wsa5__ReplyTo
#define SOAP_TYPE__wsa5__ReplyTo (109)
typedef struct wsa5__EndpointReferenceType _wsa5__ReplyTo;
#endif

#ifndef SOAP_TYPE__wsa5__From
#define SOAP_TYPE__wsa5__From (110)
typedef struct wsa5__EndpointReferenceType _wsa5__From;
#endif

#ifndef SOAP_TYPE__wsa5__FaultTo
#define SOAP_TYPE__wsa5__FaultTo (111)
typedef struct wsa5__EndpointReferenceType _wsa5__FaultTo;
#endif

#ifndef SOAP_TYPE__wsa5__To
#define SOAP_TYPE__wsa5__To (112)
typedef char *_wsa5__To;
#endif

#ifndef SOAP_TYPE__wsa5__Action
#define SOAP_TYPE__wsa5__Action (113)
typedef char *_wsa5__Action;
#endif

#ifndef SOAP_TYPE__wsa5__RetryAfter
#define SOAP_TYPE__wsa5__RetryAfter (115)
typedef ULONG64 _wsa5__RetryAfter;
#endif

#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName
#define SOAP_TYPE__wsa5__ProblemHeaderQName (116)
typedef char *_wsa5__ProblemHeaderQName;
#endif

#ifndef SOAP_TYPE__wsa5__ProblemIRI
#define SOAP_TYPE__wsa5__ProblemIRI (117)
typedef char *_wsa5__ProblemIRI;
#endif

#ifndef SOAP_TYPE__wsa5__ProblemAction
#define SOAP_TYPE__wsa5__ProblemAction (118)
typedef struct wsa5__ProblemActionType _wsa5__ProblemAction;
#endif

#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (138)
typedef std::string xsd__NCName;
#endif

#ifndef SOAP_TYPE_xsd__anySimpleType
#define SOAP_TYPE_xsd__anySimpleType (139)
typedef std::string xsd__anySimpleType;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (140)
typedef std::string xsd__anyURI;
#endif

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (141)
typedef std::string xsd__integer;
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (142)
typedef std::string xsd__nonNegativeInteger;
#endif

#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (143)
typedef std::string xsd__token;
#endif

#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (144)
typedef std::string _xml__lang;
#endif

#ifndef SOAP_TYPE_tt__IntAttrList
#define SOAP_TYPE_tt__IntAttrList (1220)
typedef std::string tt__IntAttrList;
#endif

#ifndef SOAP_TYPE_tt__FloatAttrList
#define SOAP_TYPE_tt__FloatAttrList (1221)
typedef std::string tt__FloatAttrList;
#endif

#ifndef SOAP_TYPE_tt__StringAttrList
#define SOAP_TYPE_tt__StringAttrList (1222)
typedef std::string tt__StringAttrList;
#endif

#ifndef SOAP_TYPE_tt__StringList
#define SOAP_TYPE_tt__StringList (1223)
typedef std::string tt__StringList;
#endif

#ifndef SOAP_TYPE_tt__ReferenceTokenList
#define SOAP_TYPE_tt__ReferenceTokenList (1224)
typedef std::string tt__ReferenceTokenList;
#endif

#ifndef SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType (1225)
typedef std::string wsnt__AbsoluteOrRelativeTimeType;
#endif

#ifndef SOAP_TYPE_tmd__DelayTimes
#define SOAP_TYPE_tmd__DelayTimes (1226)
typedef std::string tmd__DelayTimes;
#endif

#ifndef SOAP_TYPE_trt__EncodingTypes
#define SOAP_TYPE_trt__EncodingTypes (1227)
typedef std::string trt__EncodingTypes;
#endif

#ifndef SOAP_TYPE_tds__EAPMethodTypes
#define SOAP_TYPE_tds__EAPMethodTypes (1228)
typedef std::string tds__EAPMethodTypes;
#endif

#ifndef SOAP_TYPE_ns1__StringList
#define SOAP_TYPE_ns1__StringList (1229)
typedef std::string ns1__StringList;
#endif

#ifndef SOAP_TYPE_tt__Name
#define SOAP_TYPE_tt__Name (1230)
typedef std::string tt__Name;
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority (1247)
typedef std::string tt__NetworkInterfaceConfigPriority;
#endif

#ifndef SOAP_TYPE_tt__IANA_IfTypes
#define SOAP_TYPE_tt__IANA_IfTypes (1249)
typedef int tt__IANA_IfTypes;
#endif

#ifndef SOAP_TYPE_tt__IPv4Address
#define SOAP_TYPE_tt__IPv4Address (1253)
typedef std::string tt__IPv4Address;
#endif

#ifndef SOAP_TYPE_tt__IPv6Address
#define SOAP_TYPE_tt__IPv6Address (1254)
typedef std::string tt__IPv6Address;
#endif

#ifndef SOAP_TYPE_tt__HwAddress
#define SOAP_TYPE_tt__HwAddress (1255)
typedef std::string tt__HwAddress;
#endif

#ifndef SOAP_TYPE_tt__DNSName
#define SOAP_TYPE_tt__DNSName (1257)
typedef std::string tt__DNSName;
#endif

#ifndef SOAP_TYPE_tt__Domain
#define SOAP_TYPE_tt__Domain (1258)
typedef std::string tt__Domain;
#endif

#ifndef SOAP_TYPE_tt__Dot11SSIDType
#define SOAP_TYPE_tt__Dot11SSIDType (1261)
typedef xsd__hexBinary tt__Dot11SSIDType;
#endif

#ifndef SOAP_TYPE_tt__Dot11PSK
#define SOAP_TYPE_tt__Dot11PSK (1265)
typedef xsd__hexBinary tt__Dot11PSK;
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase
#define SOAP_TYPE_tt__Dot11PSKPassphrase (1266)
typedef std::string tt__Dot11PSKPassphrase;
#endif

#ifndef SOAP_TYPE_tt__AuxiliaryData
#define SOAP_TYPE_tt__AuxiliaryData (1280)
typedef std::string tt__AuxiliaryData;
#endif

#ifndef SOAP_TYPE_tt__Description
#define SOAP_TYPE_tt__Description (1302)
typedef std::string tt__Description;
#endif

#ifndef SOAP_TYPE_tt__XPathExpression
#define SOAP_TYPE_tt__XPathExpression (1303)
typedef std::string tt__XPathExpression;
#endif

#ifndef SOAP_TYPE_tt__RecordingJobMode
#define SOAP_TYPE_tt__RecordingJobMode (1307)
typedef std::string tt__RecordingJobMode;
#endif

#ifndef SOAP_TYPE_tt__RecordingJobState
#define SOAP_TYPE_tt__RecordingJobState (1308)
typedef std::string tt__RecordingJobState;
#endif

#ifndef SOAP_TYPE_tt__AudioClassType
#define SOAP_TYPE_tt__AudioClassType (1310)
typedef std::string tt__AudioClassType;
#endif

#ifndef SOAP_TYPE_tt__ReferenceToken
#define SOAP_TYPE_tt__ReferenceToken (1312)
typedef std::string tt__ReferenceToken;
#endif

#ifndef SOAP_TYPE_wstop__FullTopicExpression
#define SOAP_TYPE_wstop__FullTopicExpression (1315)
typedef std::string wstop__FullTopicExpression;
#endif

#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression
#define SOAP_TYPE_wstop__ConcreteTopicExpression (1316)
typedef std::string wstop__ConcreteTopicExpression;
#endif

#ifndef SOAP_TYPE_wstop__SimpleTopicExpression
#define SOAP_TYPE_wstop__SimpleTopicExpression (1317)
typedef std::string wstop__SimpleTopicExpression;
#endif

#ifndef SOAP_TYPE_ns1__ReferenceToken
#define SOAP_TYPE_ns1__ReferenceToken (1322)
typedef std::string ns1__ReferenceToken;
#endif

#ifndef SOAP_TYPE_ns1__Name
#define SOAP_TYPE_ns1__Name (1323)
typedef std::string ns1__Name;
#endif

#ifndef SOAP_TYPE_ns1__Description
#define SOAP_TYPE_ns1__Description (1324)
typedef std::string ns1__Description;
#endif

#ifndef SOAP_TYPE_ns1__PositiveInteger
#define SOAP_TYPE_ns1__PositiveInteger (1325)
typedef unsigned int ns1__PositiveInteger;
#endif

#ifndef SOAP_TYPE_tt__ReceiverReference
#define SOAP_TYPE_tt__ReceiverReference (1327)
typedef std::string tt__ReceiverReference;
#endif

#ifndef SOAP_TYPE_tt__RecordingReference
#define SOAP_TYPE_tt__RecordingReference (1328)
typedef std::string tt__RecordingReference;
#endif

#ifndef SOAP_TYPE_tt__TrackReference
#define SOAP_TYPE_tt__TrackReference (1329)
typedef std::string tt__TrackReference;
#endif

#ifndef SOAP_TYPE_tt__JobToken
#define SOAP_TYPE_tt__JobToken (1330)
typedef std::string tt__JobToken;
#endif

#ifndef SOAP_TYPE_tt__RecordingJobReference
#define SOAP_TYPE_tt__RecordingJobReference (1331)
typedef std::string tt__RecordingJobReference;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
