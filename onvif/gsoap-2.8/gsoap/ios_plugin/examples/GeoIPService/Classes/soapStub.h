/* soapStub.h
   Generated by gSOAP 2.8.8 from GeoIPService.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://www.webservicex.net/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20808
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__GeoIP
#define SOAP_TYPE_ns1__GeoIP (8)
/* ns1:GeoIP */
class SOAP_CMAC ns1__GeoIP
{
public:
	int ReturnCode;	/* required element of type xsd:int */
	std::string *IP;	/* optional element of type xsd:string */
	std::string *ReturnCodeDetails;	/* optional element of type xsd:string */
	std::string *CountryName;	/* optional element of type xsd:string */
	std::string *CountryCode;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ns1__GeoIP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__GeoIP() { ns1__GeoIP::soap_default(NULL); }
	virtual ~ns1__GeoIP() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetGeoIP
#define SOAP_TYPE__ns1__GetGeoIP (9)
/* ns1:GetGeoIP */
class SOAP_CMAC _ns1__GetGeoIP
{
public:
	std::string *IPAddress;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE__ns1__GetGeoIP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetGeoIP() { _ns1__GetGeoIP::soap_default(NULL); }
	virtual ~_ns1__GetGeoIP() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetGeoIPResponse
#define SOAP_TYPE__ns1__GetGeoIPResponse (10)
/* ns1:GetGeoIPResponse */
class SOAP_CMAC _ns1__GetGeoIPResponse
{
public:
	ns1__GeoIP *GetGeoIPResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:GeoIP */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE__ns1__GetGeoIPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetGeoIPResponse() { _ns1__GetGeoIPResponse::soap_default(NULL); }
	virtual ~_ns1__GetGeoIPResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetGeoIPContext
#define SOAP_TYPE__ns1__GetGeoIPContext (11)
/* ns1:GetGeoIPContext */
class SOAP_CMAC _ns1__GetGeoIPContext
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE__ns1__GetGeoIPContext */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetGeoIPContext() { _ns1__GetGeoIPContext::soap_default(NULL); }
	virtual ~_ns1__GetGeoIPContext() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetGeoIPContextResponse
#define SOAP_TYPE__ns1__GetGeoIPContextResponse (12)
/* ns1:GetGeoIPContextResponse */
class SOAP_CMAC _ns1__GetGeoIPContextResponse
{
public:
	ns1__GeoIP *GetGeoIPContextResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:GeoIP */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE__ns1__GetGeoIPContextResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetGeoIPContextResponse() { _ns1__GetGeoIPContextResponse::soap_default(NULL); }
	virtual ~_ns1__GetGeoIPContextResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns2__GetGeoIP
#define SOAP_TYPE___ns2__GetGeoIP (20)
/* Operation wrapper: */
struct __ns2__GetGeoIP
{
public:
	_ns1__GetGeoIP *ns1__GetGeoIP;	/* optional element of type ns1:GetGeoIP */
};
#endif

#ifndef SOAP_TYPE___ns2__GetGeoIPContext
#define SOAP_TYPE___ns2__GetGeoIPContext (24)
/* Operation wrapper: */
struct __ns2__GetGeoIPContext
{
public:
	_ns1__GetGeoIPContext *ns1__GetGeoIPContext;	/* optional element of type ns1:GetGeoIPContext */
};
#endif

#ifndef SOAP_TYPE___ns3__GetGeoIP
#define SOAP_TYPE___ns3__GetGeoIP (26)
/* Operation wrapper: */
struct __ns3__GetGeoIP
{
public:
	_ns1__GetGeoIP *ns1__GetGeoIP;	/* optional element of type ns1:GetGeoIP */
};
#endif

#ifndef SOAP_TYPE___ns3__GetGeoIPContext
#define SOAP_TYPE___ns3__GetGeoIPContext (28)
/* Operation wrapper: */
struct __ns3__GetGeoIPContext
{
public:
	_ns1__GetGeoIPContext *ns1__GetGeoIPContext;	/* optional element of type ns1:GetGeoIPContext */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (29)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (30)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (32)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (35)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (36)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
