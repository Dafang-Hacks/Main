/* calculator.h
   Generated by wsdl2h 2.8.9 from calculator.wsdl and typemap.dat
   2012-08-18 17:13:16 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2012 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on calculator.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

tempuri = "http://tempuri.org/"
mssadhi = "http://Microsoft.Samples.DualHttp/Imports"
mssadh = "http://Microsoft.Samples.DualHttp"

*/

#define SOAP_NAMESPACE_OF_mssadhi	"http://Microsoft.Samples.DualHttp/Imports"
//gsoap mssadhi schema namespace:	http://Microsoft.Samples.DualHttp/Imports
//gsoap mssadhi schema form:	unqualified

#define SOAP_NAMESPACE_OF_mssadh	"http://Microsoft.Samples.DualHttp"
//gsoap mssadh schema namespace:	http://Microsoft.Samples.DualHttp
//gsoap mssadh schema elementForm:	qualified
//gsoap mssadh schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class _mssadh__Clear.
class _mssadh__Clear;

//  Forward declaration of class _mssadh__AddTo.
class _mssadh__AddTo;

//  Forward declaration of class _mssadh__SubtractFrom.
class _mssadh__SubtractFrom;

//  Forward declaration of class _mssadh__MultiplyBy.
class _mssadh__MultiplyBy;

//  Forward declaration of class _mssadh__DivideBy.
class _mssadh__DivideBy;

//  Forward declaration of class _mssadh__Result.
class _mssadh__Result;

//  Forward declaration of class _mssadh__Equation.
class _mssadh__Equation;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://Microsoft.Samples.DualHttp/Imports                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://Microsoft.Samples.DualHttp                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://Microsoft.Samples.DualHttp/Imports                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://Microsoft.Samples.DualHttp                                        *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "http://Microsoft.Samples.DualHttp":Clear

/// "http://Microsoft.Samples.DualHttp":Clear is a complexType.
class _mssadh__Clear
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://Microsoft.Samples.DualHttp":AddTo

/// "http://Microsoft.Samples.DualHttp":AddTo is a complexType.
class _mssadh__AddTo
{ public:
/// Element n of type xs:double.
    double*                              n                              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://Microsoft.Samples.DualHttp":SubtractFrom

/// "http://Microsoft.Samples.DualHttp":SubtractFrom is a complexType.
class _mssadh__SubtractFrom
{ public:
/// Element n of type xs:double.
    double*                              n                              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://Microsoft.Samples.DualHttp":MultiplyBy

/// "http://Microsoft.Samples.DualHttp":MultiplyBy is a complexType.
class _mssadh__MultiplyBy
{ public:
/// Element n of type xs:double.
    double*                              n                              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://Microsoft.Samples.DualHttp":DivideBy

/// "http://Microsoft.Samples.DualHttp":DivideBy is a complexType.
class _mssadh__DivideBy
{ public:
/// Element n of type xs:double.
    double*                              n                              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://Microsoft.Samples.DualHttp":Result

/// "http://Microsoft.Samples.DualHttp":Result is a complexType.
class _mssadh__Result
{ public:
/// Element result of type xs:double.
    double*                              result                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://Microsoft.Samples.DualHttp":Equation

/// "http://Microsoft.Samples.DualHttp":Equation is a complexType.
class _mssadh__Equation
{ public:
/// Element eqn of type xs:string.
    std::string*                         eqn                            0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://Microsoft.Samples.DualHttp/Imports                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://Microsoft.Samples.DualHttp/Imports                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://Microsoft.Samples.DualHttp                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://Microsoft.Samples.DualHttp                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap tempuri service name:	WSDualHttpBinding_USCOREICalculatorDuplex 
//gsoap tempuri service type:	ICalculatorDuplex 
//gsoap tempuri service port:	http://192.168.2.2:8000/ServiceModelSamples/service 
//gsoap tempuri service namespace:	http://tempuri.org/ 
//gsoap tempuri service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage CalculatorService Definitions

@section CalculatorService_bindings Service Bindings

  - @ref WSDualHttpBinding_USCOREICalculatorDuplex

@section CalculatorService_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page WSDualHttpBinding_USCOREICalculatorDuplex Binding "WSDualHttpBinding_USCOREICalculatorDuplex"

@section WSDualHttpBinding_USCOREICalculatorDuplex_operations Operations of Binding  "WSDualHttpBinding_USCOREICalculatorDuplex"

  - @ref __tempuri__Clear

  - @ref __tempuri__AddTo

  - @ref __tempuri__SubtractFrom

  - @ref __tempuri__MultiplyBy

  - @ref __tempuri__DivideBy

  - @ref __tempuri__Result

  - @ref __tempuri__Equation

@section WSDualHttpBinding_USCOREICalculatorDuplex_ports Endpoints of Binding  "WSDualHttpBinding_USCOREICalculatorDuplex"

  - http://192.168.2.2:8000/ServiceModelSamples/service

@section WSDualHttpBinding_USCOREICalculatorDuplex_policy Policy of Binding  "WSDualHttpBinding_USCOREICalculatorDuplex"

See Section @ref WSDualHttpBinding_USCOREICalculatorDuplex_policy_enablers

  - WS-Policy applicable to the service endpoint ports:
	- Exactly one of the following:
		- All of the following:
			- WS-Addressing is used
			- WS-ReliableMessaging is used
			  - Inactivity Timeout = 600000 (ms)
			  - Acknowledgement Interval = 200 (ms)
			- Other policy requirements:
	@verbatim
<cdp:CompositeDuplex xmlns:cdp="http://schemas.microsoft.com/net/2006/06/duplex"/>
	@endverbatim
			- Other policy requirements:
	@verbatim
<ow:OneWay xmlns:ow="http://schemas.microsoft.com/ws/2005/05/routing/policy"/>
	@endverbatim

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   WSDualHttpBinding_USCOREICalculatorDuplex                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__Clear                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__tempuri__Clear" of service binding "WSDualHttpBinding_USCOREICalculatorDuplex"

/**

Operation details:

  - One-way service input message request

  - SOAP document/literal style messaging

  - SOAP action: "http://Microsoft.Samples.DualHttp/ICalculatorDuplex/Clear"

  - Addressing method action: "http://tempuri.org//ICalculatorDuplex/Clear"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_send___tempuri__Clear(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mssadh__Clear*                     mssadh__Clear,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__Clear(
    struct soap *soap,
    // request parameters:
    _mssadh__Clear*                     mssadh__Clear,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapWSDualHttpBinding_USCOREICalculatorDuplexProxy.h):
@code
  class WSDualHttpBinding_USCOREICalculatorDuplexProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSDualHttpBinding_USCOREICalculatorDuplexService.h):
@code
  class WSDualHttpBinding_USCOREICalculatorDuplexService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap tempuri service method-style:	Clear document
//gsoap tempuri service method-encoding:	Clear literal
//gsoap tempuri service method-action:	Clear http://Microsoft.Samples.DualHttp/ICalculatorDuplex/Clear
int __tempuri__Clear(
    _mssadh__Clear*                     mssadh__Clear,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__AddTo                                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__tempuri__AddTo" of service binding "WSDualHttpBinding_USCOREICalculatorDuplex"

/**

Operation details:

  - One-way service input message request

  - SOAP document/literal style messaging

  - SOAP action: "http://Microsoft.Samples.DualHttp/ICalculatorDuplex/AddTo"

  - Addressing method action: "http://tempuri.org//ICalculatorDuplex/AddTo"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_send___tempuri__AddTo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mssadh__AddTo*                     mssadh__AddTo,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__AddTo(
    struct soap *soap,
    // request parameters:
    _mssadh__AddTo*                     mssadh__AddTo,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapWSDualHttpBinding_USCOREICalculatorDuplexProxy.h):
@code
  class WSDualHttpBinding_USCOREICalculatorDuplexProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSDualHttpBinding_USCOREICalculatorDuplexService.h):
@code
  class WSDualHttpBinding_USCOREICalculatorDuplexService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap tempuri service method-style:	AddTo document
//gsoap tempuri service method-encoding:	AddTo literal
//gsoap tempuri service method-action:	AddTo http://Microsoft.Samples.DualHttp/ICalculatorDuplex/AddTo
int __tempuri__AddTo(
    _mssadh__AddTo*                     mssadh__AddTo,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__SubtractFrom                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__tempuri__SubtractFrom" of service binding "WSDualHttpBinding_USCOREICalculatorDuplex"

/**

Operation details:

  - One-way service input message request

  - SOAP document/literal style messaging

  - SOAP action: "http://Microsoft.Samples.DualHttp/ICalculatorDuplex/SubtractFrom"

  - Addressing method action: "http://tempuri.org//ICalculatorDuplex/SubtractFrom"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_send___tempuri__SubtractFrom(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mssadh__SubtractFrom*              mssadh__SubtractFrom,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__SubtractFrom(
    struct soap *soap,
    // request parameters:
    _mssadh__SubtractFrom*              mssadh__SubtractFrom,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapWSDualHttpBinding_USCOREICalculatorDuplexProxy.h):
@code
  class WSDualHttpBinding_USCOREICalculatorDuplexProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSDualHttpBinding_USCOREICalculatorDuplexService.h):
@code
  class WSDualHttpBinding_USCOREICalculatorDuplexService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap tempuri service method-style:	SubtractFrom document
//gsoap tempuri service method-encoding:	SubtractFrom literal
//gsoap tempuri service method-action:	SubtractFrom http://Microsoft.Samples.DualHttp/ICalculatorDuplex/SubtractFrom
int __tempuri__SubtractFrom(
    _mssadh__SubtractFrom*              mssadh__SubtractFrom,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__MultiplyBy                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__tempuri__MultiplyBy" of service binding "WSDualHttpBinding_USCOREICalculatorDuplex"

/**

Operation details:

  - One-way service input message request

  - SOAP document/literal style messaging

  - SOAP action: "http://Microsoft.Samples.DualHttp/ICalculatorDuplex/MultiplyBy"

  - Addressing method action: "http://tempuri.org//ICalculatorDuplex/MultiplyBy"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_send___tempuri__MultiplyBy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mssadh__MultiplyBy*                mssadh__MultiplyBy,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__MultiplyBy(
    struct soap *soap,
    // request parameters:
    _mssadh__MultiplyBy*                mssadh__MultiplyBy,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapWSDualHttpBinding_USCOREICalculatorDuplexProxy.h):
@code
  class WSDualHttpBinding_USCOREICalculatorDuplexProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSDualHttpBinding_USCOREICalculatorDuplexService.h):
@code
  class WSDualHttpBinding_USCOREICalculatorDuplexService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap tempuri service method-style:	MultiplyBy document
//gsoap tempuri service method-encoding:	MultiplyBy literal
//gsoap tempuri service method-action:	MultiplyBy http://Microsoft.Samples.DualHttp/ICalculatorDuplex/MultiplyBy
int __tempuri__MultiplyBy(
    _mssadh__MultiplyBy*                mssadh__MultiplyBy,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__DivideBy                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__tempuri__DivideBy" of service binding "WSDualHttpBinding_USCOREICalculatorDuplex"

/**

Operation details:

  - One-way service input message request

  - SOAP document/literal style messaging

  - SOAP action: "http://Microsoft.Samples.DualHttp/ICalculatorDuplex/DivideBy"

  - Addressing method action: "http://tempuri.org//ICalculatorDuplex/DivideBy"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_send___tempuri__DivideBy(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _mssadh__DivideBy*                  mssadh__DivideBy,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__DivideBy(
    struct soap *soap,
    // request parameters:
    _mssadh__DivideBy*                  mssadh__DivideBy,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapWSDualHttpBinding_USCOREICalculatorDuplexProxy.h):
@code
  class WSDualHttpBinding_USCOREICalculatorDuplexProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSDualHttpBinding_USCOREICalculatorDuplexService.h):
@code
  class WSDualHttpBinding_USCOREICalculatorDuplexService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap tempuri service method-style:	DivideBy document
//gsoap tempuri service method-encoding:	DivideBy literal
//gsoap tempuri service method-action:	DivideBy http://Microsoft.Samples.DualHttp/ICalculatorDuplex/DivideBy
int __tempuri__DivideBy(
    _mssadh__DivideBy*                  mssadh__DivideBy,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__Result                                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__tempuri__Result" of service binding "WSDualHttpBinding_USCOREICalculatorDuplex"

/**

Operation details:

  - One-way service output response message

  - SOAP document/literal style messaging

  - SOAP action: "http://Microsoft.Samples.DualHttp/ICalculatorDuplex/Result"

  - Addressing method action: "http://tempuri.org//ICalculatorDuplex/Result"

  - Addressing method output action: "http://tempuri.org//ICalculatorDuplex/Result"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_send___tempuri__Result(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    _mssadh__Result*                    mssadh__Result,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__Result(
    struct soap *soap,
    // parameters:
    _mssadh__Result*                    mssadh__Result,
  );
@endcode

C++ proxy class (defined in soapWSDualHttpBinding_USCOREICalculatorDuplexProxy.h):
@code
  class WSDualHttpBinding_USCOREICalculatorDuplexProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSDualHttpBinding_USCOREICalculatorDuplexService.h):
@code
  class WSDualHttpBinding_USCOREICalculatorDuplexService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap tempuri service method-style:	Result document
//gsoap tempuri service method-encoding:	Result literal
//gsoap tempuri service method-action:	Result http://Microsoft.Samples.DualHttp/ICalculatorDuplex/Result
int __tempuri__Result(
    _mssadh__Result*                    mssadh__Result,	///< Request parameter
    void	///< One-way message
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __tempuri__Equation                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__tempuri__Equation" of service binding "WSDualHttpBinding_USCOREICalculatorDuplex"

/**

Operation details:

  - One-way service output response message

  - SOAP document/literal style messaging

  - SOAP action: "http://Microsoft.Samples.DualHttp/ICalculatorDuplex/Equation"

  - Addressing method action: "http://tempuri.org//ICalculatorDuplex/Equation"

  - Addressing method output action: "http://tempuri.org//ICalculatorDuplex/Equation"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_send___tempuri__Equation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // parameters:
    _mssadh__Equation*                  mssadh__Equation,
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __tempuri__Equation(
    struct soap *soap,
    // parameters:
    _mssadh__Equation*                  mssadh__Equation,
  );
@endcode

C++ proxy class (defined in soapWSDualHttpBinding_USCOREICalculatorDuplexProxy.h):
@code
  class WSDualHttpBinding_USCOREICalculatorDuplexProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapWSDualHttpBinding_USCOREICalculatorDuplexService.h):
@code
  class WSDualHttpBinding_USCOREICalculatorDuplexService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap tempuri service method-style:	Equation document
//gsoap tempuri service method-encoding:	Equation literal
//gsoap tempuri service method-action:	Equation http://Microsoft.Samples.DualHttp/ICalculatorDuplex/Equation
int __tempuri__Equation(
    _mssadh__Equation*                  mssadh__Equation,	///< Request parameter
    void	///< One-way message
);

/**

@page WSDualHttpBinding_USCOREICalculatorDuplex Binding "WSDualHttpBinding_USCOREICalculatorDuplex"

@section WSDualHttpBinding_USCOREICalculatorDuplex_policy_enablers Policy Enablers of Binding  "WSDualHttpBinding_USCOREICalculatorDuplex"

Based on policies, this service imports wsa5.h wsrm.h

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/

#import "wsa5.h"
#import "wsrm5.h"

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section mssadhi Top-level root elements of schema "http://Microsoft.Samples.DualHttp/Imports"

@section mssadh Top-level root elements of schema "http://Microsoft.Samples.DualHttp"

  - <mssadh:Clear> @ref _mssadh__Clear
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mssadh__Clear(struct soap*, _mssadh__Clear*);
    // Writer (returns SOAP_OK on success):
    soap_write__mssadh__Clear(struct soap*, _mssadh__Clear*);
    @endcode

  - <mssadh:AddTo> @ref _mssadh__AddTo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mssadh__AddTo(struct soap*, _mssadh__AddTo*);
    // Writer (returns SOAP_OK on success):
    soap_write__mssadh__AddTo(struct soap*, _mssadh__AddTo*);
    @endcode

  - <mssadh:SubtractFrom> @ref _mssadh__SubtractFrom
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mssadh__SubtractFrom(struct soap*, _mssadh__SubtractFrom*);
    // Writer (returns SOAP_OK on success):
    soap_write__mssadh__SubtractFrom(struct soap*, _mssadh__SubtractFrom*);
    @endcode

  - <mssadh:MultiplyBy> @ref _mssadh__MultiplyBy
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mssadh__MultiplyBy(struct soap*, _mssadh__MultiplyBy*);
    // Writer (returns SOAP_OK on success):
    soap_write__mssadh__MultiplyBy(struct soap*, _mssadh__MultiplyBy*);
    @endcode

  - <mssadh:DivideBy> @ref _mssadh__DivideBy
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mssadh__DivideBy(struct soap*, _mssadh__DivideBy*);
    // Writer (returns SOAP_OK on success):
    soap_write__mssadh__DivideBy(struct soap*, _mssadh__DivideBy*);
    @endcode

  - <mssadh:Result> @ref _mssadh__Result
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mssadh__Result(struct soap*, _mssadh__Result*);
    // Writer (returns SOAP_OK on success):
    soap_write__mssadh__Result(struct soap*, _mssadh__Result*);
    @endcode

  - <mssadh:Equation> @ref _mssadh__Equation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mssadh__Equation(struct soap*, _mssadh__Equation*);
    // Writer (returns SOAP_OK on success):
    soap_write__mssadh__Equation(struct soap*, _mssadh__Equation*);
    @endcode

*/

/* End of calculator.h */
