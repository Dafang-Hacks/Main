/* soapWSDualHttpBinding_USCOREICalculatorDuplexService.cpp
   Generated by gSOAP 2.8.16 from calculator.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapWSDualHttpBinding_USCOREICalculatorDuplexService.h"

WSDualHttpBinding_USCOREICalculatorDuplexService::WSDualHttpBinding_USCOREICalculatorDuplexService()
{	this->soap = soap_new();
	this->own = true;
	WSDualHttpBinding_USCOREICalculatorDuplexService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

WSDualHttpBinding_USCOREICalculatorDuplexService::WSDualHttpBinding_USCOREICalculatorDuplexService(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	WSDualHttpBinding_USCOREICalculatorDuplexService_init(_soap->imode, _soap->omode);
}

WSDualHttpBinding_USCOREICalculatorDuplexService::WSDualHttpBinding_USCOREICalculatorDuplexService(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	WSDualHttpBinding_USCOREICalculatorDuplexService_init(iomode, iomode);
}

WSDualHttpBinding_USCOREICalculatorDuplexService::WSDualHttpBinding_USCOREICalculatorDuplexService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	WSDualHttpBinding_USCOREICalculatorDuplexService_init(imode, omode);
}

WSDualHttpBinding_USCOREICalculatorDuplexService::~WSDualHttpBinding_USCOREICalculatorDuplexService()
{	if (this->own)
		soap_free(this->soap);
}

void WSDualHttpBinding_USCOREICalculatorDuplexService::WSDualHttpBinding_USCOREICalculatorDuplexService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"tempuri", "http://tempuri.org/", NULL, NULL},
	{"mssadh", "http://Microsoft.Samples.DualHttp", NULL, NULL},
	{"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
	{"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
	{"netrm", "http://schemas.microsoft.com/ws/2006/05/rm", NULL, NULL},
	{"wsrm", "http://schemas.xmlsoap.org/ws/2005/02/rm", "http://docs.oasis-open.org/ws-rx/wsrm/200702", NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
};

void WSDualHttpBinding_USCOREICalculatorDuplexService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void WSDualHttpBinding_USCOREICalculatorDuplexService::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	WSDualHttpBinding_USCOREICalculatorDuplexService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
WSDualHttpBinding_USCOREICalculatorDuplexService *WSDualHttpBinding_USCOREICalculatorDuplexService::copy()
{	WSDualHttpBinding_USCOREICalculatorDuplexService *dup = SOAP_NEW_COPY(WSDualHttpBinding_USCOREICalculatorDuplexService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int WSDualHttpBinding_USCOREICalculatorDuplexService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int WSDualHttpBinding_USCOREICalculatorDuplexService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int WSDualHttpBinding_USCOREICalculatorDuplexService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int WSDualHttpBinding_USCOREICalculatorDuplexService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int WSDualHttpBinding_USCOREICalculatorDuplexService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int WSDualHttpBinding_USCOREICalculatorDuplexService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void WSDualHttpBinding_USCOREICalculatorDuplexService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void WSDualHttpBinding_USCOREICalculatorDuplexService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *WSDualHttpBinding_USCOREICalculatorDuplexService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void WSDualHttpBinding_USCOREICalculatorDuplexService::soap_noheader()
{	this->soap->header = NULL;
}

void WSDualHttpBinding_USCOREICalculatorDuplexService::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct wsrm__SequenceType *wsrm__Sequence, int __sizeAckRequested, struct wsrm__AckRequestedType *wsrm__AckRequested, int __sizeSequenceAcknowledgement, struct _wsrm__SequenceAcknowledgement *wsrm__SequenceAcknowledgement, struct wsrm__SequenceFaultType *wsrm__SequenceFault)
{	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->wsrm__Sequence = wsrm__Sequence;
	this->soap->header->__sizeAckRequested = __sizeAckRequested;
	this->soap->header->wsrm__AckRequested = wsrm__AckRequested;
	this->soap->header->__sizeSequenceAcknowledgement = __sizeSequenceAcknowledgement;
	this->soap->header->wsrm__SequenceAcknowledgement = wsrm__SequenceAcknowledgement;
	this->soap->header->wsrm__SequenceFault = wsrm__SequenceFault;
}

const SOAP_ENV__Header *WSDualHttpBinding_USCOREICalculatorDuplexService::soap_header()
{	return this->soap->header;
}

int WSDualHttpBinding_USCOREICalculatorDuplexService::run(int port)
{	if (soap_valid_socket(this->soap->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->soap->error;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	else
		return this->soap->error;
	return SOAP_OK;
}

SOAP_SOCKET WSDualHttpBinding_USCOREICalculatorDuplexService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET WSDualHttpBinding_USCOREICalculatorDuplexService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int WSDualHttpBinding_USCOREICalculatorDuplexService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif

int WSDualHttpBinding_USCOREICalculatorDuplexService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___tempuri__Clear(WSDualHttpBinding_USCOREICalculatorDuplexService*);
static int serve___tempuri__AddTo(WSDualHttpBinding_USCOREICalculatorDuplexService*);
static int serve___tempuri__SubtractFrom(WSDualHttpBinding_USCOREICalculatorDuplexService*);
static int serve___tempuri__MultiplyBy(WSDualHttpBinding_USCOREICalculatorDuplexService*);
static int serve___tempuri__DivideBy(WSDualHttpBinding_USCOREICalculatorDuplexService*);
static int serve___tempuri__Result(WSDualHttpBinding_USCOREICalculatorDuplexService*);
static int serve___tempuri__Equation(WSDualHttpBinding_USCOREICalculatorDuplexService*);

int WSDualHttpBinding_USCOREICalculatorDuplexService::dispatch()
{	WSDualHttpBinding_USCOREICalculatorDuplexService_init(this->soap->imode, this->soap->omode);
	soap_peek_element(this->soap);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "mssadh:Clear")) || (this->soap->action && !strcmp(this->soap->action, "http://Microsoft.Samples.DualHttp/ICalculatorDuplex/Clear")))
		return serve___tempuri__Clear(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "mssadh:AddTo")) || (this->soap->action && !strcmp(this->soap->action, "http://Microsoft.Samples.DualHttp/ICalculatorDuplex/AddTo")))
		return serve___tempuri__AddTo(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "mssadh:SubtractFrom")) || (this->soap->action && !strcmp(this->soap->action, "http://Microsoft.Samples.DualHttp/ICalculatorDuplex/SubtractFrom")))
		return serve___tempuri__SubtractFrom(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "mssadh:MultiplyBy")) || (this->soap->action && !strcmp(this->soap->action, "http://Microsoft.Samples.DualHttp/ICalculatorDuplex/MultiplyBy")))
		return serve___tempuri__MultiplyBy(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "mssadh:DivideBy")) || (this->soap->action && !strcmp(this->soap->action, "http://Microsoft.Samples.DualHttp/ICalculatorDuplex/DivideBy")))
		return serve___tempuri__DivideBy(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "mssadh:Result")) || (this->soap->action && !strcmp(this->soap->action, "http://Microsoft.Samples.DualHttp/ICalculatorDuplex/Result")))
		return serve___tempuri__Result(this);
	if ((!this->soap->action && !soap_match_tag(this->soap, this->soap->tag, "mssadh:Equation")) || (this->soap->action && !strcmp(this->soap->action, "http://Microsoft.Samples.DualHttp/ICalculatorDuplex/Equation")))
		return serve___tempuri__Equation(this);
	return this->soap->error = SOAP_NO_METHOD;
}

static int serve___tempuri__Clear(WSDualHttpBinding_USCOREICalculatorDuplexService *service)
{	struct soap *soap = service->soap;
	struct __tempuri__Clear soap_tmp___tempuri__Clear;
	soap_default___tempuri__Clear(soap, &soap_tmp___tempuri__Clear);
	if (!soap_get___tempuri__Clear(soap, &soap_tmp___tempuri__Clear, "-tempuri:Clear", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Clear(soap_tmp___tempuri__Clear.mssadh__Clear);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__AddTo(WSDualHttpBinding_USCOREICalculatorDuplexService *service)
{	struct soap *soap = service->soap;
	struct __tempuri__AddTo soap_tmp___tempuri__AddTo;
	soap_default___tempuri__AddTo(soap, &soap_tmp___tempuri__AddTo);
	if (!soap_get___tempuri__AddTo(soap, &soap_tmp___tempuri__AddTo, "-tempuri:AddTo", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->AddTo(soap_tmp___tempuri__AddTo.mssadh__AddTo);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__SubtractFrom(WSDualHttpBinding_USCOREICalculatorDuplexService *service)
{	struct soap *soap = service->soap;
	struct __tempuri__SubtractFrom soap_tmp___tempuri__SubtractFrom;
	soap_default___tempuri__SubtractFrom(soap, &soap_tmp___tempuri__SubtractFrom);
	if (!soap_get___tempuri__SubtractFrom(soap, &soap_tmp___tempuri__SubtractFrom, "-tempuri:SubtractFrom", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SubtractFrom(soap_tmp___tempuri__SubtractFrom.mssadh__SubtractFrom);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__MultiplyBy(WSDualHttpBinding_USCOREICalculatorDuplexService *service)
{	struct soap *soap = service->soap;
	struct __tempuri__MultiplyBy soap_tmp___tempuri__MultiplyBy;
	soap_default___tempuri__MultiplyBy(soap, &soap_tmp___tempuri__MultiplyBy);
	if (!soap_get___tempuri__MultiplyBy(soap, &soap_tmp___tempuri__MultiplyBy, "-tempuri:MultiplyBy", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->MultiplyBy(soap_tmp___tempuri__MultiplyBy.mssadh__MultiplyBy);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__DivideBy(WSDualHttpBinding_USCOREICalculatorDuplexService *service)
{	struct soap *soap = service->soap;
	struct __tempuri__DivideBy soap_tmp___tempuri__DivideBy;
	soap_default___tempuri__DivideBy(soap, &soap_tmp___tempuri__DivideBy);
	if (!soap_get___tempuri__DivideBy(soap, &soap_tmp___tempuri__DivideBy, "-tempuri:DivideBy", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DivideBy(soap_tmp___tempuri__DivideBy.mssadh__DivideBy);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__Result(WSDualHttpBinding_USCOREICalculatorDuplexService *service)
{	struct soap *soap = service->soap;
	struct __tempuri__Result soap_tmp___tempuri__Result;
	soap_default___tempuri__Result(soap, &soap_tmp___tempuri__Result);
	if (!soap_get___tempuri__Result(soap, &soap_tmp___tempuri__Result, "-tempuri:Result", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Result(soap_tmp___tempuri__Result.mssadh__Result);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve___tempuri__Equation(WSDualHttpBinding_USCOREICalculatorDuplexService *service)
{	struct soap *soap = service->soap;
	struct __tempuri__Equation soap_tmp___tempuri__Equation;
	soap_default___tempuri__Equation(soap, &soap_tmp___tempuri__Equation);
	if (!soap_get___tempuri__Equation(soap, &soap_tmp___tempuri__Equation, "-tempuri:Equation", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->Equation(soap_tmp___tempuri__Equation.mssadh__Equation);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
