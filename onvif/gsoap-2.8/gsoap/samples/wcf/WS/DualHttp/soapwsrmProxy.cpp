/* soapwsrmProxy.cpp
   Generated by gSOAP 2.8.16 from calculator.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapwsrmProxy.h"

wsrmProxy::wsrmProxy()
{	this->soap = soap_new();
	this->own = true;
	wsrmProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

wsrmProxy::wsrmProxy(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	wsrmProxy_init(_soap->imode, _soap->omode);
}

wsrmProxy::wsrmProxy(const char *url)
{	this->soap = soap_new();
	this->own = true;
	wsrmProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

wsrmProxy::wsrmProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	wsrmProxy_init(iomode, iomode);
}

wsrmProxy::wsrmProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	wsrmProxy_init(iomode, iomode);
	soap_endpoint = url;
}

wsrmProxy::wsrmProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	wsrmProxy_init(imode, omode);
}

wsrmProxy::~wsrmProxy()
{	if (this->own)
		soap_free(this->soap);
}

void wsrmProxy::wsrmProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"tempuri", "http://tempuri.org/", NULL, NULL},
	{"mssadh", "http://Microsoft.Samples.DualHttp", NULL, NULL},
	{"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
	{"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
	{"netrm", "http://schemas.microsoft.com/ws/2006/05/rm", NULL, NULL},
	{"wsrm", "http://schemas.xmlsoap.org/ws/2005/02/rm", "http://docs.oasis-open.org/ws-rx/wsrm/200702", NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void wsrmProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void wsrmProxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	wsrmProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void wsrmProxy::soap_noheader()
{	this->soap->header = NULL;
}

void wsrmProxy::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct wsrm__SequenceType *wsrm__Sequence, int __sizeAckRequested, struct wsrm__AckRequestedType *wsrm__AckRequested, int __sizeSequenceAcknowledgement, struct _wsrm__SequenceAcknowledgement *wsrm__SequenceAcknowledgement, struct wsrm__SequenceFaultType *wsrm__SequenceFault)
{	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->wsrm__Sequence = wsrm__Sequence;
	this->soap->header->__sizeAckRequested = __sizeAckRequested;
	this->soap->header->wsrm__AckRequested = wsrm__AckRequested;
	this->soap->header->__sizeSequenceAcknowledgement = __sizeSequenceAcknowledgement;
	this->soap->header->wsrm__SequenceAcknowledgement = wsrm__SequenceAcknowledgement;
	this->soap->header->wsrm__SequenceFault = wsrm__SequenceFault;
}

const SOAP_ENV__Header *wsrmProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *wsrmProxy::soap_fault()
{	return this->soap->fault;
}

const char *wsrmProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *wsrmProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int wsrmProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int wsrmProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void wsrmProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void wsrmProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *wsrmProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int wsrmProxy::CreateSequence(const char *endpoint, const char *soap_action, struct wsrm__CreateSequenceType *wsrm__CreateSequence, struct wsrm__CreateSequenceResponseType *wsrm__CreateSequenceResponse)
{	struct soap *soap = this->soap;
	struct __wsrm__CreateSequence soap_tmp___wsrm__CreateSequence;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://schemas.xmlsoap.org/ws/2005/02/rm/CreateSequence";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___wsrm__CreateSequence.wsrm__CreateSequence = wsrm__CreateSequence;
	soap_serializeheader(soap);
	soap_serialize___wsrm__CreateSequence(soap, &soap_tmp___wsrm__CreateSequence);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wsrm__CreateSequence(soap, &soap_tmp___wsrm__CreateSequence, "-wsrm:CreateSequence", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wsrm__CreateSequence(soap, &soap_tmp___wsrm__CreateSequence, "-wsrm:CreateSequence", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!wsrm__CreateSequenceResponse)
		return soap_closesock(soap);
	soap_default_wsrm__CreateSequenceResponseType(soap, wsrm__CreateSequenceResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_wsrm__CreateSequenceResponseType(soap, wsrm__CreateSequenceResponse, "wsrm:CreateSequenceResponse", "wsrm:CreateSequenceResponseType");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int wsrmProxy::CloseSequence(const char *endpoint, const char *soap_action, struct wsrm__CloseSequenceType *wsrm__CloseSequence, struct wsrm__CloseSequenceResponseType *wsrm__CloseSequenceResponse)
{	struct soap *soap = this->soap;
	struct __wsrm__CloseSequence soap_tmp___wsrm__CloseSequence;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://schemas.xmlsoap.org/ws/2005/02/rm/CloseSequence";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___wsrm__CloseSequence.wsrm__CloseSequence = wsrm__CloseSequence;
	soap_serializeheader(soap);
	soap_serialize___wsrm__CloseSequence(soap, &soap_tmp___wsrm__CloseSequence);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wsrm__CloseSequence(soap, &soap_tmp___wsrm__CloseSequence, "-wsrm:CloseSequence", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wsrm__CloseSequence(soap, &soap_tmp___wsrm__CloseSequence, "-wsrm:CloseSequence", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!wsrm__CloseSequenceResponse)
		return soap_closesock(soap);
	soap_default_wsrm__CloseSequenceResponseType(soap, wsrm__CloseSequenceResponse);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_wsrm__CloseSequenceResponseType(soap, wsrm__CloseSequenceResponse, "wsrm:CloseSequenceResponse", "wsrm:CloseSequenceResponseType");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int wsrmProxy::TerminateSequence(const char *endpoint, const char *soap_action, struct wsrm__TerminateSequenceType *wsrm__TerminateSequence, struct wsrm__TerminateSequenceResponseType *wsrm__TerminateSequence_)
{	struct soap *soap = this->soap;
	struct __wsrm__TerminateSequence soap_tmp___wsrm__TerminateSequence;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://schemas.xmlsoap.org/ws/2005/02/rm/TerminateSequence";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___wsrm__TerminateSequence.wsrm__TerminateSequence = wsrm__TerminateSequence;
	soap_serializeheader(soap);
	soap_serialize___wsrm__TerminateSequence(soap, &soap_tmp___wsrm__TerminateSequence);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wsrm__TerminateSequence(soap, &soap_tmp___wsrm__TerminateSequence, "-wsrm:TerminateSequence", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wsrm__TerminateSequence(soap, &soap_tmp___wsrm__TerminateSequence, "-wsrm:TerminateSequence", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!wsrm__TerminateSequence_)
		return soap_closesock(soap);
	soap_default_wsrm__TerminateSequenceResponseType(soap, wsrm__TerminateSequence_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_wsrm__TerminateSequenceResponseType(soap, wsrm__TerminateSequence_, "wsrm:TerminateSequence", "wsrm:TerminateSequenceResponseType");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int wsrmProxy::send_CreateSequenceResponse(const char *endpoint, const char *soap_action, struct wsrm__CreateSequenceResponseType *wsrm__CreateSequenceResponse)
{	struct soap *soap = this->soap;
	struct __wsrm__CreateSequenceResponse soap_tmp___wsrm__CreateSequenceResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://schemas.xmlsoap.org/ws/2005/02/rm/CreateSequenceResponse";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___wsrm__CreateSequenceResponse.wsrm__CreateSequenceResponse = wsrm__CreateSequenceResponse;
	soap_serializeheader(soap);
	soap_serialize___wsrm__CreateSequenceResponse(soap, &soap_tmp___wsrm__CreateSequenceResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wsrm__CreateSequenceResponse(soap, &soap_tmp___wsrm__CreateSequenceResponse, "-wsrm:CreateSequenceResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wsrm__CreateSequenceResponse(soap, &soap_tmp___wsrm__CreateSequenceResponse, "-wsrm:CreateSequenceResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int wsrmProxy::recv_CreateSequenceResponse(struct __wsrm__CreateSequenceResponse& tmp)
{	struct soap *soap = this->soap;

	struct __wsrm__CreateSequenceResponse *_param_9 = &tmp;
	soap_default___wsrm__CreateSequenceResponse(soap, _param_9);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___wsrm__CreateSequenceResponse(soap, _param_9, "-wsrm:CreateSequenceResponse", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int wsrmProxy::send_CloseSequenceResponse(const char *endpoint, const char *soap_action, struct wsrm__CloseSequenceResponseType *wsrm__CloseSequenceResponse)
{	struct soap *soap = this->soap;
	struct __wsrm__CloseSequenceResponse soap_tmp___wsrm__CloseSequenceResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://schemas.xmlsoap.org/ws/2005/02/rm/CloseSequenceResponse";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___wsrm__CloseSequenceResponse.wsrm__CloseSequenceResponse = wsrm__CloseSequenceResponse;
	soap_serializeheader(soap);
	soap_serialize___wsrm__CloseSequenceResponse(soap, &soap_tmp___wsrm__CloseSequenceResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wsrm__CloseSequenceResponse(soap, &soap_tmp___wsrm__CloseSequenceResponse, "-wsrm:CloseSequenceResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wsrm__CloseSequenceResponse(soap, &soap_tmp___wsrm__CloseSequenceResponse, "-wsrm:CloseSequenceResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int wsrmProxy::recv_CloseSequenceResponse(struct __wsrm__CloseSequenceResponse& tmp)
{	struct soap *soap = this->soap;

	struct __wsrm__CloseSequenceResponse *_param_10 = &tmp;
	soap_default___wsrm__CloseSequenceResponse(soap, _param_10);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___wsrm__CloseSequenceResponse(soap, _param_10, "-wsrm:CloseSequenceResponse", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int wsrmProxy::send_TerminateSequenceResponse(const char *endpoint, const char *soap_action, struct wsrm__TerminateSequenceResponseType *wsrm__TerminateSequenceResponse)
{	struct soap *soap = this->soap;
	struct __wsrm__TerminateSequenceResponse soap_tmp___wsrm__TerminateSequenceResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://schemas.xmlsoap.org/ws/2005/02/rm/TerminateSequenceResponse";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___wsrm__TerminateSequenceResponse.wsrm__TerminateSequenceResponse = wsrm__TerminateSequenceResponse;
	soap_serializeheader(soap);
	soap_serialize___wsrm__TerminateSequenceResponse(soap, &soap_tmp___wsrm__TerminateSequenceResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wsrm__TerminateSequenceResponse(soap, &soap_tmp___wsrm__TerminateSequenceResponse, "-wsrm:TerminateSequenceResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wsrm__TerminateSequenceResponse(soap, &soap_tmp___wsrm__TerminateSequenceResponse, "-wsrm:TerminateSequenceResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int wsrmProxy::recv_TerminateSequenceResponse(struct __wsrm__TerminateSequenceResponse& tmp)
{	struct soap *soap = this->soap;

	struct __wsrm__TerminateSequenceResponse *_param_11 = &tmp;
	soap_default___wsrm__TerminateSequenceResponse(soap, _param_11);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___wsrm__TerminateSequenceResponse(soap, _param_11, "-wsrm:TerminateSequenceResponse", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int wsrmProxy::send_SequenceAcknowledgement(const char *endpoint, const char *soap_action)
{	struct soap *soap = this->soap;
	struct __wsrm__SequenceAcknowledgement soap_tmp___wsrm__SequenceAcknowledgement;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://schemas.xmlsoap.org/ws/2005/02/rm/SequenceAcknowledgement";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___wsrm__SequenceAcknowledgement(soap, &soap_tmp___wsrm__SequenceAcknowledgement);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wsrm__SequenceAcknowledgement(soap, &soap_tmp___wsrm__SequenceAcknowledgement, "-wsrm:SequenceAcknowledgement", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wsrm__SequenceAcknowledgement(soap, &soap_tmp___wsrm__SequenceAcknowledgement, "-wsrm:SequenceAcknowledgement", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int wsrmProxy::recv_SequenceAcknowledgement(struct __wsrm__SequenceAcknowledgement& tmp)
{	struct soap *soap = this->soap;

	struct __wsrm__SequenceAcknowledgement *_param_12 = &tmp;
	soap_default___wsrm__SequenceAcknowledgement(soap, _param_12);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___wsrm__SequenceAcknowledgement(soap, _param_12, "-wsrm:SequenceAcknowledgement", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int wsrmProxy::send_AckRequested(const char *endpoint, const char *soap_action)
{	struct soap *soap = this->soap;
	struct __wsrm__AckRequested soap_tmp___wsrm__AckRequested;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://schemas.xmlsoap.org/ws/2005/02/rm/AckRequested";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___wsrm__AckRequested(soap, &soap_tmp___wsrm__AckRequested);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wsrm__AckRequested(soap, &soap_tmp___wsrm__AckRequested, "-wsrm:AckRequested", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wsrm__AckRequested(soap, &soap_tmp___wsrm__AckRequested, "-wsrm:AckRequested", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int wsrmProxy::recv_AckRequested(struct __wsrm__AckRequested& tmp)
{	struct soap *soap = this->soap;

	struct __wsrm__AckRequested *_param_13 = &tmp;
	soap_default___wsrm__AckRequested(soap, _param_13);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___wsrm__AckRequested(soap, _param_13, "-wsrm:AckRequested", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int wsrmProxy::send_LastMessage(const char *endpoint, const char *soap_action)
{	struct soap *soap = this->soap;
	struct __wsrm__LastMessage soap_tmp___wsrm__LastMessage;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://schemas.xmlsoap.org/ws/2005/02/rm/LastMessage";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___wsrm__LastMessage(soap, &soap_tmp___wsrm__LastMessage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wsrm__LastMessage(soap, &soap_tmp___wsrm__LastMessage, "-wsrm:LastMessage", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wsrm__LastMessage(soap, &soap_tmp___wsrm__LastMessage, "-wsrm:LastMessage", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int wsrmProxy::recv_LastMessage(struct __wsrm__LastMessage& tmp)
{	struct soap *soap = this->soap;

	struct __wsrm__LastMessage *_param_14 = &tmp;
	soap_default___wsrm__LastMessage(soap, _param_14);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___wsrm__LastMessage(soap, _param_14, "-wsrm:LastMessage", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
