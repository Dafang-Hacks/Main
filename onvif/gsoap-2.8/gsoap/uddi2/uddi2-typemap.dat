#	uddi2map.dat
#
#	gSOAP type map bindings for UDDI v2 to run the gSOAP WSDL tool 'wsdl2h'
#
#	Includes full documentation and examples of the gSOAP UDDI v2 API

[
/** @mainpage gSOAP UDDI v2

Universal Description, Discovery and Integration, or UDDI, is the name of a
group of web-based registries that expose information about a business or other
entity and its technical interfaces.

See the UDDI v2 specification @url http://uddi.org/pubs/ProgrammersAPI_v2.htm
for more details.

@section UDDI2_CLASSES Classes

See Related Pages for examples.

UDDI Inquire classes

- @ref uddi2__find_USCOREbinding
- @ref uddi2__find_USCOREbusiness
- @ref uddi2__find_USCORErelatedBusinesses
- @ref uddi2__find_USCOREservice
- @ref uddi2__find_USCOREtModel
- @ref uddi2__get_USCOREbindingDetail
- @ref uddi2__get_USCOREbusinessDetail
- @ref uddi2__get_USCOREbusinessDetailExt
- @ref uddi2__get_USCOREserviceDetail
- @ref uddi2__get_USCOREtModelDetail

UDDI Publish classes

- @ref uddi2__add_USCOREpublisherAssertions
- @ref uddi2__delete_USCOREbinding
- @ref uddi2__delete_USCOREbusiness
- @ref uddi2__delete_USCOREservice
- @ref uddi2__delete_USCOREtModel
- @ref uddi2__delete_USCOREpublisherAssertions
- @ref uddi2__discard_USCOREauthToken
- @ref uddi2__get_USCOREassertionStatusReport
- @ref uddi2__get_USCOREauthToken
- @ref uddi2__get_USCOREpublisherAssertions
- @ref uddi2__get_USCOREregisteredInfo
- @ref uddi2__save_USCOREbinding
- @ref uddi2__save_USCOREbusiness
- @ref uddi2__save_USCOREservice
- @ref uddi2__save_USCOREtModel
- @ref uddi2__set_USCOREpublisherAssertions

@section UDDI2_BINDINGS Binding Reference

- @ref InquireSoap
- @ref PublishSoap

*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:find_binding
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__find_USCOREbinding
@brief

Represents a request to locate bindings that meet the specified requirements.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137712
*/

/**
@fn uddi2__find_USCOREbinding::uddi2__find_USCOREbinding(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the find_USCOREbinding class.
*/

/**
@fn uddi2__find_USCOREbinding::uddi2__find_USCOREbinding(struct soap *soap, const char *tModelKey)
@brief
@param[in] soap gSOAP context
@param[in] tModelKey string

Creates an instance of the find_USCOREbinding class using the specified tModel
key.
*/

/**
@fn uddi2__find_USCOREbinding::uddi2__find_USCOREbinding(struct soap *soap, std::vector<char*> tModelKeys)
@brief
@param[in] soap gSOAP context
@param[in] tModelKeys collection of tModel key strings

Creates an instance of the find_USCOREbinding class using the specified tModel
keys.
*/

/**
@fn uddi2__bindingDetail* uddi2__find_USCOREbinding::send(const char *endpoint)
@brief
@param[in] endpoint URL of the UDDI server
@return A pointer to a uddi2__bindingDetail object or NULL on error

Send a request to a UDDI server to find binding details.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:find_business
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__find_USCOREbusiness
@brief

Represents a request to locate businesses that meet specific requirements. When
the send method is called, the instance returns a uddi2__businessList object
that contains a list of business that matched the search criteria.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137713

See also @ref example2.
*/

/**
@fn uddi2__find_USCOREbusiness::uddi2__find_USCOREbusiness(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the find_USCOREbusiness class.
*/

/**
@fn uddi2__find_USCOREbusiness::uddi2__find_USCOREbusiness(struct soap *soap, const char *name)
@brief
@param[in] soap gSOAP context

Creates an instance of the find_USCOREbusiness class using the specified name
of the requested business.
*/

/**
@fn uddi2__find_USCOREbusiness::uddi2__find_USCOREbusiness(struct soap *soap, std::vector<uddi2__keyedReference*> keyedReferences)
@brief
@param[in] soap gSOAP context

Creates an instance of the find_USCOREbusiness class using the specified
category references.
*/

/**
@fn uddi2__find_USCOREbusiness::uddi2__find_USCOREbusiness(struct soap *soap, std::vector<char*> tModelKeys)
@brief
@param[in] soap gSOAP context

Creates an instance of the find_USCOREbusiness class using the specified tModel
keys.
*/

/**
@fn uddi2__businessList *uddi2__find_USCOREbusiness::send(const char *endpoint)
@brief
@param[in] endpoint URL of the UDDI server
@return A pointer to a uddi2__businessList object or NULL on error

Send a request to a UDDI server to find a list of businesses.

See also @ref example2.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:find_relatedBusinesses
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__find_USCORErelatedBusinesses
@brief

Represents a request to locate businesses that are related to a specific
business. When the send method is called, the instance returns a
uddi2__relatedBusinessList object that contains a list of business that matched
the relationship set.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137714
*/

/**
@fn uddi2__find_USCORErelatedBusinesses::uddi2__find_USCORErelatedBusinesses(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the find_USCORErelatedBusiness class.
*/

/**
@fn uddi2__find_USCORErelatedBusinesses::uddi2__find_USCORErelatedBusinesses(struct soap *soap, const char *businessKey)
@brief
@param[in] soap gSOAP context
@param[in] businessKey string

Creates an instance of the find_USCORErelatedBusiness class using the specified
business key.
*/

/**
@fn uddi2__relatedBusinessesList *uddi2__find_USCORErelatedBusinesses::send(const char *endpoint)
@brief
@param[in] endpoint URL of the UDDI server
@return A pointer to a uddi2__relatedBusinessList object or NULL on error

Send a request to a UDDI server to find a list of related businesses.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:find_service
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__find_USCOREservice
@brief

Represents a request to locate services that meet the specified requirements.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137715

See also @ref example1.
*/

/**
@fn uddi2__find_USCOREservice::uddi2__find_USCOREservice(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the find_USCOREservice class.
*/

/**
@fn uddi2__find_USCOREservice::uddi2__find_USCOREservice(struct soap *soap, const char *name)
@brief
@param[in] soap gSOAP context
@param[in] name of the service

Creates an instance of the find_USCOREservice class using the specified name.
*/

/**
@fn uddi2__find_USCOREservice::uddi2__find_USCOREservice(struct soap *soap, std::vector<uddi2__keyedReference*> keyedReferences)
@brief
@param[in] soap gSOAP context
@param[in] keyedReferences collection of category keys

Creates an instance of the find_USCOREservice class using the specified
category keys.
*/

/**
@fn uddi2__find_USCOREservice::uddi2__find_USCOREservice(struct soap *soap, std::vector<char*> tModelKeys)
@brief
@param[in] soap gSOAP context
@param[in] tModelKeys collection of tModel key strings

Creates an instance of the find_USCOREservice class using the specified tModel
keys.
*/

/**
@fn uddi2__serviceList* uddi2__find_USCOREservice::send(const char *endpoint)
@brief
@param[in] endpoint URL of the UDDI server
@return A pointer to a uddi2__serviceList object or NULL on error

Send a request to a UDDI server to find a list of services.

See also @ref example1.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:find_tModel
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__find_USCOREtModel
@brief

Represents a request to locate a list of tModel entries that match a set of
specific criteria. The result of a search is a uddi2__tModelList object that
contains information about registered tModel data that matches the criteria.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137716
*/

/**
@fn uddi2__find_USCOREtModel::uddi2__find_USCOREtModel(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the find_USCOREtModel class.
*/

/**
@fn uddi2__find_USCOREtModel::uddi2__find_USCOREtModel(struct soap *soap, const char *name)
@brief
@param[in] soap gSOAP context
@param[in] name of the tModel

Creates an instance of the find_USCOREtModel class using the specified tModel
name.
*/

/**
@fn uddi2__find_USCOREtModel::uddi2__find_USCOREtModel(struct soap *soap, std::vector<uddi2__keyedReference*> keyedReferences)
@brief
@param[in] soap gSOAP context
@param[in] keyedReferences collection of category keys

Creates an instance of the find_USCOREtModel class using the specified category
keys.
*/

/**
@fn uddi2__tModelList* uddi2__find_USCOREtModel::send(const char *endpoint)
@brief
@param[in] endpoint URL of the UDDI server
@return A pointer to a uddi2__tModelList object or NULL on error

Send a request to a UDDI server to find a tModelList.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:get_bindingDetail
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__get_USCOREbindingDetail
@brief

Represents a request to get binding details from a UDDI server.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137717
*/

/**
@fn uddi2__get_USCOREbindingDetail::uddi2__get_USCOREbindingDetail(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the get_USCOREbindingDetail class.
*/

/**
@fn uddi2__get_USCOREbindingDetail::uddi2__get_USCOREbindingDetail(struct soap *soap, const char *bindingKey)
@brief
@param[in] soap gSOAP context
@param[in] bindingKey string

Creates an instance of the get_USCOREbindingDetail class using the specified
binding key.
*/

/**
@fn uddi2__get_USCOREbindingDetail::uddi2__get_USCOREbindingDetail(struct soap *soap, std::vector<char*> bindingKeys)
@brief
@param[in] soap gSOAP context
@param[in] bindingKeys collection of key strings

Creates an instance of the get_USCOREbindingDetail class using the specified
collection of binding keys.
*/

/**
@fn uddi2__bindingDetail* uddi2__get_USCOREbindingDetail::send(const char *endpoint)
@brief
@param[in] endpoint URL of the UDDI server
@return A pointer to a uddi2__bindingDetail object or NULL on error

Send a request to a UDDI server to get the binding details.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:get_businessDetail
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__get_USCOREbusinessDetail
@brief

Represents a request to get business details from a UDDI server.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137718 
*/

/**
@fn uddi2__get_USCOREbusinessDetail::uddi2__get_USCOREbusinessDetail(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the get_USCOREbusinessDetail class.
*/

/**
@fn uddi2__get_USCOREbusinessDetail::uddi2__get_USCOREbusinessDetail(struct soap *soap, const char *businessKey)
@brief
@param[in] soap gSOAP context
@param[in] businessKey string

Creates an instance of the get_USCOREbusinessDetail class using the specified
business key.
*/

/**
@fn uddi2__get_USCOREbusinessDetail::uddi2__get_USCOREbusinessDetail(struct soap *soap, std::vector<char*> businessKeys)
@brief
@param[in] soap gSOAP context
@param[in] businessKeys collection of key strings

Creates an instance of the get_USCOREbusinessDetail class using the specified
collection of business keys.
*/

/**
@fn uddi2__businessDetail* uddi2__get_USCOREbusinessDetail::send(const char *endpoint)
@brief
@param[in] endpoint URL of the UDDI server
@return A pointer to a uddi2__businessDetail object or NULL on error

Send a request to a UDDI server to get the business details.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:get_businessDetailExt
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__get_USCOREbusinessDetailExt
@brief

Represents a request to get business details from a UDDI server.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137719
*/

/**
@fn uddi2__get_USCOREbusinessDetailExt::uddi2__get_USCOREbusinessDetailExt(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the get_USCOREbusinessDetailExt class.
*/

/**
@fn uddi2__get_USCOREbusinessDetailExt::uddi2__get_USCOREbusinessDetailExt(struct soap *soap, const char *businessKey)
@brief
@param[in] soap gSOAP context
@param[in] businessKey string

Creates an instance of the get_USCOREbusinessDetailExt class using the specified
business key.
*/

/**
@fn uddi2__get_USCOREbusinessDetailExt::uddi2__get_USCOREbusinessDetailExt(struct soap *soap, std::vector<char*> businessKeys)
@brief
@param[in] soap gSOAP context
@param[in] businessKeys collection of key strings

Creates an instance of the get_USCOREbusinessDetailExt class using the specified
collection of business keys.
*/

/**
@fn uddi2__businessDetailExt* uddi2__get_USCOREbusinessDetailExt::send(const char *endpoint)
@brief
@param[in] endpoint URL of the UDDI server
@return A pointer to a uddi2__businessDetailExt object or NULL on error

Send a request to a UDDI server to get the business details.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:get_serviceDetail
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__get_USCOREserviceDetail
@brief

Represents a request to get service details from a UDDI server.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137720
*/

/**
@fn uddi2__get_USCOREserviceDetail::uddi2__get_USCOREserviceDetail(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the get_USCOREserviceDetail class.
*/

/**
@fn uddi2__get_USCOREserviceDetail::uddi2__get_USCOREserviceDetail(struct soap *soap, const char *serviceKey)
@brief
@param[in] soap gSOAP context
@param[in] serviceKey string

Creates an instance of the get_USCOREserviceDetail class using the specified
service key.
*/

/**
@fn uddi2__get_USCOREserviceDetail::uddi2__get_USCOREserviceDetail(struct soap *soap, std::vector<char*> serviceKeys)
@brief
@param[in] soap gSOAP context
@param[in] serviceKeys collection of key strings

Creates an instance of the get_USCOREserviceDetail class using the specified
collection of service keys.
*/

/**
@fn uddi2__serviceDetail* uddi2__get_USCOREserviceDetail::send(const char *endpoint)
@brief
@param[in] endpoint URL of the UDDI server
@return A pointer to a uddi2__serviceDetail object or NULL on error

Send a request to a UDDI server to get the service details.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:get_tModelDetail
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__get_USCOREtModelDetail
@brief

Represents a request to get tModel details from a UDDI server.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137721
*/

/**
@fn uddi2__get_USCOREtModelDetail::uddi2__get_USCOREtModelDetail(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the get_USCOREtModelDetail class.
*/

/**
@fn uddi2__get_USCOREtModelDetail::uddi2__get_USCOREtModelDetail(struct soap *soap, const char *tModelKey)
@brief
@param[in] soap gSOAP context
@param[in] tModelKey string

Creates an instance of the get_USCOREtModelDetail class using the specified
tModel key.
*/

/**
@fn uddi2__get_USCOREtModelDetail::uddi2__get_USCOREtModelDetail(struct soap *soap, std::vector<char*> tModelKeys)
@brief
@param[in] soap gSOAP context
@param[in] tModelKeys collection of key strings

Creates an instance of the get_USCOREtModelDetail class using the specified
collection of tModel keys.
*/

/**
@fn uddi2__tModelDetail* uddi2__get_USCOREtModelDetail::send(const char *endpoint)
@brief
@param[in] endpoint URL of the UDDI server
@return A pointer to a uddi2__tModelDetail object or NULL on error

Send a request to a UDDI server to get the tModel details.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:add_publisherAssertions
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__add_USCOREpublisherAssertions
@brief

Represents a request to add one or more publisher assertions to the assertion
collection for an individual publisher.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137731
*/

/**
@fn uddi2__add_USCOREpublisherAssertions::uddi2__add_USCOREpublisherAssertions(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the add_USCOREpublisherAssertions class.
*/

/**
@fn uddi2__add_USCOREpublisherAssertions::uddi2__add_USCOREpublisherAssertions(struct soap *soap, std::vector<uddi2__publisherAssertion*> publisherAssertions)
@brief
@param[in] soap gSOAP context
@param[in] publisherAssertions collection of publisher assertions

Creates an instance of the add_USCOREpublisherAssertions class using the
specified publisher assertions.
*/

/**
@fn uddi2__dispositionReport *uddi2__add_USCOREpublisherAssertions::send(const char *endpoint, char *authInfo)
@brief
@param[in] endpoint URL of the UDDI server
@param[in] authInfo authorization token provided by the UDDI server
@return A pointer to a uddi2__dispositionReport object or NULL on error

Send a request to a UDDI server to add one or more publisher assertions to the
assertion collection for an individual publisher.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:delete_binding
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__delete_USCOREbinding
@brief

Represents a request to delete a binding that meets the specified requirements.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137732
*/

/**
@fn uddi2__delete_USCOREbinding::uddi2__delete_USCOREbinding(struct soap *soap)
@brief

Creates an instance of the delete_USCOREbinding class.
*/

/**
@fn uddi2__delete_USCOREbinding::uddi2__delete_USCOREbinding(struct soap *soap, const char *bindingKey)
@brief
@param[in] soap gSOAP context
@param[in] bindingKey a binding key string

Creates an instance of the delete_USCOREbinding class.
*/

/**
@fn uddi2__delete_USCOREbinding::uddi2__delete_USCOREbinding(struct soap *soap, std::vector<char*> bindingKeys)
@brief
@param[in] soap gSOAP context
@param[in] bindingKeys collection of binding keys

Creates an instance of the delete_USCOREbinding class using the specified
binding keys.
*/

/**
@fn uddi2__dispositionReport *uddi2__delete_USCOREbinding::send(const char *endpoint, char *authInfo)
@brief
@param[in] endpoint URL of the UDDI server
@param[in] authInfo authorization token provided by the UDDI server
@return A pointer to a uddi2__dispositionReport object or NULL on error

Send a request to a UDDI service to delete a binding that meets the specified
requirements.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:delete_business
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__delete_USCOREbusiness
@brief

Represents a request to delete a business that meets the specified requirements.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137733
*/

/**
@fn uddi2__delete_USCOREbusiness::uddi2__delete_USCOREbusiness(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the delete_USCOREbusiness class.
*/

/**
@fn uddi2__delete_USCOREbusiness::uddi2__delete_USCOREbusiness(struct soap *soap, const char *businessKey)
@brief
@param[in] soap gSOAP context
@param[in] businessKey a business key string

Creates an instance of the delete_USCOREbusiness class using the specified
business key.
*/

/**
@fn uddi2__delete_USCOREbusiness::uddi2__delete_USCOREbusiness(struct soap *soap, std::vector<char*> businessKeys)
@brief
@param[in] soap gSOAP context
@param[in] businessKeys collection of business keys

Creates an instance of the delete_USCOREbusiness class using the specified
business keys.
*/

/**
@fn uddi2__dispositionReport *uddi2__delete_USCOREbusiness::send(const char *endpoint, char *authInfo)
@brief
@param[in] endpoint URL of the UDDI server
@param[in] authInfo authorization token provided by the UDDI server
@return A pointer to a uddi2__dispositionReport object or NULL on error

Send a request to a UDDI service to delete a business that meets the specified
requirements.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:delete_service
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__delete_USCOREservice
@brief

Represents a request to delete a service that meets the specified requirements.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137735
*/

/**
@fn uddi2__delete_USCOREservice::uddi2__delete_USCOREservice(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the delete_USCOREservice class.
*/

/**
@fn uddi2__delete_USCOREservice::uddi2__delete_USCOREservice(struct soap *soap, const char *serviceKey)
@brief
@param[in] soap gSOAP context
@param[in] serviceKey a service key string

Creates an instance of the delete_USCOREservice class using the specified
service key.
*/

/**
@fn uddi2__delete_USCOREservice::uddi2__delete_USCOREservice(struct soap *soap, std::vector<char*> serviceKeys)
@brief
@param[in] soap gSOAP context
@param[in] serviceKeys collection of service keys

Creates an instance of the delete_USCOREservice class using the specified
service keys.
*/

/**
@fn uddi2__dispositionReport *uddi2__delete_USCOREservice::send(const char *endpoint, char *authInfo)
@brief
@param[in] endpoint URL of the UDDI server
@param[in] authInfo authorization token provided by the UDDI server
@return A pointer to a uddi2__dispositionReport object or NULL on error

Send a request to a UDDI service to delete a service that meets the specified
requirements.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:delete_tModel
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__delete_USCOREtModel
@brief

Represents a request to delete a tModel that meets the specified requirements.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137736
*/

/**
@fn uddi2__delete_USCOREtModel::uddi2__delete_USCOREtModel(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the delete_USCOREtModel class.
*/

/**
@fn uddi2__delete_USCOREtModel::uddi2__delete_USCOREtModel(struct soap *soap, const char *tModelKey)
@brief
@param[in] soap gSOAP context
@param[in] tModelKey a tModel key string

Creates an instance of the delete_USCOREtModel class using the specified
tModel key.
*/

/**
@fn uddi2__delete_USCOREtModel::uddi2__delete_USCOREtModel(struct soap *soap, std::vector<char*> tModelKeys)
@brief
@param[in] soap gSOAP context
@param[in] tModelKeys collection of tModel keys

Creates an instance of the delete_USCOREtModel class using the specified
tModel keys.
*/

/**
@fn uddi2__dispositionReport *uddi2__delete_USCOREtModel::send(const char *endpoint, char *authInfo)
@brief
@param[in] endpoint URL of the UDDI server
@param[in] authInfo authorization token provided by the UDDI server
@return A pointer to a uddi2__dispositionReport object or NULL on error

Send a request to a UDDI service to delete a tModel that meets the specified
requirements.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:delete_publisherAssertions
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__delete_USCOREpublisherAssertions
@brief

Represents a request to delete publisher assertions meeting the specified
requirements.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137734
*/

/**
@fn uddi2__delete_USCOREpublisherAssertions::uddi2__delete_USCOREpublisherAssertions(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the delete_USCOREpublisherAssertions class.
*/

/**
@fn uddi2__delete_USCOREpublisherAssertions::uddi2__delete_USCOREpublisherAssertions(struct soap *soap, std::vector<uddi2__publisherAssertion*> publisherAssertions)
@brief
@param[in] soap gSOAP context
@param[in] publisherAssertions a collection of publisher assertions

Creates an instance of the delete_USCOREpublisherAssertions class using the
specified collection of publisher assertions.
*/

/**
@fn uddi2__dispositionReport *uddi2__delete_USCOREpublisherAssertions::send(const char *endpoint, char *authInfo)
@brief
@param[in] endpoint URL of the UDDI server
@param[in] authInfo authorization token provided by the UDDI server
@return A pointer to a uddi2__dispositionReport object or NULL on error

Send a request to a UDDI service to delete publisher assertions meeting the
specified requirements.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:discard_authToken
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__discard_USCOREauthToken
@brief

Represents a request to discard an authorization token obtained with the
get_USCOREauthToken class.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137737
*/

/**
@fn uddi2__discard_USCOREauthToken::uddi2__discard_USCOREauthToken(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the delete_USCOREauthToken class.
*/

/**
@fn uddi2__discard_USCOREauthToken::uddi2__discard_USCOREauthToken(struct soap *soap, const char *authInfo)
@brief
@param[in] soap gSOAP context
@param[in] authInfo authorization token provided by the UDDI server

Creates an instance of the delete_USCOREauthToken class using the specified
authentication token string.
*/

/**
@fn uddi2__dispositionReport *uddi2__discard_USCOREauthToken::send(const char *endpoint)
@brief
@param[in] endpoint URL of the UDDI server
@return A pointer to a uddi2__dispositionReport object or NULL on error

Send a request to a UDDI service to discard an authentication token.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:get_assertionStatusReport
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__get_USCOREassertionStatusReport
@brief

Provides the ability to determine the status of current and outstanding
publisher assertions. The results can be restricted by setting the
completionStatus property.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137738
*/

/**
@fn uddi2__get_USCOREassertionStatusReport::uddi2__get_USCOREassertionStatusReport(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the get_USCOREassertionStatusReport class.
*/

/**
@fn uddi2__get_USCOREassertionStatusReport::uddi2__get_USCOREassertionStatusReport(struct soap *soap, const char *completionStatus)
@brief
@param[in] soap gSOAP context
@param[in] completionStatus completion status string

Creates an instance of the get_USCOREassertionStatusReport class using the
specified completion status.
*/

/**
@fn uddi2__assertionStatusReport *uddi2__get_USCOREassertionStatusReport::send(const char *endpoint, char *authInfo)
@brief
@param[in] endpoint URL of the UDDI server
@param[in] authInfo authorization token provided by the UDDI server
@return A pointer to a uddi2__assertionStatusReport object or NULL on error

Send a request to a UDDI service to get the status of current and outstanding
publisher assertions.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:get_authToken
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__get_USCOREauthToken
@brief

Represents a request to obtain an authorization token, which is represented by
the uddi2__authToken class.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137739
*/

/**
@fn uddi2__get_USCOREauthToken::uddi2__get_USCOREauthToken(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the get_USCOREauthToken class.
*/

/**
@fn uddi2__get_USCOREauthToken::uddi2__get_USCOREauthToken(struct soap *soap, const char *userid, const char *passwd)
@brief
@param[in] soap gSOAP context
@param[in] userid the user ID string
@param[in] passwd the password string

Creates an instance of the get_USCOREauthToken class using the specified user
ID and password.
*/

/**
@fn uddi2__authToken *uddi2__get_USCOREauthToken::send(const char *endpoint)
@brief
@param[in] endpoint URL of the UDDI server
@return A pointer to a uddi2__authToken object or NULL on error

Send a request to a UDDI service to get a authorization token given a user
ID and password.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:get_publisherAssertions
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__get_USCOREpublisherAssertions
@brief

Represents a request to obtain the full set of publisher assertions that are
associated with an individual publisher.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137740
*/

/**
@fn uddi2__get_USCOREpublisherAssertions::uddi2__get_USCOREpublisherAssertions(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the get_USCOREpublisherAssetions class.
*/

/**
@fn uddi2__publisherAssertions *uddi2__get_USCOREpublisherAssertions::send(const char *endpoint, char *authInfo)
@brief
@param[in] endpoint URL of the UDDI server
@param[in] authInfo authorization token provided by the UDDI server
@return A pointer to a uddi2__publisherAssertions object or NULL on error

Send a request to a UDDI service to get publisher assertions.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:get_registeredInfo
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__get_USCOREregisteredInfo
@brief

Represents a request to get all registered business entities and tModels
controlled by an individual.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137741
*/

/**
@fn uddi2__get_USCOREregisteredInfo::uddi2__get_USCOREregisteredInfo(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the get_USCOREregisteredInfo class.
*/

/**
@fn uddi2__registeredInfo *uddi2__get_USCOREregisteredInfo::send(const char *endpoint, char *authInfo)
@brief
@param[in] endpoint URL of the UDDI server
@param[in] authInfo authorization token provided by the UDDI server
@return A pointer to a uddi2__registeredInfo object or NULL on error

Send a request to a UDDI service to get all registered business entities and
tModels controlled by an individual.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:save_binding
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__save_USCOREbinding
@brief

Represents a request to post binding information on a UDDI server.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137742
*/

/**
@fn uddi2__save_USCOREbinding::uddi2__save_USCOREbinding(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the save_USCOREbinding class.
*/

/**
@fn uddi2__save_USCOREbinding::uddi2__save_USCOREbinding(struct soap *soap, uddi2__bindingTemplate &bindingTemplate)
@brief
@param[in] soap gSOAP context
@param[in] bindingTemplate binding template

Creates an instance of the save_USCOREbinding class using the specified binding
template.
*/

/**
@fn uddi2__save_USCOREbinding::uddi2__save_USCOREbinding(struct soap *soap, std::vector<uddi2__bindingTemplate*> bindingTemplates)
@brief
@param[in] soap gSOAP context
@param[in] bindingTemplates collection of binding templates

Creates an instance of the save_USCOREbinding class using the specified binding
templates.
*/

/**
@fn uddi2__bindingDetail *uddi2__save_USCOREbinding::send(const char *endpoint, char *authInfo)
@brief
@param[in] endpoint URL of the UDDI server
@param[in] authInfo authorization token provided by the UDDI server
@return A pointer to a uddi2__bindingDetail object or NULL on error

Send a request to a UDDI server to post binding information on the server.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:save_business
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__save_USCOREbusiness
@brief

Represents a request to post business information on a UDDI server.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137743
*/

/**
@fn uddi2__save_USCOREbusiness::uddi2__save_USCOREbusiness(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the save_USCOREbusiness class.
*/

/**
@fn uddi2__save_USCOREbusiness::uddi2__save_USCOREbusiness(struct soap *soap, uddi2__businessEntity &businessEntity)
@brief
@param[in] soap gSOAP context
@param[in] businessEntity business entity

Creates an instance of the save_USCOREbusiness class using the specified
business entity.
*/

/**
@fn uddi2__save_USCOREbusiness::uddi2__save_USCOREbusiness(struct soap *soap, std::vector<uddi2__businessEntity*> businessEntities)
@brief
@param[in] soap gSOAP context
@param[in] businessEntities collection of business entities

Creates an instance of the save_USCOREbusiness class using the specified
business entities.
*/

/**
@fn uddi2__businessDetail *uddi2__save_USCOREbusiness::send(const char *endpoint, char *authInfo)
@brief
@param[in] endpoint URL of the UDDI server
@param[in] authInfo authorization token provided by the UDDI server
@return A pointer to a uddi2__businessDetail object or NULL on error

Send a request to a UDDI server to post business information on the server.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:save_service
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__save_USCOREservice
@brief

Represents a request to post service information on a UDDI server.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137744
*/

/**
@fn uddi2__save_USCOREservice::uddi2__save_USCOREservice(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the save_USCOREservice class.
*/

/**
@fn uddi2__save_USCOREservice::uddi2__save_USCOREservice(struct soap *soap, uddi2__businessService &businessService)
@brief
@param[in] soap gSOAP context
@param[in] businessService business service

Creates an instance of the save_USCOREservice class using the specified
service.
*/

/**
@fn uddi2__save_USCOREservice::uddi2__save_USCOREservice(struct soap *soap, std::vector<uddi2__businessService*> businessServices)
@brief
@param[in] soap gSOAP context
@param[in] businessServices collection of business services

Creates an instance of the save_USCOREservice class using the specified
services.
*/

/**
@fn uddi2__serviceDetail *uddi2__save_USCOREservice::send(const char *endpoint, char *authInfo)
@brief
@param[in] endpoint URL of the UDDI server
@param[in] authInfo authorization token provided by the UDDI server
@return A pointer to a uddi2__serviceDetail object or NULL on error

Send a request to a UDDI server to post service information on the server.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:save_tModel
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__save_USCOREtModel
@brief

Represents a request to post tModel information on a UDDI server.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137745
*/

/**
@fn uddi2__save_USCOREtModel::uddi2__save_USCOREtModel(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the save_USCOREtModel class.
*/

/**
@fn uddi2__save_USCOREtModel::uddi2__save_USCOREtModel(struct soap *soap, uddi2__tModel &tModel)
@brief
@param[in] soap gSOAP context
@param[in] tModel a tModel

Creates an instance of the save_USCOREtModel class using the specified
tModel.
*/

/**
@fn uddi2__save_USCOREtModel::uddi2__save_USCOREtModel(struct soap *soap, std::vector<uddi2__tModel*> tModels)
@brief
@param[in] soap gSOAP context
@param[in] tModels collection of tModels

Creates an instance of the save_USCOREtModel class using the specified
tModels.
*/

/**
@fn uddi2__tModelDetail *uddi2__save_USCOREtModel::send(const char *endpoint, char *authInfo)
@brief
@param[in] endpoint URL of the UDDI server
@param[in] authInfo authorization token provided by the UDDI server
@return A pointer to a uddi2__tModelDetail object or NULL on error

Send a request to a UDDI server to post tModel information on the server.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	uddi2:set_publisherAssertions
//
////////////////////////////////////////////////////////////////////////////////

/**
@class uddi2__set_USCOREpublisherAssertions
@brief

Represents a request to modify the existing publisher assertions for an
individual publisher.

See @url http://uddi.org/pubs/ProgrammersAPI_v2.htm#_Toc25137746
*/

/**
@fn uddi2__set_USCOREpublisherAssertions::uddi2__set_USCOREpublisherAssertions(struct soap *soap)
@brief
@param[in] soap gSOAP context

Creates an instance of the set_USCOREpublisherAssertions class.
*/

/**
@fn uddi2__set_USCOREpublisherAssertions::uddi2__set_USCOREpublisherAssertions(struct soap *soap, std::vector<uddi2__publisherAssertion*> publisherAssertions)
@brief
@param[in] soap gSOAP context
@param[in] publisherAssertions collection of publisher assertions

Creates an instance of the set_USCOREpublisherAssertions class using the
specified collection of publisher assertions.
*/

/**
@fn uddi2__publisherAssertions *uddi2__set_USCOREpublisherAssertions::send(const char *endpoint, char *authInfo)
@brief
@param[in] endpoint URL of the UDDI server
@param[in] authInfo authorization token provided by the UDDI server
@return A pointer to a uddi2__publisherAssertions object or NULL on error

Send a request to a UDDI server to post tModel information on the server.
*/

////////////////////////////////////////////////////////////////////////////////
//
//	Code Examples
//
////////////////////////////////////////////////////////////////////////////////

/**
@page example1 Code Example 1: Finding a service

This example shows you how to find Web services. In this case, the example
finds Web services with names that begin with the word "magic".

@code
#include "inqH.h"

int main(int argc, char **argv)
{ 
  char *search_string = "magic";

  if (argc > 1)
    search_string = argv[1];

  // Create a gSOAP context
  struct soap *soap = soap_new();

  // Create an object to find a business
  uddi2__find_USCOREservice fs(soap, search_string);

  // Send the request
  uddi2__serviceList *sl = fs.send("http://uddi.xmethods.net/inquire");

  // Check if result is OK
  if (!sl)
    soap_print_fault(soap, stderr);

  // If OK, report the service name(s) and unique identification keys
  else if (sl->serviceInfos)
  {
    std::cout << "Search results on " << search_string << ":" << std::endl << std::endl;

    for (std::vector<uddi2__serviceInfo*>::const_iterator si = sl->serviceInfos->serviceInfo.begin(); si != sl->serviceInfos->serviceInfo.end(); ++si)
    {
      // Report serviceKey and businessKey
      std::cout << "serviceKey=" << (*si)->serviceKey << std::endl << "businessKey=" << (*si)->businessKey << std::endl;

      // Report names
      for (std::vector<uddi2__name*>::const_iterator n = (*si)->name.begin(); n != (*si)->name.end(); ++n)
        std::cout << "name=" << (*n)->__item << std::endl;

      std::cout << std::endl;
    }
  }

  // Remove deserialized objects
  soap_destroy(soap);

  // Remove temporary data
  soap_end(soap);

  // Detach and free context
  soap_done(soap);
  free(soap);

  return 0;
}
@endcode

To compile:
- wsdl2h -tuddi2-typemap.dat inquire_v2.wsdl
- soapcpp2 -I.. -pinq inquire_v2.h
- g++ -DWITH_NONAMESPACES -I.. -o example1 example1.cpp inquire_v2.cpp inqC.cpp inqClient.cpp ../stdsoap2.cpp
*/

/**
@page example2 Code Example 2: Finding a business

This example shows you how to find a business from a UDDI server.

@code
#include "inqH.h"

int main(int argc, char **argv)
{ 
  char *search_string = "xmethods";

  if (argc > 1)
    search_string = argv[1];

  // Create a gSOAP context
  struct soap *soap = soap_new();

  // Create an object to find a business
  uddi2__find_USCOREbusiness fb(soap, search_string);

  // Send the request
  uddi2__businessList *bl = fb.send("http://uddi.xmethods.net/inquire");

  // Check if result is OK
  if (!bl)
    soap_print_fault(soap, stderr);

  // If OK, report the business name(s) and unique identification keys
  else if (bl->businessInfos)
  {
    std::cout << "Search results on " << search_string << ":" << std::endl << std::endl;

    for (std::vector<uddi2__businessInfo*>::const_iterator bi = bl->businessInfos->businessInfo.begin(); bi != bl->businessInfos->businessInfo.end(); ++bi)
    {
      // Report businessKey
      std::cout << "businessKey=" << (*bi)->businessKey << std::endl;

      // Report names
      for (std::vector<uddi2__name*>::const_iterator n = (*bi)->name.begin(); n != (*bi)->name.end(); ++n)
        std::cout << "name=" << (*n)->__item << std::endl;

      std::cout << std::endl;
    }
  }

  // Remove deserialized objects
  soap_destroy(soap);

  // Remove temporary data
  soap_end(soap);

  // Detach and free context
  soap_done(soap);
  free(soap);

  return 0;
}
@endcode

To compile:
- wsdl2h -tuddi2-typemap.dat inquire_v2.wsdl
- soapcpp2 -I.. -pinq inquire_v2.h
- g++ -DWITH_NONAMESPACES -I.. -o example2 example2.cpp inquire_v2.cpp inqC.cpp inqClient.cpp ../stdsoap2.cpp
*/
/**
@page example3 Code Example 3: Publishing a WSDL and service on XMethods

This example shows you how to publish a Web service. In this case, the example
template code obtains an authorization token, saves the tModel with the WSDL
URL in the server, and saves the business service information in the server.

@code
#include "pubH.h"

const char *server = "https://uddi.xmethods.net/publish";

const char *userid = "..."; // user ID to access UDDI server
const char *passwd = "..."; // password to access UDDI server

int main(int argc, char **argv)
{ 
  // Create a gSOAP context
  struct soap *soap = soap_new();

  // Setup SSL context (optional) to verify server's credentials
  if (soap_ssl_client_context(soap, SOAP_SSL_DEFAULT, NULL, NULL, "cacerts.pem", NULL, NULL))
  { 
    soap_print_fault(soap, stderr);
    exit(1);
  }

  // Step 1: Get an authorization token from the UDDI server
  uddi2__get_USCOREauthToken get_authToken(soap, userid, passwd);
  uddi2__authToken *authToken = get_authToken.send(server);

  // Check if authorized
  if (!authToken)
  {
    soap_print_fault(soap, stderr);
    exit(1);
  }

  // Authorization info provided by server for this session
  char *authInfo = authToken->authInfo;

  // Step 2: Create a tModel for the WSDL to be published
  uddi2__tModel tModel;
  tModel.soap_default(soap);

  // Create the tModel and service name
  tModel.name = soap_new_uddi2__name(soap, -1);
  tModel.name->__item = "...";
  tModel.name->xml__lang_ = "en";

  // Create XMethods description elements (see http://www.xmethods.net/ve2/UDDI.po)
  uddi2__description *description = soap_new_uddi2__description(soap, 6);
  description[0].__item = "SHORT DESCRIPTION: ...";
  description[0].xml__lang_ = "en";
  description[1].__item = "SHORT DESCRIPTION: ...";
  description[1].xml__lang_ = "en";
  description[2].__item = "USAGE NOTES: ...";
  description[2].xml__lang_ = "en";
  description[3].__item = "HOMEPAGE URL: ...";
  description[3].xml__lang_ = "en";
  description[4].__item = "CONTACT EMAIL: ...";
  description[4].xml__lang_ = "en";
  description[5].__item = "IMPLEMENTATION: ...";
  description[5].xml__lang_ = "en";

  // Add the four description elements to the tModel
  tModel.description.push_back(description + 0);
  tModel.description.push_back(description + 1);
  tModel.description.push_back(description + 2);
  tModel.description.push_back(description + 4);

  // Add an overviewDoc element with description and overviewURL
  tModel.overviewDoc = soap_new_uddi2__overviewDoc(soap, -1);
  tModel.overviewDoc->soap_default(soap);
  tModel.overviewDoc->description.push_back(soap_new_uddi2__description(soap, -1));
  tModel.overviewDoc->description[0]->__item = "WSDL source document";
  tModel.overviewDoc->description[0]->xml__lang_ = "en";
  tModel.overviewDoc->overviewURL = "http://.../my.wsdl#bindingName";

  // Omit identifier bag
  tModel.identifierBag = NULL;

  // Add a category with a WSDL-specific keyedReference
  tModel.categoryBag = soap_new_uddi2__categoryBag(soap, -1);
  tModel.categoryBag->soap_default(soap);
  tModel.categoryBag->keyedReference.push_back(soap_new_uddi2__keyedReference(soap, -1));
  tModel.categoryBag->keyedReference[0]->tModelKey = "...";
  tModel.categoryBag->keyedReference[0]->keyName = "uddi-org:types";
  tModel.categoryBag->keyedReference[0]->keyValue = "wsdlSpec";

  tModel.authorizedName = "...";
  tModel.operator_ = "...";
  tModel.tModelKey = "...";

  // Save the tModel
  uddi2__save_USCOREtModel save_tModel(soap, tModel);
  uddi2__tModelDetail *tModelDetail = save_tModel.send(server, authInfo);

  // Step 3: Create a new service to be published
  uddi2__businessService service;
  service.soap_default(soap);

  // Service name is the tModel name (XMethods)
  service.name.push_back(tModel.name);

  // Add two description elements to the service
  service.description.push_back(description + 4);
  service.description.push_back(description + 5);

  // Create binding template
  uddi2__bindingTemplate bindingTemplate;
  bindingTemplate.soap_default(soap);
  bindingTemplate.tModelInstanceDetails = soap_new_uddi2__tModelInstanceDetails(soap, -1);
  bindingTemplate.tModelInstanceDetails->tModelInstanceInfo.push_back(soap_new_uddi2__tModelInstanceInfo(soap, -1));
  bindingTemplate.tModelInstanceDetails->tModelInstanceInfo[0]->instanceDetails = NULL;
  bindingTemplate.tModelInstanceDetails->tModelInstanceInfo[0]->tModelKey = tModel.tModelKey;
  bindingTemplate.accessPoint = soap_new_uddi2__accessPoint(soap, -1);
  bindingTemplate.accessPoint->__item = "...";
  bindingTemplate.accessPoint->URLType = uddi2__URLType__http;
  bindingTemplate.hostingRedirector = NULL;
  bindingTemplate.serviceKey = "...";
  bindingTemplate.bindingKey = "...";

  // Add binding Template to service
  service.bindingTemplates = soap_new_uddi2__bindingTemplates(soap, -1);
  service.bindingTemplates->soap_default(soap);
  service.bindingTemplates->bindingTemplate.push_back(&bindingTemplate);

  service.categoryBag = NULL;
  service.serviceKey = "...";
  service.businessKey = "...";

  // Save the service
  uddi2__save_USCOREservice save_service(soap, service);
  uddi2__serviceDetail *serviceDetail = save_service.send(server, authInfo);

  // Step 4: Discard authorization token
  uddi2__discard_USCOREauthToken discard_authToken(soap, authInfo);
  uddi2__dispositionReport *dispositionReport = discard_authToken.send(server);

  // Remove deserialized objects
  soap_destroy(soap);

  // Remove temporary data
  soap_end(soap);

  // Detach and free context
  soap_done(soap);
  free(soap);

  return 0;
}
@endcode
To compile:
- wsdl2h -tuddi2-typemap.dat publish_v2.wsdl
- soapcpp2 -I.. -ppub publish_v2.h
- g++ -DWITH_OPENSSL -DWITH_NONAMESPACES -I.. -o example3 example3.cpp publish_v2.cpp pubC.cpp pubClient.cpp ../stdsoap2.cpp
*/
]

################################################################################
#
#	UDDI v2 XML namespaces
#
################################################################################

inq2	= "urn:uddi-org:inquiry_v2"
pub2	= "urn:uddi-org:publication_v2"
uddi2	= "urn:uddi-org:api_v2"

################################################################################
#
#	Type Definitions
#
################################################################################

#	Use regular C strings only:

xsd__string	= | char* | char*

################################################################################
#
#	Class/Struct Extensions
#
################################################################################

#	uddi2:find_binding object extended with con/de-structors and send()

uddi2__find_USCOREbinding = $ uddi2__find_USCOREbinding(struct soap*);

uddi2__find_USCOREbinding = $ uddi2__find_USCOREbinding(struct soap*, const char *tModelKey);

uddi2__find_USCOREbinding = $ uddi2__find_USCOREbinding(struct soap*, std::vector<char*> tModelKeys);

uddi2__find_USCOREbinding = $ uddi2__bindingDetail *send(const char *endpoint);

#	uddi2:find_business object extended with con/de-structors and send()

uddi2__find_USCOREbusiness = $ uddi2__find_USCOREbusiness(struct soap*);

uddi2__find_USCOREbusiness = $ uddi2__find_USCOREbusiness(struct soap*, const char *name);

uddi2__find_USCOREbusiness = $ uddi2__find_USCOREbusiness(struct soap*, std::vector<char*> tModelKeys);

uddi2__find_USCOREbusiness = $ uddi2__find_USCOREbusiness(struct soap*, std::vector<uddi2__keyedReference*> keyedReferences);

uddi2__find_USCOREbusiness = $ uddi2__businessList *send(const char *endpoint);

#	uddi2:find_relatedBusinesses object extended with con/de-structors and send()

uddi2__find_USCORErelatedBusinesses = $ uddi2__find_USCORErelatedBusinesses(struct soap*);

uddi2__find_USCORErelatedBusinesses = $ uddi2__find_USCORErelatedBusinesses(struct soap*, const char *businessKey);

uddi2__find_USCORErelatedBusinesses = $ uddi2__relatedBusinessesList *send(const char *endpoint);

#	uddi2:find_service object extended with con/de-structors and send()

uddi2__find_USCOREservice = $ uddi2__find_USCOREservice(struct soap*);

uddi2__find_USCOREservice = $ uddi2__find_USCOREservice(struct soap*, const char *name);

uddi2__find_USCOREservice = $ uddi2__find_USCOREservice(struct soap*, std::vector<char*> tModelKeys);

uddi2__find_USCOREservice = $ uddi2__find_USCOREservice(struct soap*, std::vector<uddi2__keyedReference*> keyedReferences);

uddi2__find_USCOREservice = $ uddi2__serviceList* send(const char *endpoint);

#	uddi2:find_tModel object extended with con/de-structors and send()

uddi2__find_USCOREtModel = $ uddi2__find_USCOREtModel(struct soap*);

uddi2__find_USCOREtModel = $ uddi2__find_USCOREtModel(struct soap*, const char *name);

uddi2__find_USCOREtModel = $ uddi2__find_USCOREtModel(struct soap*, std::vector<uddi2__keyedReference*> keyedReferences);

uddi2__find_USCOREtModel = $ uddi2__tModelList* send(const char *endpoint);

#	uddi2:get_bindingDetail object extended with con/de-structors and send()

uddi2__get_USCOREbindingDetail = $ uddi2__get_USCOREbindingDetail(struct soap*);

uddi2__get_USCOREbindingDetail = $ uddi2__get_USCOREbindingDetail(struct soap*, const char *bindingKey);

uddi2__get_USCOREbindingDetail = $ uddi2__get_USCOREbindingDetail(struct soap*, std::vector<char*> bindingKeys);

uddi2__get_USCOREbindingDetail = $ uddi2__bindingDetail* send(const char *endpoint);

#	uddi2:get_businessDetail object extended with con/de-structors and send()

uddi2__get_USCOREbusinessDetail = $ uddi2__get_USCOREbusinessDetail(struct soap*);

uddi2__get_USCOREbusinessDetail = $ uddi2__get_USCOREbusinessDetail(struct soap*, const char *businessKey);

uddi2__get_USCOREbusinessDetail = $ uddi2__get_USCOREbusinessDetail(struct soap*, std::vector<char*> businessKeys);

uddi2__get_USCOREbusinessDetail = $ uddi2__businessDetail* send(const char *endpoint);

#	uddi2:get_businessDetailExt object extended with con/de-structors and send()

uddi2__get_USCOREbusinessDetailExt = $ uddi2__get_USCOREbusinessDetailExt(struct soap*);

uddi2__get_USCOREbusinessDetailExt = $ uddi2__get_USCOREbusinessDetailExt(struct soap*, const char *businessKey);

uddi2__get_USCOREbusinessDetailExt = $ uddi2__get_USCOREbusinessDetailExt(struct soap*, std::vector<char*> businessKeys);

uddi2__get_USCOREbusinessDetailExt = $ uddi2__businessDetailExt* send(const char *endpoint);

#	uddi2:get_serviceDetail object extended with con/de-structors and send()

uddi2__get_USCOREserviceDetail = $ uddi2__get_USCOREserviceDetail(struct soap*);

uddi2__get_USCOREserviceDetail = $ uddi2__get_USCOREserviceDetail(struct soap*, const char *serviceKey);

uddi2__get_USCOREserviceDetail = $ uddi2__get_USCOREserviceDetail(struct soap*, std::vector<char*> serviceKeys);

uddi2__get_USCOREserviceDetail = $ uddi2__serviceDetail* send(const char *endpoint);

#	uddi2:get_tModelDetail object extended with con/de-structors and send()

uddi2__get_USCOREtModelDetail = $ uddi2__get_USCOREtModelDetail(struct soap*);

uddi2__get_USCOREtModelDetail = $ uddi2__get_USCOREtModelDetail(struct soap*, const char *tModelKey);

uddi2__get_USCOREtModelDetail = $ uddi2__get_USCOREtModelDetail(struct soap*, std::vector<char*> tModelKeys);

uddi2__get_USCOREtModelDetail = $ uddi2__tModelDetail* send(const char *endpoint);

#	uddi2:add_publisherAssertions object extended with con/de-structors and send()

uddi2__add_USCOREpublisherAssertions = $ uddi2__add_USCOREpublisherAssertions(struct soap*);

uddi2__add_USCOREpublisherAssertions = $ uddi2__add_USCOREpublisherAssertions(struct soap*, std::vector<uddi2__publisherAssertion*> publisherAssertions);

uddi2__add_USCOREpublisherAssertions = $ uddi2__dispositionReport* send(const char *endpoint, char *authInfo);

#	uddi2:delete_binding object extended with con/de-structors and send()

uddi2__delete_USCOREbinding = $ uddi2__delete_USCOREbinding(struct soap*);

uddi2__delete_USCOREbinding = $ uddi2__delete_USCOREbinding(struct soap*, const char *bindingKey);

uddi2__delete_USCOREbinding = $ uddi2__delete_USCOREbinding(struct soap*, std::vector<char*> bindingKeys);

uddi2__delete_USCOREbinding = $ uddi2__dispositionReport* send(const char *endpoint, char *authInfo);

#	uddi2:delete_business object extended with con/de-structors and send()

uddi2__delete_USCOREbusiness = $ uddi2__delete_USCOREbusiness(struct soap*);

uddi2__delete_USCOREbusiness = $ uddi2__delete_USCOREbusiness(struct soap*, const char *businessKey);

uddi2__delete_USCOREbusiness = $ uddi2__delete_USCOREbusiness(struct soap*, std::vector<char*> businessKeys);

uddi2__delete_USCOREbusiness = $ uddi2__dispositionReport* send(const char *endpoint, char *authInfo);

#	uddi2:delete_service object extended with con/de-structors and send()

uddi2__delete_USCOREservice = $ uddi2__delete_USCOREservice(struct soap*);

uddi2__delete_USCOREservice = $ uddi2__delete_USCOREservice(struct soap*, const char *serviceKey);

uddi2__delete_USCOREservice = $ uddi2__delete_USCOREservice(struct soap*, std::vector<char*> serviceKeys);

uddi2__delete_USCOREservice = $ uddi2__dispositionReport* send(const char *endpoint, char *authInfo);

#	uddi2:delete_tModel object extended with con/de-structors and send()

uddi2__delete_USCOREtModel = $ uddi2__delete_USCOREtModel(struct soap*);

uddi2__delete_USCOREtModel = $ uddi2__delete_USCOREtModel(struct soap*, const char *tModelKey);

uddi2__delete_USCOREtModel = $ uddi2__delete_USCOREtModel(struct soap*, std::vector<char*> tModelKeys);

uddi2__delete_USCOREtModel = $ uddi2__dispositionReport* send(const char *endpoint, char *authInfo);

#	uddi2:delete_publisherAssertions object extended with con/de-structors and send()

uddi2__delete_USCOREpublisherAssertions = $ uddi2__delete_USCOREpublisherAssertions(struct soap*);

uddi2__delete_USCOREpublisherAssertions = $ uddi2__delete_USCOREpublisherAssertions(struct soap*, std::vector<uddi2__publisherAssertion*> publisherAssertions);

uddi2__delete_USCOREpublisherAssertions = $ uddi2__dispositionReport* send(const char *endpoint, char *authInfo);

#	uddi2:discard_authToken object extended with con/de-structors and send()

uddi2__discard_USCOREauthToken = $ uddi2__discard_USCOREauthToken(struct soap*);

uddi2__discard_USCOREauthToken = $ uddi2__discard_USCOREauthToken(struct soap*, const char *authInfo);

uddi2__discard_USCOREauthToken = $ uddi2__dispositionReport* send(const char *endpoint);

#	uddi2:get_assertionStatusReport object extended with con/de-structors and send()

uddi2__get_USCOREassertionStatusReport = $ uddi2__get_USCOREassertionStatusReport(struct soap*);

uddi2__get_USCOREassertionStatusReport = $ uddi2__get_USCOREassertionStatusReport(struct soap*, const char *completionStatus);

uddi2__get_USCOREassertionStatusReport = $ uddi2__assertionStatusReport* send(const char *endpoint, char *authInfo);

#	uddi2:get_authToken object extended with con/de-structors and send()

uddi2__get_USCOREauthToken = $ uddi2__get_USCOREauthToken(struct soap*);

uddi2__get_USCOREauthToken = $ uddi2__get_USCOREauthToken(struct soap*, const char *userid, const char *passwd);

uddi2__get_USCOREauthToken = $ uddi2__authToken* send(const char *endpoint);

#	uddi2:get_publisherAssertions object extended with con/de-structors and send()

uddi2__get_USCOREpublisherAssertions = $ uddi2__get_USCOREpublisherAssertions(struct soap*);

uddi2__get_USCOREpublisherAssertions = $ uddi2__publisherAssertions* send(const char *endpoint, char *authInfo);

#	uddi2:get_registeredInfo object extended with con/de-structors and send()

uddi2__get_USCOREregisteredInfo = $ uddi2__get_USCOREregisteredInfo(struct soap*);

uddi2__get_USCOREregisteredInfo = $ uddi2__registeredInfo* send(const char *endpoint, char *authInfo);

#	uddi2:save_binding object extended with con/de-structors and send()

uddi2__save_USCOREbinding = $ uddi2__save_USCOREbinding(struct soap*);

uddi2__save_USCOREbinding = $ uddi2__save_USCOREbinding(struct soap*, uddi2__bindingTemplate &bindingTemplate);

uddi2__save_USCOREbinding = $ uddi2__save_USCOREbinding(struct soap*, std::vector<uddi2__bindingTemplate*> bindingTemplates);

uddi2__save_USCOREbinding = $ uddi2__bindingDetail* send(const char *endpoint, char *authInfo);

#	uddi2:save_business object extended with con/de-structors and send()

uddi2__save_USCOREbusiness = $ uddi2__save_USCOREbusiness(struct soap*);

uddi2__save_USCOREbusiness = $ uddi2__save_USCOREbusiness(struct soap*, uddi2__businessEntity &businessEntity);

uddi2__save_USCOREbusiness = $ uddi2__save_USCOREbusiness(struct soap*, std::vector<uddi2__businessEntity*> businessEntities);

uddi2__save_USCOREbusiness = $ uddi2__businessDetail* send(const char *endpoint, char *authInfo);

#	uddi2:save_service object extended with con/de-structors and send()

uddi2__save_USCOREservice = $ uddi2__save_USCOREservice(struct soap*);

uddi2__save_USCOREservice = $ uddi2__save_USCOREservice(struct soap*, uddi2__businessService &businessService);

uddi2__save_USCOREservice = $ uddi2__save_USCOREservice(struct soap*, std::vector<uddi2__businessService*> businessServices);

uddi2__save_USCOREservice = $ uddi2__serviceDetail* send(const char *endpoint, char *authInfo);

#	uddi2:save_tModel object extended with con/de-structors and send()

uddi2__save_USCOREtModel = $ uddi2__save_USCOREtModel(struct soap*);

uddi2__save_USCOREtModel = $ uddi2__save_USCOREtModel(struct soap*, uddi2__tModel &tModel);

uddi2__save_USCOREtModel = $ uddi2__save_USCOREtModel(struct soap*, std::vector<uddi2__tModel*> tModels);

uddi2__save_USCOREtModel = $ uddi2__tModelDetail* send(const char *endpoint, char *authInfo);

#	uddi2:set_publisherAssertions object extended with con/de-structors and send()

uddi2__set_USCOREpublisherAssertions = $ uddi2__set_USCOREpublisherAssertions(struct soap*);

uddi2__set_USCOREpublisherAssertions = $ uddi2__set_USCOREpublisherAssertions(struct soap*, std::vector<uddi2__publisherAssertion*> publisherAssertions);

uddi2__set_USCOREpublisherAssertions = $ uddi2__publisherAssertions* send(const char *endpoint, char *authInfo);

