/* wsdlH.h
   Generated by gSOAP 2.8.17r from ./wsdl.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef wsdlH_H
#define wsdlH_H
#include "wsdlStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 wsdl_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 wsdl_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 wsdl_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_sd__mutability
#define SOAP_TYPE_sd__mutability (264)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_sd__mutability(struct soap*, enum sd__mutability *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_sd__mutability(struct soap*, const char*, int, const enum sd__mutability *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_sd__mutability2s(struct soap*, enum sd__mutability);
SOAP_FMAC3 enum sd__mutability * SOAP_FMAC4 soap_in_sd__mutability(struct soap*, const char*, enum sd__mutability *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2sd__mutability(struct soap*, const char*, enum sd__mutability *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_sd__mutability(struct soap*, const enum sd__mutability *, const char*, const char*);

#ifndef soap_write_sd__mutability
#define soap_write_sd__mutability(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_sd__mutability(soap, data),0) || soap_put_sd__mutability(soap, data, "sd:mutability", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum sd__mutability * SOAP_FMAC4 soap_get_sd__mutability(struct soap*, enum sd__mutability *, const char*, const char*);

#ifndef soap_read_sd__mutability
#define soap_read_sd__mutability(soap, data) ( soap_begin_recv(soap) || !soap_get_sd__mutability(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_soap__useChoice
#define SOAP_TYPE_soap__useChoice (221)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap__useChoice(struct soap*, enum soap__useChoice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap__useChoice(struct soap*, const char*, int, const enum soap__useChoice *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_soap__useChoice2s(struct soap*, enum soap__useChoice);
SOAP_FMAC3 enum soap__useChoice * SOAP_FMAC4 soap_in_soap__useChoice(struct soap*, const char*, enum soap__useChoice *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2soap__useChoice(struct soap*, const char*, enum soap__useChoice *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap__useChoice(struct soap*, const enum soap__useChoice *, const char*, const char*);

#ifndef soap_write_soap__useChoice
#define soap_write_soap__useChoice(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_soap__useChoice(soap, data),0) || soap_put_soap__useChoice(soap, data, "soap:useChoice", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum soap__useChoice * SOAP_FMAC4 soap_get_soap__useChoice(struct soap*, enum soap__useChoice *, const char*, const char*);

#ifndef soap_read_soap__useChoice
#define soap_read_soap__useChoice(soap, data) ( soap_begin_recv(soap) || !soap_get_soap__useChoice(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_soap__styleChoice
#define SOAP_TYPE_soap__styleChoice (217)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap__styleChoice(struct soap*, enum soap__styleChoice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap__styleChoice(struct soap*, const char*, int, const enum soap__styleChoice *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_soap__styleChoice2s(struct soap*, enum soap__styleChoice);
SOAP_FMAC3 enum soap__styleChoice * SOAP_FMAC4 soap_in_soap__styleChoice(struct soap*, const char*, enum soap__styleChoice *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2soap__styleChoice(struct soap*, const char*, enum soap__styleChoice *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap__styleChoice(struct soap*, const enum soap__styleChoice *, const char*, const char*);

#ifndef soap_write_soap__styleChoice
#define soap_write_soap__styleChoice(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_soap__styleChoice(soap, data),0) || soap_put_soap__styleChoice(soap, data, "soap:styleChoice", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum soap__styleChoice * SOAP_FMAC4 soap_get_soap__styleChoice(struct soap*, enum soap__styleChoice *, const char*, const char*);

#ifndef soap_read_soap__styleChoice
#define soap_read_soap__styleChoice(soap, data) ( soap_begin_recv(soap) || !soap_get_soap__styleChoice(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xs__processContents
#define SOAP_TYPE_xs__processContents (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xs__processContents(struct soap*, enum xs__processContents *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__processContents(struct soap*, const char*, int, const enum xs__processContents *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xs__processContents2s(struct soap*, enum xs__processContents);
SOAP_FMAC3 enum xs__processContents * SOAP_FMAC4 soap_in_xs__processContents(struct soap*, const char*, enum xs__processContents *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xs__processContents(struct soap*, const char*, enum xs__processContents *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xs__processContents(struct soap*, const enum xs__processContents *, const char*, const char*);

#ifndef soap_write_xs__processContents
#define soap_write_xs__processContents(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xs__processContents(soap, data),0) || soap_put_xs__processContents(soap, data, "xs:processContents", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum xs__processContents * SOAP_FMAC4 soap_get_xs__processContents(struct soap*, enum xs__processContents *, const char*, const char*);

#ifndef soap_read_xs__processContents
#define soap_read_xs__processContents(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__processContents(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xs__attribute_use
#define SOAP_TYPE_xs__attribute_use (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xs__attribute_use(struct soap*, enum xs__attribute_use *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__attribute_use(struct soap*, const char*, int, const enum xs__attribute_use *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xs__attribute_use2s(struct soap*, enum xs__attribute_use);
SOAP_FMAC3 enum xs__attribute_use * SOAP_FMAC4 soap_in_xs__attribute_use(struct soap*, const char*, enum xs__attribute_use *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xs__attribute_use(struct soap*, const char*, enum xs__attribute_use *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xs__attribute_use(struct soap*, const enum xs__attribute_use *, const char*, const char*);

#ifndef soap_write_xs__attribute_use
#define soap_write_xs__attribute_use(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xs__attribute_use(soap, data),0) || soap_put_xs__attribute_use(soap, data, "xs:attribute-use", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum xs__attribute_use * SOAP_FMAC4 soap_get_xs__attribute_use(struct soap*, enum xs__attribute_use *, const char*, const char*);

#ifndef soap_read_xs__attribute_use
#define soap_read_xs__attribute_use(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__attribute_use(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xs__formChoice
#define SOAP_TYPE_xs__formChoice (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xs__formChoice(struct soap*, enum xs__formChoice *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__formChoice(struct soap*, const char*, int, const enum xs__formChoice *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xs__formChoice2s(struct soap*, enum xs__formChoice);
SOAP_FMAC3 enum xs__formChoice * SOAP_FMAC4 soap_in_xs__formChoice(struct soap*, const char*, enum xs__formChoice *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xs__formChoice(struct soap*, const char*, enum xs__formChoice *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xs__formChoice(struct soap*, const enum xs__formChoice *, const char*, const char*);

#ifndef soap_write_xs__formChoice
#define soap_write_xs__formChoice(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xs__formChoice(soap, data),0) || soap_put_xs__formChoice(soap, data, "xs:formChoice", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum xs__formChoice * SOAP_FMAC4 soap_get_xs__formChoice(struct soap*, enum xs__formChoice *, const char*, const char*);

#ifndef soap_read_xs__formChoice
#define soap_read_xs__formChoice(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__formChoice(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (16)
#endif

#define soap_default_xsd__boolean(soap, a) soap_default_bool(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__boolean2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__boolean(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__boolean(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_xsd__boolean
#define soap_write_xsd__boolean(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__boolean(soap, data),0) || soap_put_xsd__boolean(soap, data, "xsd:boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_xsd__boolean
#define soap_read_xsd__boolean(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__boolean(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data),0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_wsdl__service
#define SOAP_TYPE_wsdl__service (409)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__service(struct soap*, const char*, int, const wsdl__service *, const char*);
SOAP_FMAC3 wsdl__service * SOAP_FMAC4 soap_in_wsdl__service(struct soap*, const char*, wsdl__service *, const char*);

#ifndef soap_write_wsdl__service
#define soap_write_wsdl__service(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsdl:service", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__service * SOAP_FMAC4 soap_get_wsdl__service(struct soap*, wsdl__service *, const char*, const char*);

#ifndef soap_read_wsdl__service
#define soap_read_wsdl__service(soap, data) ( soap_begin_recv(soap) || !soap_get_wsdl__service(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsdl__service * SOAP_FMAC2 soap_instantiate_wsdl__service(struct soap*, int, const char*, const char*, size_t*);

inline wsdl__service * soap_new_wsdl__service(struct soap *soap, int n = -1) { return soap_instantiate_wsdl__service(soap, n, NULL, NULL, NULL); }

inline wsdl__service * soap_new_req_wsdl__service(struct soap *soap) { wsdl__service *_p = soap_instantiate_wsdl__service(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsdl__service * soap_new_set_wsdl__service(struct soap *soap, char *name, char *interface_, char *documentation, std::vector<wsp__Policy >& wsp__Policy_, std::vector<wsp__PolicyReference >& wsp__PolicyReference_, std::vector<wsdl__port >& port, std::vector<wsdl__port >& endpoint) { wsdl__service *_p = soap_instantiate_wsdl__service(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__service::name = name; _p->wsdl__service::interface_ = interface_; _p->wsdl__service::documentation = documentation; _p->wsdl__service::wsp__Policy_ = wsp__Policy_; _p->wsdl__service::wsp__PolicyReference_ = wsp__PolicyReference_; _p->wsdl__service::port = port; _p->wsdl__service::endpoint = endpoint; } return _p; }

inline void soap_delete_wsdl__service(struct soap *soap, wsdl__service *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__service(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsdl__port
#define SOAP_TYPE_wsdl__port (400)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__port(struct soap*, const char*, int, const wsdl__port *, const char*);
SOAP_FMAC3 wsdl__port * SOAP_FMAC4 soap_in_wsdl__port(struct soap*, const char*, wsdl__port *, const char*);

#ifndef soap_write_wsdl__port
#define soap_write_wsdl__port(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsdl:port", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__port * SOAP_FMAC4 soap_get_wsdl__port(struct soap*, wsdl__port *, const char*, const char*);

#ifndef soap_read_wsdl__port
#define soap_read_wsdl__port(soap, data) ( soap_begin_recv(soap) || !soap_get_wsdl__port(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsdl__port * SOAP_FMAC2 soap_instantiate_wsdl__port(struct soap*, int, const char*, const char*, size_t*);

inline wsdl__port * soap_new_wsdl__port(struct soap *soap, int n = -1) { return soap_instantiate_wsdl__port(soap, n, NULL, NULL, NULL); }

inline wsdl__port * soap_new_req_wsdl__port(struct soap *soap) { wsdl__port *_p = soap_instantiate_wsdl__port(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsdl__port * soap_new_set_wsdl__port(struct soap *soap, char *name, char *binding, char *address, char *whttp__authenticationScheme, char *whttp__authenticationRealm, char *documentation, wsp__Policy *wsp__Policy_, wsp__PolicyReference *wsp__PolicyReference_, wsa__EndpointReferenceType *wsa__EndpointReference, soap__address *soap__address_, http__address *http__address_) { wsdl__port *_p = soap_instantiate_wsdl__port(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__port::name = name; _p->wsdl__port::binding = binding; _p->wsdl__port::address = address; _p->wsdl__port::whttp__authenticationScheme = whttp__authenticationScheme; _p->wsdl__port::whttp__authenticationRealm = whttp__authenticationRealm; _p->wsdl__port::documentation = documentation; _p->wsdl__port::wsp__Policy_ = wsp__Policy_; _p->wsdl__port::wsp__PolicyReference_ = wsp__PolicyReference_; _p->wsdl__port::wsa__EndpointReference = wsa__EndpointReference; _p->wsdl__port::soap__address_ = soap__address_; _p->wsdl__port::http__address_ = http__address_; } return _p; }

inline void soap_delete_wsdl__port(struct soap *soap, wsdl__port *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__port(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsdl__binding
#define SOAP_TYPE_wsdl__binding (391)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__binding(struct soap*, const char*, int, const wsdl__binding *, const char*);
SOAP_FMAC3 wsdl__binding * SOAP_FMAC4 soap_in_wsdl__binding(struct soap*, const char*, wsdl__binding *, const char*);

#ifndef soap_write_wsdl__binding
#define soap_write_wsdl__binding(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsdl:binding", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__binding * SOAP_FMAC4 soap_get_wsdl__binding(struct soap*, wsdl__binding *, const char*, const char*);

#ifndef soap_read_wsdl__binding
#define soap_read_wsdl__binding(soap, data) ( soap_begin_recv(soap) || !soap_get_wsdl__binding(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsdl__binding * SOAP_FMAC2 soap_instantiate_wsdl__binding(struct soap*, int, const char*, const char*, size_t*);

inline wsdl__binding * soap_new_wsdl__binding(struct soap *soap, int n = -1) { return soap_instantiate_wsdl__binding(soap, n, NULL, NULL, NULL); }

inline wsdl__binding * soap_new_req_wsdl__binding(struct soap *soap) { wsdl__binding *_p = soap_instantiate_wsdl__binding(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsdl__binding * soap_new_set_wsdl__binding(struct soap *soap, char *name, char *type, char *type_, char *interface_, bool whttp__cookies, char *wsoap__version, char *wsoap__protocol, char *wsoap__mepDefault, char *whttp__methodDefault, char *documentation, std::vector<wsp__Policy >& wsp__Policy_, std::vector<wsp__PolicyReference >& wsp__PolicyReference_, soap__binding *soap__binding_, http__binding *http__binding_, std::vector<wsoap__module >& wsoap__module_, std::vector<wsdl__ext_fault >& fault, std::vector<wsdl__ext_operation >& operation) { wsdl__binding *_p = soap_instantiate_wsdl__binding(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__binding::name = name; _p->wsdl__binding::type = type; _p->wsdl__binding::type_ = type_; _p->wsdl__binding::interface_ = interface_; _p->wsdl__binding::whttp__cookies = whttp__cookies; _p->wsdl__binding::wsoap__version = wsoap__version; _p->wsdl__binding::wsoap__protocol = wsoap__protocol; _p->wsdl__binding::wsoap__mepDefault = wsoap__mepDefault; _p->wsdl__binding::whttp__methodDefault = whttp__methodDefault; _p->wsdl__binding::documentation = documentation; _p->wsdl__binding::wsp__Policy_ = wsp__Policy_; _p->wsdl__binding::wsp__PolicyReference_ = wsp__PolicyReference_; _p->wsdl__binding::soap__binding_ = soap__binding_; _p->wsdl__binding::http__binding_ = http__binding_; _p->wsdl__binding::wsoap__module_ = wsoap__module_; _p->wsdl__binding::fault = fault; _p->wsdl__binding::operation = operation; } return _p; }

inline void soap_delete_wsdl__binding(struct soap *soap, wsdl__binding *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__binding(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsdl__ext_operation
#define SOAP_TYPE_wsdl__ext_operation (381)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__ext_operation(struct soap*, const char*, int, const wsdl__ext_operation *, const char*);
SOAP_FMAC3 wsdl__ext_operation * SOAP_FMAC4 soap_in_wsdl__ext_operation(struct soap*, const char*, wsdl__ext_operation *, const char*);

#ifndef soap_write_wsdl__ext_operation
#define soap_write_wsdl__ext_operation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsdl:ext-operation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__ext_operation * SOAP_FMAC4 soap_get_wsdl__ext_operation(struct soap*, wsdl__ext_operation *, const char*, const char*);

#ifndef soap_read_wsdl__ext_operation
#define soap_read_wsdl__ext_operation(soap, data) ( soap_begin_recv(soap) || !soap_get_wsdl__ext_operation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsdl__ext_operation * SOAP_FMAC2 soap_instantiate_wsdl__ext_operation(struct soap*, int, const char*, const char*, size_t*);

inline wsdl__ext_operation * soap_new_wsdl__ext_operation(struct soap *soap, int n = -1) { return soap_instantiate_wsdl__ext_operation(soap, n, NULL, NULL, NULL); }

inline wsdl__ext_operation * soap_new_req_wsdl__ext_operation(struct soap *soap) { wsdl__ext_operation *_p = soap_instantiate_wsdl__ext_operation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsdl__ext_operation * soap_new_set_wsdl__ext_operation(struct soap *soap, char *name, char *ref, char *wsoap__mep, char *wsoap__action, char *whttp__method, char *whttp__location, char *documentation, wsp__Policy *wsp__Policy_, wsp__PolicyReference *wsp__PolicyReference_, soap__operation *soap__operation_, http__operation *http__operation_, wsdl__ext_ioput *input, wsdl__ext_ioput *output, std::vector<wsdl__ext_fault >& fault, std::vector<wsdl__ext_fault >& infault, std::vector<wsdl__ext_fault >& outfault) { wsdl__ext_operation *_p = soap_instantiate_wsdl__ext_operation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__ext_operation::name = name; _p->wsdl__ext_operation::ref = ref; _p->wsdl__ext_operation::wsoap__mep = wsoap__mep; _p->wsdl__ext_operation::wsoap__action = wsoap__action; _p->wsdl__ext_operation::whttp__method = whttp__method; _p->wsdl__ext_operation::whttp__location = whttp__location; _p->wsdl__ext_operation::documentation = documentation; _p->wsdl__ext_operation::wsp__Policy_ = wsp__Policy_; _p->wsdl__ext_operation::wsp__PolicyReference_ = wsp__PolicyReference_; _p->wsdl__ext_operation::soap__operation_ = soap__operation_; _p->wsdl__ext_operation::http__operation_ = http__operation_; _p->wsdl__ext_operation::input = input; _p->wsdl__ext_operation::output = output; _p->wsdl__ext_operation::fault = fault; _p->wsdl__ext_operation::infault = infault; _p->wsdl__ext_operation::outfault = outfault; } return _p; }

inline void soap_delete_wsdl__ext_operation(struct soap *soap, wsdl__ext_operation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__ext_operation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsdl__ext_fault
#define SOAP_TYPE_wsdl__ext_fault (372)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__ext_fault(struct soap*, const char*, int, const wsdl__ext_fault *, const char*);
SOAP_FMAC3 wsdl__ext_fault * SOAP_FMAC4 soap_in_wsdl__ext_fault(struct soap*, const char*, wsdl__ext_fault *, const char*);

#ifndef soap_write_wsdl__ext_fault
#define soap_write_wsdl__ext_fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsdl:ext-fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__ext_fault * SOAP_FMAC4 soap_get_wsdl__ext_fault(struct soap*, wsdl__ext_fault *, const char*, const char*);

#ifndef soap_read_wsdl__ext_fault
#define soap_read_wsdl__ext_fault(soap, data) ( soap_begin_recv(soap) || !soap_get_wsdl__ext_fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsdl__ext_fault * SOAP_FMAC2 soap_instantiate_wsdl__ext_fault(struct soap*, int, const char*, const char*, size_t*);

inline wsdl__ext_fault * soap_new_wsdl__ext_fault(struct soap *soap, int n = -1) { return soap_instantiate_wsdl__ext_fault(soap, n, NULL, NULL, NULL); }

inline wsdl__ext_fault * soap_new_req_wsdl__ext_fault(struct soap *soap) { wsdl__ext_fault *_p = soap_instantiate_wsdl__ext_fault(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsdl__ext_fault * soap_new_set_wsdl__ext_fault(struct soap *soap, char *name, char *ref, char *messageLabel, char *wsoap__code, char *wsoap__subcodes, char *documentation, wsp__Policy *wsp__Policy_, wsp__PolicyReference *wsp__PolicyReference_, soap__fault *soap__fault_, std::vector<wsoap__module >& wsoap__module_) { wsdl__ext_fault *_p = soap_instantiate_wsdl__ext_fault(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__ext_fault::name = name; _p->wsdl__ext_fault::ref = ref; _p->wsdl__ext_fault::messageLabel = messageLabel; _p->wsdl__ext_fault::wsoap__code = wsoap__code; _p->wsdl__ext_fault::wsoap__subcodes = wsoap__subcodes; _p->wsdl__ext_fault::documentation = documentation; _p->wsdl__ext_fault::wsp__Policy_ = wsp__Policy_; _p->wsdl__ext_fault::wsp__PolicyReference_ = wsp__PolicyReference_; _p->wsdl__ext_fault::soap__fault_ = soap__fault_; _p->wsdl__ext_fault::wsoap__module_ = wsoap__module_; } return _p; }

inline void soap_delete_wsdl__ext_fault(struct soap *soap, wsdl__ext_fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__ext_fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsdl__ext_ioput
#define SOAP_TYPE_wsdl__ext_ioput (363)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__ext_ioput(struct soap*, const char*, int, const wsdl__ext_ioput *, const char*);
SOAP_FMAC3 wsdl__ext_ioput * SOAP_FMAC4 soap_in_wsdl__ext_ioput(struct soap*, const char*, wsdl__ext_ioput *, const char*);

#ifndef soap_write_wsdl__ext_ioput
#define soap_write_wsdl__ext_ioput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsdl:ext-ioput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__ext_ioput * SOAP_FMAC4 soap_get_wsdl__ext_ioput(struct soap*, wsdl__ext_ioput *, const char*, const char*);

#ifndef soap_read_wsdl__ext_ioput
#define soap_read_wsdl__ext_ioput(soap, data) ( soap_begin_recv(soap) || !soap_get_wsdl__ext_ioput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsdl__ext_ioput * SOAP_FMAC2 soap_instantiate_wsdl__ext_ioput(struct soap*, int, const char*, const char*, size_t*);

inline wsdl__ext_ioput * soap_new_wsdl__ext_ioput(struct soap *soap, int n = -1) { return soap_instantiate_wsdl__ext_ioput(soap, n, NULL, NULL, NULL); }

inline wsdl__ext_ioput * soap_new_req_wsdl__ext_ioput(struct soap *soap) { wsdl__ext_ioput *_p = soap_instantiate_wsdl__ext_ioput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsdl__ext_ioput * soap_new_set_wsdl__ext_ioput(struct soap *soap, char *name, char *messageLabel, char *documentation, wsp__Policy *wsp__Policy_, wsp__PolicyReference *wsp__PolicyReference_, dime__message *dime__message_, soap__body *soap__body_, char *http__urlEncoded, mime__multipartRelated *mime__multipartRelated_, mime__content *mime__content_, mime__mimeXml *mime__mimeXml_, std::vector<soap__header >& soap__header_, std::vector<wsoap__module >& wsoap__module_, std::vector<wsoap__header >& wsoap__header_, std::vector<whttp__header >& whttp__header_) { wsdl__ext_ioput *_p = soap_instantiate_wsdl__ext_ioput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__ext_ioput::name = name; _p->wsdl__ext_ioput::messageLabel = messageLabel; _p->wsdl__ext_ioput::documentation = documentation; _p->wsdl__ext_ioput::wsp__Policy_ = wsp__Policy_; _p->wsdl__ext_ioput::wsp__PolicyReference_ = wsp__PolicyReference_; _p->wsdl__ext_ioput::dime__message_ = dime__message_; _p->wsdl__ext_ioput::soap__body_ = soap__body_; _p->wsdl__ext_ioput::http__urlEncoded = http__urlEncoded; _p->wsdl__ext_ioput::mime__multipartRelated_ = mime__multipartRelated_; _p->wsdl__ext_ioput::mime__content_ = mime__content_; _p->wsdl__ext_ioput::mime__mimeXml_ = mime__mimeXml_; _p->wsdl__ext_ioput::soap__header_ = soap__header_; _p->wsdl__ext_ioput::wsoap__module_ = wsoap__module_; _p->wsdl__ext_ioput::wsoap__header_ = wsoap__header_; _p->wsdl__ext_ioput::whttp__header_ = whttp__header_; } return _p; }

inline void soap_delete_wsdl__ext_ioput(struct soap *soap, wsdl__ext_ioput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__ext_ioput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsdl__portType
#define SOAP_TYPE_wsdl__portType (357)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__portType(struct soap*, const char*, int, const wsdl__portType *, const char*);
SOAP_FMAC3 wsdl__portType * SOAP_FMAC4 soap_in_wsdl__portType(struct soap*, const char*, wsdl__portType *, const char*);

#ifndef soap_write_wsdl__portType
#define soap_write_wsdl__portType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsdl:portType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__portType * SOAP_FMAC4 soap_get_wsdl__portType(struct soap*, wsdl__portType *, const char*, const char*);

#ifndef soap_read_wsdl__portType
#define soap_read_wsdl__portType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsdl__portType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsdl__portType * SOAP_FMAC2 soap_instantiate_wsdl__portType(struct soap*, int, const char*, const char*, size_t*);

inline wsdl__portType * soap_new_wsdl__portType(struct soap *soap, int n = -1) { return soap_instantiate_wsdl__portType(soap, n, NULL, NULL, NULL); }

inline wsdl__portType * soap_new_req_wsdl__portType(struct soap *soap) { wsdl__portType *_p = soap_instantiate_wsdl__portType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsdl__portType * soap_new_set_wsdl__portType(struct soap *soap, char *name, char *extends, char *styleDefault, char *documentation, wsp__Policy *wsp__Policy_, wsp__PolicyReference *wsp__PolicyReference_, std::vector<wsdl__fault >& fault, std::vector<wsdl__operation >& operation) { wsdl__portType *_p = soap_instantiate_wsdl__portType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__portType::name = name; _p->wsdl__portType::extends = extends; _p->wsdl__portType::styleDefault = styleDefault; _p->wsdl__portType::documentation = documentation; _p->wsdl__portType::wsp__Policy_ = wsp__Policy_; _p->wsdl__portType::wsp__PolicyReference_ = wsp__PolicyReference_; _p->wsdl__portType::fault = fault; _p->wsdl__portType::operation = operation; } return _p; }

inline void soap_delete_wsdl__portType(struct soap *soap, wsdl__portType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__portType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsdl__fault
#define SOAP_TYPE_wsdl__fault (346)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__fault(struct soap*, const char*, int, const wsdl__fault *, const char*);
SOAP_FMAC3 wsdl__fault * SOAP_FMAC4 soap_in_wsdl__fault(struct soap*, const char*, wsdl__fault *, const char*);

#ifndef soap_write_wsdl__fault
#define soap_write_wsdl__fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsdl:fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__fault * SOAP_FMAC4 soap_get_wsdl__fault(struct soap*, wsdl__fault *, const char*, const char*);

#ifndef soap_read_wsdl__fault
#define soap_read_wsdl__fault(soap, data) ( soap_begin_recv(soap) || !soap_get_wsdl__fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsdl__fault * SOAP_FMAC2 soap_instantiate_wsdl__fault(struct soap*, int, const char*, const char*, size_t*);

inline wsdl__fault * soap_new_wsdl__fault(struct soap *soap, int n = -1) { return soap_instantiate_wsdl__fault(soap, n, NULL, NULL, NULL); }

inline wsdl__fault * soap_new_req_wsdl__fault(struct soap *soap) { wsdl__fault *_p = soap_instantiate_wsdl__fault(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsdl__fault * soap_new_set_wsdl__fault(struct soap *soap, char *name, char *message, char *ref, char *messageLabel, char *element, char *wsa__Action, char *wsam__Action, char *documentation, wsp__Policy *wsp__Policy_, wsp__PolicyReference *wsp__PolicyReference_) { wsdl__fault *_p = soap_instantiate_wsdl__fault(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__fault::name = name; _p->wsdl__fault::message = message; _p->wsdl__fault::ref = ref; _p->wsdl__fault::messageLabel = messageLabel; _p->wsdl__fault::element = element; _p->wsdl__fault::wsa__Action = wsa__Action; _p->wsdl__fault::wsam__Action = wsam__Action; _p->wsdl__fault::documentation = documentation; _p->wsdl__fault::wsp__Policy_ = wsp__Policy_; _p->wsdl__fault::wsp__PolicyReference_ = wsp__PolicyReference_; } return _p; }

inline void soap_delete_wsdl__fault(struct soap *soap, wsdl__fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsdl__ioput
#define SOAP_TYPE_wsdl__ioput (339)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__ioput(struct soap*, const char*, int, const wsdl__ioput *, const char*);
SOAP_FMAC3 wsdl__ioput * SOAP_FMAC4 soap_in_wsdl__ioput(struct soap*, const char*, wsdl__ioput *, const char*);

#ifndef soap_write_wsdl__ioput
#define soap_write_wsdl__ioput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsdl:ioput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__ioput * SOAP_FMAC4 soap_get_wsdl__ioput(struct soap*, wsdl__ioput *, const char*, const char*);

#ifndef soap_read_wsdl__ioput
#define soap_read_wsdl__ioput(soap, data) ( soap_begin_recv(soap) || !soap_get_wsdl__ioput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsdl__ioput * SOAP_FMAC2 soap_instantiate_wsdl__ioput(struct soap*, int, const char*, const char*, size_t*);

inline wsdl__ioput * soap_new_wsdl__ioput(struct soap *soap, int n = -1) { return soap_instantiate_wsdl__ioput(soap, n, NULL, NULL, NULL); }

inline wsdl__ioput * soap_new_req_wsdl__ioput(struct soap *soap) { wsdl__ioput *_p = soap_instantiate_wsdl__ioput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsdl__ioput * soap_new_set_wsdl__ioput(struct soap *soap, char *name, char *message, char *messageLabel, char *element, char *wsa__Action, char *wsam__Action, char *documentation, wsp__Policy *wsp__Policy_, wsp__PolicyReference *wsp__PolicyReference_) { wsdl__ioput *_p = soap_instantiate_wsdl__ioput(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__ioput::name = name; _p->wsdl__ioput::message = message; _p->wsdl__ioput::messageLabel = messageLabel; _p->wsdl__ioput::element = element; _p->wsdl__ioput::wsa__Action = wsa__Action; _p->wsdl__ioput::wsam__Action = wsam__Action; _p->wsdl__ioput::documentation = documentation; _p->wsdl__ioput::wsp__Policy_ = wsp__Policy_; _p->wsdl__ioput::wsp__PolicyReference_ = wsp__PolicyReference_; } return _p; }

inline void soap_delete_wsdl__ioput(struct soap *soap, wsdl__ioput *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__ioput(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsdl__types
#define SOAP_TYPE_wsdl__types (323)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__types(struct soap*, const char*, int, const wsdl__types *, const char*);
SOAP_FMAC3 wsdl__types * SOAP_FMAC4 soap_in_wsdl__types(struct soap*, const char*, wsdl__types *, const char*);

#ifndef soap_write_wsdl__types
#define soap_write_wsdl__types(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsdl:types", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__types * SOAP_FMAC4 soap_get_wsdl__types(struct soap*, wsdl__types *, const char*, const char*);

#ifndef soap_read_wsdl__types
#define soap_read_wsdl__types(soap, data) ( soap_begin_recv(soap) || !soap_get_wsdl__types(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsdl__types * SOAP_FMAC2 soap_instantiate_wsdl__types(struct soap*, int, const char*, const char*, size_t*);

inline wsdl__types * soap_new_wsdl__types(struct soap *soap, int n = -1) { return soap_instantiate_wsdl__types(soap, n, NULL, NULL, NULL); }

inline wsdl__types * soap_new_req_wsdl__types(struct soap *soap) { wsdl__types *_p = soap_instantiate_wsdl__types(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsdl__types * soap_new_set_wsdl__types(struct soap *soap, char *documentation, std::vector<xs__schema * >& xs__schema_, char *targetNamespace1, char *version1, enum xs__formChoice attributeFormDefault1, enum xs__formChoice elementFormDefault1, xs__annotation *annotation1, std::vector<xs__include >& include1, std::vector<xs__redefine >& redefine1, std::vector<xs__import >& import1, std::vector<xs__attribute >& attribute1, std::vector<xs__element >& element1, std::vector<xs__group >& group1, std::vector<xs__attributeGroup >& attributeGroup1, std::vector<xs__simpleType >& simpleType1, std::vector<xs__complexType >& complexType1) { wsdl__types *_p = soap_instantiate_wsdl__types(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__types::documentation = documentation; _p->wsdl__types::xs__schema_ = xs__schema_; _p->xs__schema::targetNamespace = targetNamespace1; _p->xs__schema::version = version1; _p->xs__schema::attributeFormDefault = attributeFormDefault1; _p->xs__schema::elementFormDefault = elementFormDefault1; _p->xs__schema::annotation = annotation1; _p->xs__schema::include = include1; _p->xs__schema::redefine = redefine1; _p->xs__schema::import = import1; _p->xs__schema::attribute = attribute1; _p->xs__schema::element = element1; _p->xs__schema::group = group1; _p->xs__schema::attributeGroup = attributeGroup1; _p->xs__schema::simpleType = simpleType1; _p->xs__schema::complexType = complexType1; } return _p; }

inline void soap_delete_wsdl__types(struct soap *soap, wsdl__types *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__types(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsdl__import
#define SOAP_TYPE_wsdl__import (315)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__import(struct soap*, const char*, int, const wsdl__import *, const char*);
SOAP_FMAC3 wsdl__import * SOAP_FMAC4 soap_in_wsdl__import(struct soap*, const char*, wsdl__import *, const char*);

#ifndef soap_write_wsdl__import
#define soap_write_wsdl__import(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsdl:import", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__import * SOAP_FMAC4 soap_get_wsdl__import(struct soap*, wsdl__import *, const char*, const char*);

#ifndef soap_read_wsdl__import
#define soap_read_wsdl__import(soap, data) ( soap_begin_recv(soap) || !soap_get_wsdl__import(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsdl__import * SOAP_FMAC2 soap_instantiate_wsdl__import(struct soap*, int, const char*, const char*, size_t*);

inline wsdl__import * soap_new_wsdl__import(struct soap *soap, int n = -1) { return soap_instantiate_wsdl__import(soap, n, NULL, NULL, NULL); }

inline wsdl__import * soap_new_req_wsdl__import(struct soap *soap) { wsdl__import *_p = soap_instantiate_wsdl__import(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsdl__import * soap_new_set_wsdl__import(struct soap *soap, char *namespace_, char *location) { wsdl__import *_p = soap_instantiate_wsdl__import(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__import::namespace_ = namespace_; _p->wsdl__import::location = location; } return _p; }

inline void soap_delete_wsdl__import(struct soap *soap, wsdl__import *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__import(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsp__PolicyAttachment
#define SOAP_TYPE_wsp__PolicyAttachment (312)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsp__PolicyAttachment(struct soap*, const char*, int, const wsp__PolicyAttachment *, const char*);
SOAP_FMAC3 wsp__PolicyAttachment * SOAP_FMAC4 soap_in_wsp__PolicyAttachment(struct soap*, const char*, wsp__PolicyAttachment *, const char*);

#ifndef soap_write_wsp__PolicyAttachment
#define soap_write_wsp__PolicyAttachment(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsp:PolicyAttachment", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsp__PolicyAttachment * SOAP_FMAC4 soap_get_wsp__PolicyAttachment(struct soap*, wsp__PolicyAttachment *, const char*, const char*);

#ifndef soap_read_wsp__PolicyAttachment
#define soap_read_wsp__PolicyAttachment(soap, data) ( soap_begin_recv(soap) || !soap_get_wsp__PolicyAttachment(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsp__PolicyAttachment * SOAP_FMAC2 soap_instantiate_wsp__PolicyAttachment(struct soap*, int, const char*, const char*, size_t*);

inline wsp__PolicyAttachment * soap_new_wsp__PolicyAttachment(struct soap *soap, int n = -1) { return soap_instantiate_wsp__PolicyAttachment(soap, n, NULL, NULL, NULL); }

inline wsp__PolicyAttachment * soap_new_req_wsp__PolicyAttachment(struct soap *soap) { wsp__PolicyAttachment *_p = soap_instantiate_wsp__PolicyAttachment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsp__PolicyAttachment * soap_new_set_wsp__PolicyAttachment(struct soap *soap, wsp__AppliesTo *AppliesTo, std::vector<wsp__Attachment >& Attachment) { wsp__PolicyAttachment *_p = soap_instantiate_wsp__PolicyAttachment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsp__PolicyAttachment::AppliesTo = AppliesTo; _p->wsp__PolicyAttachment::Attachment = Attachment; } return _p; }

inline void soap_delete_wsp__PolicyAttachment(struct soap *soap, wsp__PolicyAttachment *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsp__PolicyAttachment(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsp__AppliesTo
#define SOAP_TYPE_wsp__AppliesTo (311)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsp__AppliesTo(struct soap*, const char*, int, const wsp__AppliesTo *, const char*);
SOAP_FMAC3 wsp__AppliesTo * SOAP_FMAC4 soap_in_wsp__AppliesTo(struct soap*, const char*, wsp__AppliesTo *, const char*);

#ifndef soap_write_wsp__AppliesTo
#define soap_write_wsp__AppliesTo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsp:AppliesTo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsp__AppliesTo * SOAP_FMAC4 soap_get_wsp__AppliesTo(struct soap*, wsp__AppliesTo *, const char*, const char*);

#ifndef soap_read_wsp__AppliesTo
#define soap_read_wsp__AppliesTo(soap, data) ( soap_begin_recv(soap) || !soap_get_wsp__AppliesTo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsp__AppliesTo * SOAP_FMAC2 soap_instantiate_wsp__AppliesTo(struct soap*, int, const char*, const char*, size_t*);

inline wsp__AppliesTo * soap_new_wsp__AppliesTo(struct soap *soap, int n = -1) { return soap_instantiate_wsp__AppliesTo(soap, n, NULL, NULL, NULL); }

inline wsp__AppliesTo * soap_new_req_wsp__AppliesTo(struct soap *soap) { wsp__AppliesTo *_p = soap_instantiate_wsp__AppliesTo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsp__AppliesTo * soap_new_set_wsp__AppliesTo(struct soap *soap, char *__any) { wsp__AppliesTo *_p = soap_instantiate_wsp__AppliesTo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsp__AppliesTo::__any = __any; } return _p; }

inline void soap_delete_wsp__AppliesTo(struct soap *soap, wsp__AppliesTo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsp__AppliesTo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsp__Attachment
#define SOAP_TYPE_wsp__Attachment (310)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsp__Attachment(struct soap*, const char*, int, const wsp__Attachment *, const char*);
SOAP_FMAC3 wsp__Attachment * SOAP_FMAC4 soap_in_wsp__Attachment(struct soap*, const char*, wsp__Attachment *, const char*);

#ifndef soap_write_wsp__Attachment
#define soap_write_wsp__Attachment(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsp:Attachment", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsp__Attachment * SOAP_FMAC4 soap_get_wsp__Attachment(struct soap*, wsp__Attachment *, const char*, const char*);

#ifndef soap_read_wsp__Attachment
#define soap_read_wsp__Attachment(soap, data) ( soap_begin_recv(soap) || !soap_get_wsp__Attachment(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsp__Attachment * SOAP_FMAC2 soap_instantiate_wsp__Attachment(struct soap*, int, const char*, const char*, size_t*);

inline wsp__Attachment * soap_new_wsp__Attachment(struct soap *soap, int n = -1) { return soap_instantiate_wsp__Attachment(soap, n, NULL, NULL, NULL); }

inline wsp__Attachment * soap_new_req_wsp__Attachment(struct soap *soap) { wsp__Attachment *_p = soap_instantiate_wsp__Attachment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsp__Attachment * soap_new_set_wsp__Attachment(struct soap *soap, wsp__Policy *Policy, wsp__PolicyReference *PolicyReference) { wsp__Attachment *_p = soap_instantiate_wsp__Attachment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsp__Attachment::Policy = Policy; _p->wsp__Attachment::PolicyReference = PolicyReference; } return _p; }

inline void soap_delete_wsp__Attachment(struct soap *soap, wsp__Attachment *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsp__Attachment(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsrmp__RMAssertion
#define SOAP_TYPE_wsrmp__RMAssertion (296)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrmp__RMAssertion(struct soap*, const char*, int, const wsrmp__RMAssertion *, const char*);
SOAP_FMAC3 wsrmp__RMAssertion * SOAP_FMAC4 soap_in_wsrmp__RMAssertion(struct soap*, const char*, wsrmp__RMAssertion *, const char*);

#ifndef soap_write_wsrmp__RMAssertion
#define soap_write_wsrmp__RMAssertion(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsrmp:RMAssertion", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsrmp__RMAssertion * SOAP_FMAC4 soap_get_wsrmp__RMAssertion(struct soap*, wsrmp__RMAssertion *, const char*, const char*);

#ifndef soap_read_wsrmp__RMAssertion
#define soap_read_wsrmp__RMAssertion(soap, data) ( soap_begin_recv(soap) || !soap_get_wsrmp__RMAssertion(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsrmp__RMAssertion * SOAP_FMAC2 soap_instantiate_wsrmp__RMAssertion(struct soap*, int, const char*, const char*, size_t*);

inline wsrmp__RMAssertion * soap_new_wsrmp__RMAssertion(struct soap *soap, int n = -1) { return soap_instantiate_wsrmp__RMAssertion(soap, n, NULL, NULL, NULL); }

inline wsrmp__RMAssertion * soap_new_req_wsrmp__RMAssertion(struct soap *soap) { wsrmp__RMAssertion *_p = soap_instantiate_wsrmp__RMAssertion(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsrmp__RMAssertion * soap_new_set_wsrmp__RMAssertion(struct soap *soap, wsrmp__Timeout *InactivityTimeout, wsrmp__Timeout *BaseRetransmissionInterval, wsrmp__Timeout *AcknowledgementInterval, char *ExponentialBackoff, bool Optional1, bool Ignorable1, wsp__Content *Policy1) { wsrmp__RMAssertion *_p = soap_instantiate_wsrmp__RMAssertion(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrmp__RMAssertion::InactivityTimeout = InactivityTimeout; _p->wsrmp__RMAssertion::BaseRetransmissionInterval = BaseRetransmissionInterval; _p->wsrmp__RMAssertion::AcknowledgementInterval = AcknowledgementInterval; _p->wsrmp__RMAssertion::ExponentialBackoff = ExponentialBackoff; _p->wsp__Assertion::Optional = Optional1; _p->wsp__Assertion::Ignorable = Ignorable1; _p->wsp__Assertion::Policy = Policy1; } return _p; }

inline void soap_delete_wsrmp__RMAssertion(struct soap *soap, wsrmp__RMAssertion *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsrmp__RMAssertion(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsrmp__Timeout
#define SOAP_TYPE_wsrmp__Timeout (295)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsrmp__Timeout(struct soap*, const char*, int, const wsrmp__Timeout *, const char*);
SOAP_FMAC3 wsrmp__Timeout * SOAP_FMAC4 soap_in_wsrmp__Timeout(struct soap*, const char*, wsrmp__Timeout *, const char*);

#ifndef soap_write_wsrmp__Timeout
#define soap_write_wsrmp__Timeout(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsrmp:Timeout", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsrmp__Timeout * SOAP_FMAC4 soap_get_wsrmp__Timeout(struct soap*, wsrmp__Timeout *, const char*, const char*);

#ifndef soap_read_wsrmp__Timeout
#define soap_read_wsrmp__Timeout(soap, data) ( soap_begin_recv(soap) || !soap_get_wsrmp__Timeout(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsrmp__Timeout * SOAP_FMAC2 soap_instantiate_wsrmp__Timeout(struct soap*, int, const char*, const char*, size_t*);

inline wsrmp__Timeout * soap_new_wsrmp__Timeout(struct soap *soap, int n = -1) { return soap_instantiate_wsrmp__Timeout(soap, n, NULL, NULL, NULL); }

inline wsrmp__Timeout * soap_new_req_wsrmp__Timeout(struct soap *soap) { wsrmp__Timeout *_p = soap_instantiate_wsrmp__Timeout(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsrmp__Timeout * soap_new_set_wsrmp__Timeout(struct soap *soap, char *Milliseconds) { wsrmp__Timeout *_p = soap_instantiate_wsrmp__Timeout(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsrmp__Timeout::Milliseconds = Milliseconds; } return _p; }

inline void soap_delete_wsrmp__Timeout(struct soap *soap, wsrmp__Timeout *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsrmp__Timeout(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_sp__Token
#define SOAP_TYPE_sp__Token (292)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_sp__Token(struct soap*, const char*, int, const sp__Token *, const char*);
SOAP_FMAC3 sp__Token * SOAP_FMAC4 soap_in_sp__Token(struct soap*, const char*, sp__Token *, const char*);

#ifndef soap_write_sp__Token
#define soap_write_sp__Token(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "sp:Token", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 sp__Token * SOAP_FMAC4 soap_get_sp__Token(struct soap*, sp__Token *, const char*, const char*);

#ifndef soap_read_sp__Token
#define soap_read_sp__Token(soap, data) ( soap_begin_recv(soap) || !soap_get_sp__Token(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 sp__Token * SOAP_FMAC2 soap_instantiate_sp__Token(struct soap*, int, const char*, const char*, size_t*);

inline sp__Token * soap_new_sp__Token(struct soap *soap, int n = -1) { return soap_instantiate_sp__Token(soap, n, NULL, NULL, NULL); }

inline sp__Token * soap_new_req_sp__Token(struct soap *soap) { sp__Token *_p = soap_instantiate_sp__Token(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline sp__Token * soap_new_set_sp__Token(struct soap *soap, char *IncludeToken, wsa__EndpointReferenceType *Issuer, char *IssuerName, wst__Claims *wst__Claims_, bool Optional1, bool Ignorable1, wsp__Content *Policy1) { sp__Token *_p = soap_instantiate_sp__Token(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->sp__Token::IncludeToken = IncludeToken; _p->sp__Token::Issuer = Issuer; _p->sp__Token::IssuerName = IssuerName; _p->sp__Token::wst__Claims_ = wst__Claims_; _p->wsp__Assertion::Optional = Optional1; _p->wsp__Assertion::Ignorable = Ignorable1; _p->wsp__Assertion::Policy = Policy1; } return _p; }

inline void soap_delete_sp__Token(struct soap *soap, sp__Token *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_sp__Token(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_sp__Elements
#define SOAP_TYPE_sp__Elements (290)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_sp__Elements(struct soap*, const char*, int, const sp__Elements *, const char*);
SOAP_FMAC3 sp__Elements * SOAP_FMAC4 soap_in_sp__Elements(struct soap*, const char*, sp__Elements *, const char*);

#ifndef soap_write_sp__Elements
#define soap_write_sp__Elements(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "sp:Elements", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 sp__Elements * SOAP_FMAC4 soap_get_sp__Elements(struct soap*, sp__Elements *, const char*, const char*);

#ifndef soap_read_sp__Elements
#define soap_read_sp__Elements(soap, data) ( soap_begin_recv(soap) || !soap_get_sp__Elements(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 sp__Elements * SOAP_FMAC2 soap_instantiate_sp__Elements(struct soap*, int, const char*, const char*, size_t*);

inline sp__Elements * soap_new_sp__Elements(struct soap *soap, int n = -1) { return soap_instantiate_sp__Elements(soap, n, NULL, NULL, NULL); }

inline sp__Elements * soap_new_req_sp__Elements(struct soap *soap) { sp__Elements *_p = soap_instantiate_sp__Elements(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline sp__Elements * soap_new_set_sp__Elements(struct soap *soap, char *XPathVersion, std::vector<char * >& XPath) { sp__Elements *_p = soap_instantiate_sp__Elements(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->sp__Elements::XPathVersion = XPathVersion; _p->sp__Elements::XPath = XPath; } return _p; }

inline void soap_delete_sp__Elements(struct soap *soap, sp__Elements *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_sp__Elements(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_sp__Parts
#define SOAP_TYPE_sp__Parts (288)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_sp__Parts(struct soap*, const char*, int, const sp__Parts *, const char*);
SOAP_FMAC3 sp__Parts * SOAP_FMAC4 soap_in_sp__Parts(struct soap*, const char*, sp__Parts *, const char*);

#ifndef soap_write_sp__Parts
#define soap_write_sp__Parts(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "sp:Parts", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 sp__Parts * SOAP_FMAC4 soap_get_sp__Parts(struct soap*, sp__Parts *, const char*, const char*);

#ifndef soap_read_sp__Parts
#define soap_read_sp__Parts(soap, data) ( soap_begin_recv(soap) || !soap_get_sp__Parts(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 sp__Parts * SOAP_FMAC2 soap_instantiate_sp__Parts(struct soap*, int, const char*, const char*, size_t*);

inline sp__Parts * soap_new_sp__Parts(struct soap *soap, int n = -1) { return soap_instantiate_sp__Parts(soap, n, NULL, NULL, NULL); }

inline sp__Parts * soap_new_req_sp__Parts(struct soap *soap) { sp__Parts *_p = soap_instantiate_sp__Parts(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline sp__Parts * soap_new_set_sp__Parts(struct soap *soap, char *Body, std::vector<sp__Header >& Header, char *Attachments) { sp__Parts *_p = soap_instantiate_sp__Parts(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->sp__Parts::Body = Body; _p->sp__Parts::Header = Header; _p->sp__Parts::Attachments = Attachments; } return _p; }

inline void soap_delete_sp__Parts(struct soap *soap, sp__Parts *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_sp__Parts(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_sp__Header
#define SOAP_TYPE_sp__Header (287)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_sp__Header(struct soap*, const char*, int, const sp__Header *, const char*);
SOAP_FMAC3 sp__Header * SOAP_FMAC4 soap_in_sp__Header(struct soap*, const char*, sp__Header *, const char*);

#ifndef soap_write_sp__Header
#define soap_write_sp__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "sp:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 sp__Header * SOAP_FMAC4 soap_get_sp__Header(struct soap*, sp__Header *, const char*, const char*);

#ifndef soap_read_sp__Header
#define soap_read_sp__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_sp__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 sp__Header * SOAP_FMAC2 soap_instantiate_sp__Header(struct soap*, int, const char*, const char*, size_t*);

inline sp__Header * soap_new_sp__Header(struct soap *soap, int n = -1) { return soap_instantiate_sp__Header(soap, n, NULL, NULL, NULL); }

inline sp__Header * soap_new_req_sp__Header(struct soap *soap) { sp__Header *_p = soap_instantiate_sp__Header(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline sp__Header * soap_new_set_sp__Header(struct soap *soap, char *Name, char *Namespace) { sp__Header *_p = soap_instantiate_sp__Header(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->sp__Header::Name = Name; _p->sp__Header::Namespace = Namespace; } return _p; }

inline void soap_delete_sp__Header(struct soap *soap, sp__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_sp__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wst__Claims
#define SOAP_TYPE_wst__Claims (286)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wst__Claims(struct soap*, const char*, int, const wst__Claims *, const char*);
SOAP_FMAC3 wst__Claims * SOAP_FMAC4 soap_in_wst__Claims(struct soap*, const char*, wst__Claims *, const char*);

#ifndef soap_write_wst__Claims
#define soap_write_wst__Claims(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wst:Claims", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wst__Claims * SOAP_FMAC4 soap_get_wst__Claims(struct soap*, wst__Claims *, const char*, const char*);

#ifndef soap_read_wst__Claims
#define soap_read_wst__Claims(soap, data) ( soap_begin_recv(soap) || !soap_get_wst__Claims(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wst__Claims * SOAP_FMAC2 soap_instantiate_wst__Claims(struct soap*, int, const char*, const char*, size_t*);

inline wst__Claims * soap_new_wst__Claims(struct soap *soap, int n = -1) { return soap_instantiate_wst__Claims(soap, n, NULL, NULL, NULL); }

inline wst__Claims * soap_new_req_wst__Claims(struct soap *soap) { wst__Claims *_p = soap_instantiate_wst__Claims(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wst__Claims * soap_new_set_wst__Claims(struct soap *soap, char *Dialect, char *__item) { wst__Claims *_p = soap_instantiate_wst__Claims(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wst__Claims::Dialect = Dialect; _p->wst__Claims::__item = __item; } return _p; }

inline void soap_delete_wst__Claims(struct soap *soap, wst__Claims *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wst__Claims(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsp__Assertion
#define SOAP_TYPE_wsp__Assertion (284)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsp__Assertion(struct soap*, const char*, int, const wsp__Assertion *, const char*);
SOAP_FMAC3 wsp__Assertion * SOAP_FMAC4 soap_in_wsp__Assertion(struct soap*, const char*, wsp__Assertion *, const char*);

#ifndef soap_write_wsp__Assertion
#define soap_write_wsp__Assertion(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsp:Assertion", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsp__Assertion * SOAP_FMAC4 soap_get_wsp__Assertion(struct soap*, wsp__Assertion *, const char*, const char*);

#ifndef soap_read_wsp__Assertion
#define soap_read_wsp__Assertion(soap, data) ( soap_begin_recv(soap) || !soap_get_wsp__Assertion(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsp__Assertion * SOAP_FMAC2 soap_instantiate_wsp__Assertion(struct soap*, int, const char*, const char*, size_t*);

inline wsp__Assertion * soap_new_wsp__Assertion(struct soap *soap, int n = -1) { return soap_instantiate_wsp__Assertion(soap, n, NULL, NULL, NULL); }

inline wsp__Assertion * soap_new_req_wsp__Assertion(struct soap *soap) { wsp__Assertion *_p = soap_instantiate_wsp__Assertion(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsp__Assertion * soap_new_set_wsp__Assertion(struct soap *soap, bool Optional, bool Ignorable, wsp__Content *Policy) { wsp__Assertion *_p = soap_instantiate_wsp__Assertion(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsp__Assertion::Optional = Optional; _p->wsp__Assertion::Ignorable = Ignorable; _p->wsp__Assertion::Policy = Policy; } return _p; }

inline void soap_delete_wsp__Assertion(struct soap *soap, wsp__Assertion *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsp__Assertion(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsp__PolicyReference
#define SOAP_TYPE_wsp__PolicyReference (278)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsp__PolicyReference(struct soap*, const char*, int, const wsp__PolicyReference *, const char*);
SOAP_FMAC3 wsp__PolicyReference * SOAP_FMAC4 soap_in_wsp__PolicyReference(struct soap*, const char*, wsp__PolicyReference *, const char*);

#ifndef soap_write_wsp__PolicyReference
#define soap_write_wsp__PolicyReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsp:PolicyReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsp__PolicyReference * SOAP_FMAC4 soap_get_wsp__PolicyReference(struct soap*, wsp__PolicyReference *, const char*, const char*);

#ifndef soap_read_wsp__PolicyReference
#define soap_read_wsp__PolicyReference(soap, data) ( soap_begin_recv(soap) || !soap_get_wsp__PolicyReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsp__PolicyReference * SOAP_FMAC2 soap_instantiate_wsp__PolicyReference(struct soap*, int, const char*, const char*, size_t*);

inline wsp__PolicyReference * soap_new_wsp__PolicyReference(struct soap *soap, int n = -1) { return soap_instantiate_wsp__PolicyReference(soap, n, NULL, NULL, NULL); }

inline wsp__PolicyReference * soap_new_req_wsp__PolicyReference(struct soap *soap) { wsp__PolicyReference *_p = soap_instantiate_wsp__PolicyReference(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsp__PolicyReference * soap_new_set_wsp__PolicyReference(struct soap *soap, char *URI, char *Digest, char *DigestAlgorithm) { wsp__PolicyReference *_p = soap_instantiate_wsp__PolicyReference(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsp__PolicyReference::URI = URI; _p->wsp__PolicyReference::Digest = Digest; _p->wsp__PolicyReference::DigestAlgorithm = DigestAlgorithm; } return _p; }

inline void soap_delete_wsp__PolicyReference(struct soap *soap, wsp__PolicyReference *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsp__PolicyReference(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsp__Content
#define SOAP_TYPE_wsp__Content (275)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsp__Content(struct soap*, const char*, int, const wsp__Content *, const char*);
SOAP_FMAC3 wsp__Content * SOAP_FMAC4 soap_in_wsp__Content(struct soap*, const char*, wsp__Content *, const char*);

#ifndef soap_write_wsp__Content
#define soap_write_wsp__Content(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsp:Content", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsp__Content * SOAP_FMAC4 soap_get_wsp__Content(struct soap*, wsp__Content *, const char*, const char*);

#ifndef soap_read_wsp__Content
#define soap_read_wsp__Content(soap, data) ( soap_begin_recv(soap) || !soap_get_wsp__Content(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsp__Content * SOAP_FMAC2 soap_instantiate_wsp__Content(struct soap*, int, const char*, const char*, size_t*);

inline wsp__Content * soap_new_wsp__Content(struct soap *soap, int n = -1) { return soap_instantiate_wsp__Content(soap, n, NULL, NULL, NULL); }

inline wsp__Content * soap_new_req_wsp__Content(struct soap *soap) { wsp__Content *_p = soap_instantiate_wsp__Content(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsp__Content * soap_new_set_wsp__Content(struct soap *soap, wsp__Policy *Policy, wsp__PolicyReference *PolicyReference, std::vector<wsp__Content * >& All, std::vector<wsp__Content * >& ExactlyOne, std::vector<sp__Parts >& sp__SignedParts, std::vector<sp__Parts >& sp__EncryptedParts, std::vector<sp__Parts >& sp__RequiredParts, sp__Elements *sp__SignedElements, sp__Elements *sp__EncryptedElements, sp__Elements *sp__ContentEncryptedElements, sp__Elements *sp__RequiredElements, sp__Token *sp__UsernameToken, sp__Token *sp__IssuedToken, sp__Token *sp__X509Token, sp__Token *sp__KerberosToken, sp__Token *sp__SpnegoContextToken, sp__Token *sp__SecurityContextToken, sp__Token *sp__SecureConversationToken, sp__Token *sp__SamlToken, sp__Token *sp__RelToken, sp__Token *sp__HttpsToken, sp__Token *sp__KeyValueToken, wsp__Assertion *sp__TransportBinding, wsp__Assertion *sp__TransportToken, wsp__Assertion *sp__AlgorithmSuite, wsp__Assertion *sp__Layout, wsp__Assertion *sp__SymmetricBinding, wsp__Assertion *sp__AsymmetricBinding, wsp__Assertion *sp__ProtectionToken, wsp__Assertion *sp__InitiatorToken, wsp__Assertion *sp__InitiatorSignatureToken, wsp__Assertion *sp__InitiatorEncryptionToken, wsp__Assertion *sp__RecipientToken, wsp__Assertion *sp__SupportingTokens, wsp__Assertion *sp__SignedSupportingTokens, wsp__Assertion *sp__EndorsingSupportingTokens, wsp__Assertion *sp__SignedEndorsingSupportingTokens, wsp__Assertion *sp__SignedEncryptedSupportingTokens, wsp__Assertion *sp__EncryptedSupportingTokens, wsp__Assertion *sp__EndorsingEncryptedSupportingTokens, wsp__Assertion *sp__SignedEndorsingEncryptedSupportingTokens, wsp__Assertion *sp__Wss10, wsp__Assertion *sp__Wss11, wsp__Assertion *sp__Trust10, wsp__Assertion *sp__Trust13, wsp__Content *sp__BootstrapPolicy, char *wsaw__UsingAddressing, wsp__Assertion *wsam__Addressing, wsrmp__RMAssertion *wsrmp__RMAssertion_, wsrmp__RMAssertion *wsrmp__DeliveryAssurance, char *wsrmp__AtLeastOnce, char *wsrmp__AtMostOnce, char *wsrmp__ExactlyOnce, char *wsrmp__InOrder, wsp__Assertion *sp__NoPassword, wsp__Assertion *sp__HashPassword, wsp__Assertion *sp__IncludeTimestamp, wsp__Assertion *sp__EncryptBeforeSigning, wsp__Assertion *sp__EncryptSignature, wsp__Assertion *sp__ProtectTokens, wsp__Assertion *sp__OnlySignEntireHeadersAndBody, char *sp__RequireDerivedKeys, char *sp__RequireImpliedDerivedKeys, char *sp__RequireExplicitDerivedKeys, char *sp__WssUsernameToken10, char *sp__WssUsernameToken11, char *sp__RequireExternalReference, char *sp__RequireInternalReference, char *sp__RequireKeyIdentifierReference, char *sp__RequireIssuerSerialReference, char *sp__RequireEmbeddedTokenReference, char *sp__RequireThumbprintReference, char *sp__WssX509V3Token10, char *sp__WssX509Pkcs7Token10, char *sp__WssX509PkiPathV1Token10, char *sp__WssX509V1Token11, char *sp__WssX509V3Token11, char *sp__WssX509Pkcs7Token11, char *sp__WssX509PkiPathV1Token11, char *sp__WssKerberosV5ApReqToken11, char *sp__WssGssKerberosV5ApReqToken11, char *sp__WssRelV10Token10, char *sp__WssRelV20Token10, char *sp__WssRelV10Token11, char *sp__WssRelV20Token11, char *sp__MustNotSendCancel, char *sp__MustNotSendAmend, char *sp__MustNotSendRenew, char *sp__MustSupportRefKeyIdentifier, char *sp__MustSupportRefIssuerSerial, char *sp__MustSupportRefExternalURI, char *sp__MustSupportRefEmbeddedToken, char *sp__MustSupportRefThumbprint, char *sp__MustSupportRefEncryptedKey, char *sp__RequireSignatureConfirmation, char *sp__MustSupportClientChallenge, char *sp__MustSupportServerChallenge, char *sp__RequireClientEntropy, char *sp__RequireServerEntropy, char *sp__MustSupportIssuedTokens, char *sp__RequireRequestSecurityTokenCollection, char *sp__RequireAppliesTo, char *sp__RequireExternalUriReference, char *sp__SC13SecurityContextToken, char *sp__Strict, char *sp__Lax, char *sp__LaxTsFirst, char *sp__LaxTsLast, char *sp__HttpBasicAuthentication, char *sp__HttpDigestAuthentication, char *sp__RequireClientCertificate, char *sp__Basic256, char *sp__Basic192, char *sp__Basic128, char *sp__TripleDes, char *sp__Basic256Rsa15, char *sp__Basic192Rsa15, char *sp__Basic128Rsa15, char *sp__TripleDesRsa15, char *sp__Basic256Sha256, char *sp__Basic192Sha256, char *sp__Basic128Sha256, char *sp__TripleDesSha256, char *sp__Basic256Sha256Rsa15, char *sp__Basic192Sha256Rsa15, char *sp__Basic128Sha256Rsa15, char *sp__TripleDesSha256Rsa15, char *sp__InclusiveC14N, char *sp__SOAPNormalization10, char *sp__STRTransform10, char *sp__Path10, char *sp__XPathFilter20, char *sp__AbsXPath, char *wsam__AnonymousResponses, char *wsam__NonAnonymousResponses, std::vector<char * >& __any) { wsp__Content *_p = soap_instantiate_wsp__Content(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsp__Content::Policy = Policy; _p->wsp__Content::PolicyReference = PolicyReference; _p->wsp__Content::All = All; _p->wsp__Content::ExactlyOne = ExactlyOne; _p->wsp__Content::sp__SignedParts = sp__SignedParts; _p->wsp__Content::sp__EncryptedParts = sp__EncryptedParts; _p->wsp__Content::sp__RequiredParts = sp__RequiredParts; _p->wsp__Content::sp__SignedElements = sp__SignedElements; _p->wsp__Content::sp__EncryptedElements = sp__EncryptedElements; _p->wsp__Content::sp__ContentEncryptedElements = sp__ContentEncryptedElements; _p->wsp__Content::sp__RequiredElements = sp__RequiredElements; _p->wsp__Content::sp__UsernameToken = sp__UsernameToken; _p->wsp__Content::sp__IssuedToken = sp__IssuedToken; _p->wsp__Content::sp__X509Token = sp__X509Token; _p->wsp__Content::sp__KerberosToken = sp__KerberosToken; _p->wsp__Content::sp__SpnegoContextToken = sp__SpnegoContextToken; _p->wsp__Content::sp__SecurityContextToken = sp__SecurityContextToken; _p->wsp__Content::sp__SecureConversationToken = sp__SecureConversationToken; _p->wsp__Content::sp__SamlToken = sp__SamlToken; _p->wsp__Content::sp__RelToken = sp__RelToken; _p->wsp__Content::sp__HttpsToken = sp__HttpsToken; _p->wsp__Content::sp__KeyValueToken = sp__KeyValueToken; _p->wsp__Content::sp__TransportBinding = sp__TransportBinding; _p->wsp__Content::sp__TransportToken = sp__TransportToken; _p->wsp__Content::sp__AlgorithmSuite = sp__AlgorithmSuite; _p->wsp__Content::sp__Layout = sp__Layout; _p->wsp__Content::sp__SymmetricBinding = sp__SymmetricBinding; _p->wsp__Content::sp__AsymmetricBinding = sp__AsymmetricBinding; _p->wsp__Content::sp__ProtectionToken = sp__ProtectionToken; _p->wsp__Content::sp__InitiatorToken = sp__InitiatorToken; _p->wsp__Content::sp__InitiatorSignatureToken = sp__InitiatorSignatureToken; _p->wsp__Content::sp__InitiatorEncryptionToken = sp__InitiatorEncryptionToken; _p->wsp__Content::sp__RecipientToken = sp__RecipientToken; _p->wsp__Content::sp__SupportingTokens = sp__SupportingTokens; _p->wsp__Content::sp__SignedSupportingTokens = sp__SignedSupportingTokens; _p->wsp__Content::sp__EndorsingSupportingTokens = sp__EndorsingSupportingTokens; _p->wsp__Content::sp__SignedEndorsingSupportingTokens = sp__SignedEndorsingSupportingTokens; _p->wsp__Content::sp__SignedEncryptedSupportingTokens = sp__SignedEncryptedSupportingTokens; _p->wsp__Content::sp__EncryptedSupportingTokens = sp__EncryptedSupportingTokens; _p->wsp__Content::sp__EndorsingEncryptedSupportingTokens = sp__EndorsingEncryptedSupportingTokens; _p->wsp__Content::sp__SignedEndorsingEncryptedSupportingTokens = sp__SignedEndorsingEncryptedSupportingTokens; _p->wsp__Content::sp__Wss10 = sp__Wss10; _p->wsp__Content::sp__Wss11 = sp__Wss11; _p->wsp__Content::sp__Trust10 = sp__Trust10; _p->wsp__Content::sp__Trust13 = sp__Trust13; _p->wsp__Content::sp__BootstrapPolicy = sp__BootstrapPolicy; _p->wsp__Content::wsaw__UsingAddressing = wsaw__UsingAddressing; _p->wsp__Content::wsam__Addressing = wsam__Addressing; _p->wsp__Content::wsrmp__RMAssertion_ = wsrmp__RMAssertion_; _p->wsp__Content::wsrmp__DeliveryAssurance = wsrmp__DeliveryAssurance; _p->wsp__Content::wsrmp__AtLeastOnce = wsrmp__AtLeastOnce; _p->wsp__Content::wsrmp__AtMostOnce = wsrmp__AtMostOnce; _p->wsp__Content::wsrmp__ExactlyOnce = wsrmp__ExactlyOnce; _p->wsp__Content::wsrmp__InOrder = wsrmp__InOrder; _p->wsp__Content::sp__NoPassword = sp__NoPassword; _p->wsp__Content::sp__HashPassword = sp__HashPassword; _p->wsp__Content::sp__IncludeTimestamp = sp__IncludeTimestamp; _p->wsp__Content::sp__EncryptBeforeSigning = sp__EncryptBeforeSigning; _p->wsp__Content::sp__EncryptSignature = sp__EncryptSignature; _p->wsp__Content::sp__ProtectTokens = sp__ProtectTokens; _p->wsp__Content::sp__OnlySignEntireHeadersAndBody = sp__OnlySignEntireHeadersAndBody; _p->wsp__Content::sp__RequireDerivedKeys = sp__RequireDerivedKeys; _p->wsp__Content::sp__RequireImpliedDerivedKeys = sp__RequireImpliedDerivedKeys; _p->wsp__Content::sp__RequireExplicitDerivedKeys = sp__RequireExplicitDerivedKeys; _p->wsp__Content::sp__WssUsernameToken10 = sp__WssUsernameToken10; _p->wsp__Content::sp__WssUsernameToken11 = sp__WssUsernameToken11; _p->wsp__Content::sp__RequireExternalReference = sp__RequireExternalReference; _p->wsp__Content::sp__RequireInternalReference = sp__RequireInternalReference; _p->wsp__Content::sp__RequireKeyIdentifierReference = sp__RequireKeyIdentifierReference; _p->wsp__Content::sp__RequireIssuerSerialReference = sp__RequireIssuerSerialReference; _p->wsp__Content::sp__RequireEmbeddedTokenReference = sp__RequireEmbeddedTokenReference; _p->wsp__Content::sp__RequireThumbprintReference = sp__RequireThumbprintReference; _p->wsp__Content::sp__WssX509V3Token10 = sp__WssX509V3Token10; _p->wsp__Content::sp__WssX509Pkcs7Token10 = sp__WssX509Pkcs7Token10; _p->wsp__Content::sp__WssX509PkiPathV1Token10 = sp__WssX509PkiPathV1Token10; _p->wsp__Content::sp__WssX509V1Token11 = sp__WssX509V1Token11; _p->wsp__Content::sp__WssX509V3Token11 = sp__WssX509V3Token11; _p->wsp__Content::sp__WssX509Pkcs7Token11 = sp__WssX509Pkcs7Token11; _p->wsp__Content::sp__WssX509PkiPathV1Token11 = sp__WssX509PkiPathV1Token11; _p->wsp__Content::sp__WssKerberosV5ApReqToken11 = sp__WssKerberosV5ApReqToken11; _p->wsp__Content::sp__WssGssKerberosV5ApReqToken11 = sp__WssGssKerberosV5ApReqToken11; _p->wsp__Content::sp__WssRelV10Token10 = sp__WssRelV10Token10; _p->wsp__Content::sp__WssRelV20Token10 = sp__WssRelV20Token10; _p->wsp__Content::sp__WssRelV10Token11 = sp__WssRelV10Token11; _p->wsp__Content::sp__WssRelV20Token11 = sp__WssRelV20Token11; _p->wsp__Content::sp__MustNotSendCancel = sp__MustNotSendCancel; _p->wsp__Content::sp__MustNotSendAmend = sp__MustNotSendAmend; _p->wsp__Content::sp__MustNotSendRenew = sp__MustNotSendRenew; _p->wsp__Content::sp__MustSupportRefKeyIdentifier = sp__MustSupportRefKeyIdentifier; _p->wsp__Content::sp__MustSupportRefIssuerSerial = sp__MustSupportRefIssuerSerial; _p->wsp__Content::sp__MustSupportRefExternalURI = sp__MustSupportRefExternalURI; _p->wsp__Content::sp__MustSupportRefEmbeddedToken = sp__MustSupportRefEmbeddedToken; _p->wsp__Content::sp__MustSupportRefThumbprint = sp__MustSupportRefThumbprint; _p->wsp__Content::sp__MustSupportRefEncryptedKey = sp__MustSupportRefEncryptedKey; _p->wsp__Content::sp__RequireSignatureConfirmation = sp__RequireSignatureConfirmation; _p->wsp__Content::sp__MustSupportClientChallenge = sp__MustSupportClientChallenge; _p->wsp__Content::sp__MustSupportServerChallenge = sp__MustSupportServerChallenge; _p->wsp__Content::sp__RequireClientEntropy = sp__RequireClientEntropy; _p->wsp__Content::sp__RequireServerEntropy = sp__RequireServerEntropy; _p->wsp__Content::sp__MustSupportIssuedTokens = sp__MustSupportIssuedTokens; _p->wsp__Content::sp__RequireRequestSecurityTokenCollection = sp__RequireRequestSecurityTokenCollection; _p->wsp__Content::sp__RequireAppliesTo = sp__RequireAppliesTo; _p->wsp__Content::sp__RequireExternalUriReference = sp__RequireExternalUriReference; _p->wsp__Content::sp__SC13SecurityContextToken = sp__SC13SecurityContextToken; _p->wsp__Content::sp__Strict = sp__Strict; _p->wsp__Content::sp__Lax = sp__Lax; _p->wsp__Content::sp__LaxTsFirst = sp__LaxTsFirst; _p->wsp__Content::sp__LaxTsLast = sp__LaxTsLast; _p->wsp__Content::sp__HttpBasicAuthentication = sp__HttpBasicAuthentication; _p->wsp__Content::sp__HttpDigestAuthentication = sp__HttpDigestAuthentication; _p->wsp__Content::sp__RequireClientCertificate = sp__RequireClientCertificate; _p->wsp__Content::sp__Basic256 = sp__Basic256; _p->wsp__Content::sp__Basic192 = sp__Basic192; _p->wsp__Content::sp__Basic128 = sp__Basic128; _p->wsp__Content::sp__TripleDes = sp__TripleDes; _p->wsp__Content::sp__Basic256Rsa15 = sp__Basic256Rsa15; _p->wsp__Content::sp__Basic192Rsa15 = sp__Basic192Rsa15; _p->wsp__Content::sp__Basic128Rsa15 = sp__Basic128Rsa15; _p->wsp__Content::sp__TripleDesRsa15 = sp__TripleDesRsa15; _p->wsp__Content::sp__Basic256Sha256 = sp__Basic256Sha256; _p->wsp__Content::sp__Basic192Sha256 = sp__Basic192Sha256; _p->wsp__Content::sp__Basic128Sha256 = sp__Basic128Sha256; _p->wsp__Content::sp__TripleDesSha256 = sp__TripleDesSha256; _p->wsp__Content::sp__Basic256Sha256Rsa15 = sp__Basic256Sha256Rsa15; _p->wsp__Content::sp__Basic192Sha256Rsa15 = sp__Basic192Sha256Rsa15; _p->wsp__Content::sp__Basic128Sha256Rsa15 = sp__Basic128Sha256Rsa15; _p->wsp__Content::sp__TripleDesSha256Rsa15 = sp__TripleDesSha256Rsa15; _p->wsp__Content::sp__InclusiveC14N = sp__InclusiveC14N; _p->wsp__Content::sp__SOAPNormalization10 = sp__SOAPNormalization10; _p->wsp__Content::sp__STRTransform10 = sp__STRTransform10; _p->wsp__Content::sp__Path10 = sp__Path10; _p->wsp__Content::sp__XPathFilter20 = sp__XPathFilter20; _p->wsp__Content::sp__AbsXPath = sp__AbsXPath; _p->wsp__Content::wsam__AnonymousResponses = wsam__AnonymousResponses; _p->wsp__Content::wsam__NonAnonymousResponses = wsam__NonAnonymousResponses; _p->wsp__Content::__any = __any; } return _p; }

inline void soap_delete_wsp__Content(struct soap *soap, wsp__Content *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsp__Content(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsp__Policy
#define SOAP_TYPE_wsp__Policy (274)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsp__Policy(struct soap*, const char*, int, const wsp__Policy *, const char*);
SOAP_FMAC3 wsp__Policy * SOAP_FMAC4 soap_in_wsp__Policy(struct soap*, const char*, wsp__Policy *, const char*);

#ifndef soap_write_wsp__Policy
#define soap_write_wsp__Policy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsp:Policy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsp__Policy * SOAP_FMAC4 soap_get_wsp__Policy(struct soap*, wsp__Policy *, const char*, const char*);

#ifndef soap_read_wsp__Policy
#define soap_read_wsp__Policy(soap, data) ( soap_begin_recv(soap) || !soap_get_wsp__Policy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsp__Policy * SOAP_FMAC2 soap_instantiate_wsp__Policy(struct soap*, int, const char*, const char*, size_t*);

inline wsp__Policy * soap_new_wsp__Policy(struct soap *soap, int n = -1) { return soap_instantiate_wsp__Policy(soap, n, NULL, NULL, NULL); }

inline wsp__Policy * soap_new_req_wsp__Policy(struct soap *soap) { wsp__Policy *_p = soap_instantiate_wsp__Policy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsp__Policy * soap_new_set_wsp__Policy(struct soap *soap, char *xml__base, char *wsu__Id, char *TargetNamespace, wsp__Policy *Policy1, wsp__PolicyReference *PolicyReference1, std::vector<wsp__Content * >& All1, std::vector<wsp__Content * >& ExactlyOne1, std::vector<sp__Parts >& sp__SignedParts1, std::vector<sp__Parts >& sp__EncryptedParts1, std::vector<sp__Parts >& sp__RequiredParts1, sp__Elements *sp__SignedElements1, sp__Elements *sp__EncryptedElements1, sp__Elements *sp__ContentEncryptedElements1, sp__Elements *sp__RequiredElements1, sp__Token *sp__UsernameToken1, sp__Token *sp__IssuedToken1, sp__Token *sp__X509Token1, sp__Token *sp__KerberosToken1, sp__Token *sp__SpnegoContextToken1, sp__Token *sp__SecurityContextToken1, sp__Token *sp__SecureConversationToken1, sp__Token *sp__SamlToken1, sp__Token *sp__RelToken1, sp__Token *sp__HttpsToken1, sp__Token *sp__KeyValueToken1, wsp__Assertion *sp__TransportBinding1, wsp__Assertion *sp__TransportToken1, wsp__Assertion *sp__AlgorithmSuite1, wsp__Assertion *sp__Layout1, wsp__Assertion *sp__SymmetricBinding1, wsp__Assertion *sp__AsymmetricBinding1, wsp__Assertion *sp__ProtectionToken1, wsp__Assertion *sp__InitiatorToken1, wsp__Assertion *sp__InitiatorSignatureToken1, wsp__Assertion *sp__InitiatorEncryptionToken1, wsp__Assertion *sp__RecipientToken1, wsp__Assertion *sp__SupportingTokens1, wsp__Assertion *sp__SignedSupportingTokens1, wsp__Assertion *sp__EndorsingSupportingTokens1, wsp__Assertion *sp__SignedEndorsingSupportingTokens1, wsp__Assertion *sp__SignedEncryptedSupportingTokens1, wsp__Assertion *sp__EncryptedSupportingTokens1, wsp__Assertion *sp__EndorsingEncryptedSupportingTokens1, wsp__Assertion *sp__SignedEndorsingEncryptedSupportingTokens1, wsp__Assertion *sp__Wss101, wsp__Assertion *sp__Wss111, wsp__Assertion *sp__Trust101, wsp__Assertion *sp__Trust131, wsp__Content *sp__BootstrapPolicy1, char *wsaw__UsingAddressing1, wsp__Assertion *wsam__Addressing1, wsrmp__RMAssertion *wsrmp__RMAssertion_1, wsrmp__RMAssertion *wsrmp__DeliveryAssurance1, char *wsrmp__AtLeastOnce1, char *wsrmp__AtMostOnce1, char *wsrmp__ExactlyOnce1, char *wsrmp__InOrder1, wsp__Assertion *sp__NoPassword1, wsp__Assertion *sp__HashPassword1, wsp__Assertion *sp__IncludeTimestamp1, wsp__Assertion *sp__EncryptBeforeSigning1, wsp__Assertion *sp__EncryptSignature1, wsp__Assertion *sp__ProtectTokens1, wsp__Assertion *sp__OnlySignEntireHeadersAndBody1, char *sp__RequireDerivedKeys1, char *sp__RequireImpliedDerivedKeys1, char *sp__RequireExplicitDerivedKeys1, char *sp__WssUsernameToken101, char *sp__WssUsernameToken111, char *sp__RequireExternalReference1, char *sp__RequireInternalReference1, char *sp__RequireKeyIdentifierReference1, char *sp__RequireIssuerSerialReference1, char *sp__RequireEmbeddedTokenReference1, char *sp__RequireThumbprintReference1, char *sp__WssX509V3Token101, char *sp__WssX509Pkcs7Token101, char *sp__WssX509PkiPathV1Token101, char *sp__WssX509V1Token111, char *sp__WssX509V3Token111, char *sp__WssX509Pkcs7Token111, char *sp__WssX509PkiPathV1Token111, char *sp__WssKerberosV5ApReqToken111, char *sp__WssGssKerberosV5ApReqToken111, char *sp__WssRelV10Token101, char *sp__WssRelV20Token101, char *sp__WssRelV10Token111, char *sp__WssRelV20Token111, char *sp__MustNotSendCancel1, char *sp__MustNotSendAmend1, char *sp__MustNotSendRenew1, char *sp__MustSupportRefKeyIdentifier1, char *sp__MustSupportRefIssuerSerial1, char *sp__MustSupportRefExternalURI1, char *sp__MustSupportRefEmbeddedToken1, char *sp__MustSupportRefThumbprint1, char *sp__MustSupportRefEncryptedKey1, char *sp__RequireSignatureConfirmation1, char *sp__MustSupportClientChallenge1, char *sp__MustSupportServerChallenge1, char *sp__RequireClientEntropy1, char *sp__RequireServerEntropy1, char *sp__MustSupportIssuedTokens1, char *sp__RequireRequestSecurityTokenCollection1, char *sp__RequireAppliesTo1, char *sp__RequireExternalUriReference1, char *sp__SC13SecurityContextToken1, char *sp__Strict1, char *sp__Lax1, char *sp__LaxTsFirst1, char *sp__LaxTsLast1, char *sp__HttpBasicAuthentication1, char *sp__HttpDigestAuthentication1, char *sp__RequireClientCertificate1, char *sp__Basic2561, char *sp__Basic1921, char *sp__Basic1281, char *sp__TripleDes1, char *sp__Basic256Rsa151, char *sp__Basic192Rsa151, char *sp__Basic128Rsa151, char *sp__TripleDesRsa151, char *sp__Basic256Sha2561, char *sp__Basic192Sha2561, char *sp__Basic128Sha2561, char *sp__TripleDesSha2561, char *sp__Basic256Sha256Rsa151, char *sp__Basic192Sha256Rsa151, char *sp__Basic128Sha256Rsa151, char *sp__TripleDesSha256Rsa151, char *sp__InclusiveC14N1, char *sp__SOAPNormalization101, char *sp__STRTransform101, char *sp__Path101, char *sp__XPathFilter201, char *sp__AbsXPath1, char *wsam__AnonymousResponses1, char *wsam__NonAnonymousResponses1, std::vector<char * >& __any1) { wsp__Policy *_p = soap_instantiate_wsp__Policy(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsp__Policy::xml__base = xml__base; _p->wsp__Policy::wsu__Id = wsu__Id; _p->wsp__Policy::TargetNamespace = TargetNamespace; _p->wsp__Content::Policy = Policy1; _p->wsp__Content::PolicyReference = PolicyReference1; _p->wsp__Content::All = All1; _p->wsp__Content::ExactlyOne = ExactlyOne1; _p->wsp__Content::sp__SignedParts = sp__SignedParts1; _p->wsp__Content::sp__EncryptedParts = sp__EncryptedParts1; _p->wsp__Content::sp__RequiredParts = sp__RequiredParts1; _p->wsp__Content::sp__SignedElements = sp__SignedElements1; _p->wsp__Content::sp__EncryptedElements = sp__EncryptedElements1; _p->wsp__Content::sp__ContentEncryptedElements = sp__ContentEncryptedElements1; _p->wsp__Content::sp__RequiredElements = sp__RequiredElements1; _p->wsp__Content::sp__UsernameToken = sp__UsernameToken1; _p->wsp__Content::sp__IssuedToken = sp__IssuedToken1; _p->wsp__Content::sp__X509Token = sp__X509Token1; _p->wsp__Content::sp__KerberosToken = sp__KerberosToken1; _p->wsp__Content::sp__SpnegoContextToken = sp__SpnegoContextToken1; _p->wsp__Content::sp__SecurityContextToken = sp__SecurityContextToken1; _p->wsp__Content::sp__SecureConversationToken = sp__SecureConversationToken1; _p->wsp__Content::sp__SamlToken = sp__SamlToken1; _p->wsp__Content::sp__RelToken = sp__RelToken1; _p->wsp__Content::sp__HttpsToken = sp__HttpsToken1; _p->wsp__Content::sp__KeyValueToken = sp__KeyValueToken1; _p->wsp__Content::sp__TransportBinding = sp__TransportBinding1; _p->wsp__Content::sp__TransportToken = sp__TransportToken1; _p->wsp__Content::sp__AlgorithmSuite = sp__AlgorithmSuite1; _p->wsp__Content::sp__Layout = sp__Layout1; _p->wsp__Content::sp__SymmetricBinding = sp__SymmetricBinding1; _p->wsp__Content::sp__AsymmetricBinding = sp__AsymmetricBinding1; _p->wsp__Content::sp__ProtectionToken = sp__ProtectionToken1; _p->wsp__Content::sp__InitiatorToken = sp__InitiatorToken1; _p->wsp__Content::sp__InitiatorSignatureToken = sp__InitiatorSignatureToken1; _p->wsp__Content::sp__InitiatorEncryptionToken = sp__InitiatorEncryptionToken1; _p->wsp__Content::sp__RecipientToken = sp__RecipientToken1; _p->wsp__Content::sp__SupportingTokens = sp__SupportingTokens1; _p->wsp__Content::sp__SignedSupportingTokens = sp__SignedSupportingTokens1; _p->wsp__Content::sp__EndorsingSupportingTokens = sp__EndorsingSupportingTokens1; _p->wsp__Content::sp__SignedEndorsingSupportingTokens = sp__SignedEndorsingSupportingTokens1; _p->wsp__Content::sp__SignedEncryptedSupportingTokens = sp__SignedEncryptedSupportingTokens1; _p->wsp__Content::sp__EncryptedSupportingTokens = sp__EncryptedSupportingTokens1; _p->wsp__Content::sp__EndorsingEncryptedSupportingTokens = sp__EndorsingEncryptedSupportingTokens1; _p->wsp__Content::sp__SignedEndorsingEncryptedSupportingTokens = sp__SignedEndorsingEncryptedSupportingTokens1; _p->wsp__Content::sp__Wss10 = sp__Wss101; _p->wsp__Content::sp__Wss11 = sp__Wss111; _p->wsp__Content::sp__Trust10 = sp__Trust101; _p->wsp__Content::sp__Trust13 = sp__Trust131; _p->wsp__Content::sp__BootstrapPolicy = sp__BootstrapPolicy1; _p->wsp__Content::wsaw__UsingAddressing = wsaw__UsingAddressing1; _p->wsp__Content::wsam__Addressing = wsam__Addressing1; _p->wsp__Content::wsrmp__RMAssertion_ = wsrmp__RMAssertion_1; _p->wsp__Content::wsrmp__DeliveryAssurance = wsrmp__DeliveryAssurance1; _p->wsp__Content::wsrmp__AtLeastOnce = wsrmp__AtLeastOnce1; _p->wsp__Content::wsrmp__AtMostOnce = wsrmp__AtMostOnce1; _p->wsp__Content::wsrmp__ExactlyOnce = wsrmp__ExactlyOnce1; _p->wsp__Content::wsrmp__InOrder = wsrmp__InOrder1; _p->wsp__Content::sp__NoPassword = sp__NoPassword1; _p->wsp__Content::sp__HashPassword = sp__HashPassword1; _p->wsp__Content::sp__IncludeTimestamp = sp__IncludeTimestamp1; _p->wsp__Content::sp__EncryptBeforeSigning = sp__EncryptBeforeSigning1; _p->wsp__Content::sp__EncryptSignature = sp__EncryptSignature1; _p->wsp__Content::sp__ProtectTokens = sp__ProtectTokens1; _p->wsp__Content::sp__OnlySignEntireHeadersAndBody = sp__OnlySignEntireHeadersAndBody1; _p->wsp__Content::sp__RequireDerivedKeys = sp__RequireDerivedKeys1; _p->wsp__Content::sp__RequireImpliedDerivedKeys = sp__RequireImpliedDerivedKeys1; _p->wsp__Content::sp__RequireExplicitDerivedKeys = sp__RequireExplicitDerivedKeys1; _p->wsp__Content::sp__WssUsernameToken10 = sp__WssUsernameToken101; _p->wsp__Content::sp__WssUsernameToken11 = sp__WssUsernameToken111; _p->wsp__Content::sp__RequireExternalReference = sp__RequireExternalReference1; _p->wsp__Content::sp__RequireInternalReference = sp__RequireInternalReference1; _p->wsp__Content::sp__RequireKeyIdentifierReference = sp__RequireKeyIdentifierReference1; _p->wsp__Content::sp__RequireIssuerSerialReference = sp__RequireIssuerSerialReference1; _p->wsp__Content::sp__RequireEmbeddedTokenReference = sp__RequireEmbeddedTokenReference1; _p->wsp__Content::sp__RequireThumbprintReference = sp__RequireThumbprintReference1; _p->wsp__Content::sp__WssX509V3Token10 = sp__WssX509V3Token101; _p->wsp__Content::sp__WssX509Pkcs7Token10 = sp__WssX509Pkcs7Token101; _p->wsp__Content::sp__WssX509PkiPathV1Token10 = sp__WssX509PkiPathV1Token101; _p->wsp__Content::sp__WssX509V1Token11 = sp__WssX509V1Token111; _p->wsp__Content::sp__WssX509V3Token11 = sp__WssX509V3Token111; _p->wsp__Content::sp__WssX509Pkcs7Token11 = sp__WssX509Pkcs7Token111; _p->wsp__Content::sp__WssX509PkiPathV1Token11 = sp__WssX509PkiPathV1Token111; _p->wsp__Content::sp__WssKerberosV5ApReqToken11 = sp__WssKerberosV5ApReqToken111; _p->wsp__Content::sp__WssGssKerberosV5ApReqToken11 = sp__WssGssKerberosV5ApReqToken111; _p->wsp__Content::sp__WssRelV10Token10 = sp__WssRelV10Token101; _p->wsp__Content::sp__WssRelV20Token10 = sp__WssRelV20Token101; _p->wsp__Content::sp__WssRelV10Token11 = sp__WssRelV10Token111; _p->wsp__Content::sp__WssRelV20Token11 = sp__WssRelV20Token111; _p->wsp__Content::sp__MustNotSendCancel = sp__MustNotSendCancel1; _p->wsp__Content::sp__MustNotSendAmend = sp__MustNotSendAmend1; _p->wsp__Content::sp__MustNotSendRenew = sp__MustNotSendRenew1; _p->wsp__Content::sp__MustSupportRefKeyIdentifier = sp__MustSupportRefKeyIdentifier1; _p->wsp__Content::sp__MustSupportRefIssuerSerial = sp__MustSupportRefIssuerSerial1; _p->wsp__Content::sp__MustSupportRefExternalURI = sp__MustSupportRefExternalURI1; _p->wsp__Content::sp__MustSupportRefEmbeddedToken = sp__MustSupportRefEmbeddedToken1; _p->wsp__Content::sp__MustSupportRefThumbprint = sp__MustSupportRefThumbprint1; _p->wsp__Content::sp__MustSupportRefEncryptedKey = sp__MustSupportRefEncryptedKey1; _p->wsp__Content::sp__RequireSignatureConfirmation = sp__RequireSignatureConfirmation1; _p->wsp__Content::sp__MustSupportClientChallenge = sp__MustSupportClientChallenge1; _p->wsp__Content::sp__MustSupportServerChallenge = sp__MustSupportServerChallenge1; _p->wsp__Content::sp__RequireClientEntropy = sp__RequireClientEntropy1; _p->wsp__Content::sp__RequireServerEntropy = sp__RequireServerEntropy1; _p->wsp__Content::sp__MustSupportIssuedTokens = sp__MustSupportIssuedTokens1; _p->wsp__Content::sp__RequireRequestSecurityTokenCollection = sp__RequireRequestSecurityTokenCollection1; _p->wsp__Content::sp__RequireAppliesTo = sp__RequireAppliesTo1; _p->wsp__Content::sp__RequireExternalUriReference = sp__RequireExternalUriReference1; _p->wsp__Content::sp__SC13SecurityContextToken = sp__SC13SecurityContextToken1; _p->wsp__Content::sp__Strict = sp__Strict1; _p->wsp__Content::sp__Lax = sp__Lax1; _p->wsp__Content::sp__LaxTsFirst = sp__LaxTsFirst1; _p->wsp__Content::sp__LaxTsLast = sp__LaxTsLast1; _p->wsp__Content::sp__HttpBasicAuthentication = sp__HttpBasicAuthentication1; _p->wsp__Content::sp__HttpDigestAuthentication = sp__HttpDigestAuthentication1; _p->wsp__Content::sp__RequireClientCertificate = sp__RequireClientCertificate1; _p->wsp__Content::sp__Basic256 = sp__Basic2561; _p->wsp__Content::sp__Basic192 = sp__Basic1921; _p->wsp__Content::sp__Basic128 = sp__Basic1281; _p->wsp__Content::sp__TripleDes = sp__TripleDes1; _p->wsp__Content::sp__Basic256Rsa15 = sp__Basic256Rsa151; _p->wsp__Content::sp__Basic192Rsa15 = sp__Basic192Rsa151; _p->wsp__Content::sp__Basic128Rsa15 = sp__Basic128Rsa151; _p->wsp__Content::sp__TripleDesRsa15 = sp__TripleDesRsa151; _p->wsp__Content::sp__Basic256Sha256 = sp__Basic256Sha2561; _p->wsp__Content::sp__Basic192Sha256 = sp__Basic192Sha2561; _p->wsp__Content::sp__Basic128Sha256 = sp__Basic128Sha2561; _p->wsp__Content::sp__TripleDesSha256 = sp__TripleDesSha2561; _p->wsp__Content::sp__Basic256Sha256Rsa15 = sp__Basic256Sha256Rsa151; _p->wsp__Content::sp__Basic192Sha256Rsa15 = sp__Basic192Sha256Rsa151; _p->wsp__Content::sp__Basic128Sha256Rsa15 = sp__Basic128Sha256Rsa151; _p->wsp__Content::sp__TripleDesSha256Rsa15 = sp__TripleDesSha256Rsa151; _p->wsp__Content::sp__InclusiveC14N = sp__InclusiveC14N1; _p->wsp__Content::sp__SOAPNormalization10 = sp__SOAPNormalization101; _p->wsp__Content::sp__STRTransform10 = sp__STRTransform101; _p->wsp__Content::sp__Path10 = sp__Path101; _p->wsp__Content::sp__XPathFilter20 = sp__XPathFilter201; _p->wsp__Content::sp__AbsXPath = sp__AbsXPath1; _p->wsp__Content::wsam__AnonymousResponses = wsam__AnonymousResponses1; _p->wsp__Content::wsam__NonAnonymousResponses = wsam__NonAnonymousResponses1; _p->wsp__Content::__any = __any1; } return _p; }

inline void soap_delete_wsp__Policy(struct soap *soap, wsp__Policy *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsp__Policy(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsa__EndpointReferenceType
#define SOAP_TYPE_wsa__EndpointReferenceType (273)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa__EndpointReferenceType(struct soap*, const char*, int, const wsa__EndpointReferenceType *, const char*);
SOAP_FMAC3 wsa__EndpointReferenceType * SOAP_FMAC4 soap_in_wsa__EndpointReferenceType(struct soap*, const char*, wsa__EndpointReferenceType *, const char*);

#ifndef soap_write_wsa__EndpointReferenceType
#define soap_write_wsa__EndpointReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsa:EndpointReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsa__EndpointReferenceType * SOAP_FMAC4 soap_get_wsa__EndpointReferenceType(struct soap*, wsa__EndpointReferenceType *, const char*, const char*);

#ifndef soap_read_wsa__EndpointReferenceType
#define soap_read_wsa__EndpointReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_wsa__EndpointReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsa__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline wsa__EndpointReferenceType * soap_new_wsa__EndpointReferenceType(struct soap *soap, int n = -1) { return soap_instantiate_wsa__EndpointReferenceType(soap, n, NULL, NULL, NULL); }

inline wsa__EndpointReferenceType * soap_new_req_wsa__EndpointReferenceType(struct soap *soap) { wsa__EndpointReferenceType *_p = soap_instantiate_wsa__EndpointReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsa__EndpointReferenceType * soap_new_set_wsa__EndpointReferenceType(struct soap *soap, char *Address, char *__any) { wsa__EndpointReferenceType *_p = soap_instantiate_wsa__EndpointReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsa__EndpointReferenceType::Address = Address; _p->wsa__EndpointReferenceType::__any = __any; } return _p; }

inline void soap_delete_wsa__EndpointReferenceType(struct soap *soap, wsa__EndpointReferenceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa__EndpointReferenceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_gwsdl__portType
#define SOAP_TYPE_gwsdl__portType (268)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_gwsdl__portType(struct soap*, const char*, int, const gwsdl__portType *, const char*);
SOAP_FMAC3 gwsdl__portType * SOAP_FMAC4 soap_in_gwsdl__portType(struct soap*, const char*, gwsdl__portType *, const char*);

#ifndef soap_write_gwsdl__portType
#define soap_write_gwsdl__portType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "gwsdl:portType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 gwsdl__portType * SOAP_FMAC4 soap_get_gwsdl__portType(struct soap*, gwsdl__portType *, const char*, const char*);

#ifndef soap_read_gwsdl__portType
#define soap_read_gwsdl__portType(soap, data) ( soap_begin_recv(soap) || !soap_get_gwsdl__portType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 gwsdl__portType * SOAP_FMAC2 soap_instantiate_gwsdl__portType(struct soap*, int, const char*, const char*, size_t*);

inline gwsdl__portType * soap_new_gwsdl__portType(struct soap *soap, int n = -1) { return soap_instantiate_gwsdl__portType(soap, n, NULL, NULL, NULL); }

inline gwsdl__portType * soap_new_req_gwsdl__portType(struct soap *soap) { gwsdl__portType *_p = soap_instantiate_gwsdl__portType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline gwsdl__portType * soap_new_set_gwsdl__portType(struct soap *soap, char *name, char *extends, char *documentation, std::vector<wsdl__operation * >& operation, std::vector<sd__serviceData >& sd__serviceData_, sd__staticServiceDataValues *sd__staticServiceDataValues_) { gwsdl__portType *_p = soap_instantiate_gwsdl__portType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->gwsdl__portType::name = name; _p->gwsdl__portType::extends = extends; _p->gwsdl__portType::documentation = documentation; _p->gwsdl__portType::operation = operation; _p->gwsdl__portType::sd__serviceData_ = sd__serviceData_; _p->gwsdl__portType::sd__staticServiceDataValues_ = sd__staticServiceDataValues_; } return _p; }

inline void soap_delete_gwsdl__portType(struct soap *soap, gwsdl__portType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_gwsdl__portType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_sd__staticServiceDataValues
#define SOAP_TYPE_sd__staticServiceDataValues (266)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_sd__staticServiceDataValues(struct soap*, const char*, int, const sd__staticServiceDataValues *, const char*);
SOAP_FMAC3 sd__staticServiceDataValues * SOAP_FMAC4 soap_in_sd__staticServiceDataValues(struct soap*, const char*, sd__staticServiceDataValues *, const char*);

#ifndef soap_write_sd__staticServiceDataValues
#define soap_write_sd__staticServiceDataValues(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "sd:staticServiceDataValues", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 sd__staticServiceDataValues * SOAP_FMAC4 soap_get_sd__staticServiceDataValues(struct soap*, sd__staticServiceDataValues *, const char*, const char*);

#ifndef soap_read_sd__staticServiceDataValues
#define soap_read_sd__staticServiceDataValues(soap, data) ( soap_begin_recv(soap) || !soap_get_sd__staticServiceDataValues(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 sd__staticServiceDataValues * SOAP_FMAC2 soap_instantiate_sd__staticServiceDataValues(struct soap*, int, const char*, const char*, size_t*);

inline sd__staticServiceDataValues * soap_new_sd__staticServiceDataValues(struct soap *soap, int n = -1) { return soap_instantiate_sd__staticServiceDataValues(soap, n, NULL, NULL, NULL); }

inline sd__staticServiceDataValues * soap_new_req_sd__staticServiceDataValues(struct soap *soap, int __type, void *_any) { sd__staticServiceDataValues *_p = soap_instantiate_sd__staticServiceDataValues(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->sd__staticServiceDataValues::__type = __type; _p->sd__staticServiceDataValues::_any = _any; } return _p; }

inline sd__staticServiceDataValues * soap_new_set_sd__staticServiceDataValues(struct soap *soap, int __type, void *_any) { sd__staticServiceDataValues *_p = soap_instantiate_sd__staticServiceDataValues(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->sd__staticServiceDataValues::__type = __type; _p->sd__staticServiceDataValues::_any = _any; } return _p; }

inline void soap_delete_sd__staticServiceDataValues(struct soap *soap, sd__staticServiceDataValues *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_sd__staticServiceDataValues(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_sd__serviceData
#define SOAP_TYPE_sd__serviceData (265)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_sd__serviceData(struct soap*, const char*, int, const sd__serviceData *, const char*);
SOAP_FMAC3 sd__serviceData * SOAP_FMAC4 soap_in_sd__serviceData(struct soap*, const char*, sd__serviceData *, const char*);

#ifndef soap_write_sd__serviceData
#define soap_write_sd__serviceData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "sd:serviceData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 sd__serviceData * SOAP_FMAC4 soap_get_sd__serviceData(struct soap*, sd__serviceData *, const char*, const char*);

#ifndef soap_read_sd__serviceData
#define soap_read_sd__serviceData(soap, data) ( soap_begin_recv(soap) || !soap_get_sd__serviceData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 sd__serviceData * SOAP_FMAC2 soap_instantiate_sd__serviceData(struct soap*, int, const char*, const char*, size_t*);

inline sd__serviceData * soap_new_sd__serviceData(struct soap *soap, int n = -1) { return soap_instantiate_sd__serviceData(soap, n, NULL, NULL, NULL); }

inline sd__serviceData * soap_new_req_sd__serviceData(struct soap *soap) { sd__serviceData *_p = soap_instantiate_sd__serviceData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline sd__serviceData * soap_new_set_sd__serviceData(struct soap *soap, char *name, char *type, bool nillable, char *minOccurs, char *maxOccurs, enum sd__mutability mutability, bool modifiable) { sd__serviceData *_p = soap_instantiate_sd__serviceData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->sd__serviceData::name = name; _p->sd__serviceData::type = type; _p->sd__serviceData::nillable = nillable; _p->sd__serviceData::minOccurs = minOccurs; _p->sd__serviceData::maxOccurs = maxOccurs; _p->sd__serviceData::mutability = mutability; _p->sd__serviceData::modifiable = modifiable; } return _p; }

inline void soap_delete_sd__serviceData(struct soap *soap, sd__serviceData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_sd__serviceData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsdl__operation
#define SOAP_TYPE_wsdl__operation (263)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__operation(struct soap*, const char*, int, const wsdl__operation *, const char*);
SOAP_FMAC3 wsdl__operation * SOAP_FMAC4 soap_in_wsdl__operation(struct soap*, const char*, wsdl__operation *, const char*);

#ifndef soap_write_wsdl__operation
#define soap_write_wsdl__operation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsdl:operation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__operation * SOAP_FMAC4 soap_get_wsdl__operation(struct soap*, wsdl__operation *, const char*, const char*);

#ifndef soap_read_wsdl__operation
#define soap_read_wsdl__operation(soap, data) ( soap_begin_recv(soap) || !soap_get_wsdl__operation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsdl__operation * SOAP_FMAC2 soap_instantiate_wsdl__operation(struct soap*, int, const char*, const char*, size_t*);

inline wsdl__operation * soap_new_wsdl__operation(struct soap *soap, int n = -1) { return soap_instantiate_wsdl__operation(soap, n, NULL, NULL, NULL); }

inline wsdl__operation * soap_new_req_wsdl__operation(struct soap *soap, int __union1, union wsdl__union_ioput& __ioput1, int __union2, union wsdl__union_ioput& __ioput2) { wsdl__operation *_p = soap_instantiate_wsdl__operation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__operation::__union1 = __union1; _p->wsdl__operation::__ioput1 = __ioput1; _p->wsdl__operation::__union2 = __union2; _p->wsdl__operation::__ioput2 = __ioput2; } return _p; }

inline wsdl__operation * soap_new_set_wsdl__operation(struct soap *soap, char *name, char *pattern, char *style, char *wrpc__signature, char *parameterOrder, char *documentation, wsp__Policy *wsp__Policy_, wsp__PolicyReference *wsp__PolicyReference_, int __union1, union wsdl__union_ioput& __ioput1, int __union2, union wsdl__union_ioput& __ioput2, std::vector<wsdl__fault >& fault, std::vector<wsdl__fault >& infault, std::vector<wsdl__fault >& outfault) { wsdl__operation *_p = soap_instantiate_wsdl__operation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__operation::name = name; _p->wsdl__operation::pattern = pattern; _p->wsdl__operation::style = style; _p->wsdl__operation::wrpc__signature = wrpc__signature; _p->wsdl__operation::parameterOrder = parameterOrder; _p->wsdl__operation::documentation = documentation; _p->wsdl__operation::wsp__Policy_ = wsp__Policy_; _p->wsdl__operation::wsp__PolicyReference_ = wsp__PolicyReference_; _p->wsdl__operation::__union1 = __union1; _p->wsdl__operation::__ioput1 = __ioput1; _p->wsdl__operation::__union2 = __union2; _p->wsdl__operation::__ioput2 = __ioput2; _p->wsdl__operation::fault = fault; _p->wsdl__operation::infault = infault; _p->wsdl__operation::outfault = outfault; } return _p; }

inline void soap_delete_wsdl__operation(struct soap *soap, wsdl__operation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__operation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_whttp__header
#define SOAP_TYPE_whttp__header (262)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_whttp__header(struct soap*, const char*, int, const whttp__header *, const char*);
SOAP_FMAC3 whttp__header * SOAP_FMAC4 soap_in_whttp__header(struct soap*, const char*, whttp__header *, const char*);

#ifndef soap_write_whttp__header
#define soap_write_whttp__header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "whttp:header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 whttp__header * SOAP_FMAC4 soap_get_whttp__header(struct soap*, whttp__header *, const char*, const char*);

#ifndef soap_read_whttp__header
#define soap_read_whttp__header(soap, data) ( soap_begin_recv(soap) || !soap_get_whttp__header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 whttp__header * SOAP_FMAC2 soap_instantiate_whttp__header(struct soap*, int, const char*, const char*, size_t*);

inline whttp__header * soap_new_whttp__header(struct soap *soap, int n = -1) { return soap_instantiate_whttp__header(soap, n, NULL, NULL, NULL); }

inline whttp__header * soap_new_req_whttp__header(struct soap *soap) { whttp__header *_p = soap_instantiate_whttp__header(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline whttp__header * soap_new_set_whttp__header(struct soap *soap, char *name, char *type, bool required) { whttp__header *_p = soap_instantiate_whttp__header(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->whttp__header::name = name; _p->whttp__header::type = type; _p->whttp__header::required = required; } return _p; }

inline void soap_delete_whttp__header(struct soap *soap, whttp__header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_whttp__header(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_http__operation
#define SOAP_TYPE_http__operation (261)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_http__operation(struct soap*, const char*, int, const http__operation *, const char*);
SOAP_FMAC3 http__operation * SOAP_FMAC4 soap_in_http__operation(struct soap*, const char*, http__operation *, const char*);

#ifndef soap_write_http__operation
#define soap_write_http__operation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "http:operation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 http__operation * SOAP_FMAC4 soap_get_http__operation(struct soap*, http__operation *, const char*, const char*);

#ifndef soap_read_http__operation
#define soap_read_http__operation(soap, data) ( soap_begin_recv(soap) || !soap_get_http__operation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 http__operation * SOAP_FMAC2 soap_instantiate_http__operation(struct soap*, int, const char*, const char*, size_t*);

inline http__operation * soap_new_http__operation(struct soap *soap, int n = -1) { return soap_instantiate_http__operation(soap, n, NULL, NULL, NULL); }

inline http__operation * soap_new_req_http__operation(struct soap *soap) { http__operation *_p = soap_instantiate_http__operation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline http__operation * soap_new_set_http__operation(struct soap *soap, char *location) { http__operation *_p = soap_instantiate_http__operation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->http__operation::location = location; } return _p; }

inline void soap_delete_http__operation(struct soap *soap, http__operation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_http__operation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_http__binding
#define SOAP_TYPE_http__binding (260)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_http__binding(struct soap*, const char*, int, const http__binding *, const char*);
SOAP_FMAC3 http__binding * SOAP_FMAC4 soap_in_http__binding(struct soap*, const char*, http__binding *, const char*);

#ifndef soap_write_http__binding
#define soap_write_http__binding(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "http:binding", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 http__binding * SOAP_FMAC4 soap_get_http__binding(struct soap*, http__binding *, const char*, const char*);

#ifndef soap_read_http__binding
#define soap_read_http__binding(soap, data) ( soap_begin_recv(soap) || !soap_get_http__binding(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 http__binding * SOAP_FMAC2 soap_instantiate_http__binding(struct soap*, int, const char*, const char*, size_t*);

inline http__binding * soap_new_http__binding(struct soap *soap, int n = -1) { return soap_instantiate_http__binding(soap, n, NULL, NULL, NULL); }

inline http__binding * soap_new_req_http__binding(struct soap *soap) { http__binding *_p = soap_instantiate_http__binding(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline http__binding * soap_new_set_http__binding(struct soap *soap, char *verb) { http__binding *_p = soap_instantiate_http__binding(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->http__binding::verb = verb; } return _p; }

inline void soap_delete_http__binding(struct soap *soap, http__binding *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_http__binding(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_http__address
#define SOAP_TYPE_http__address (259)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_http__address(struct soap*, const char*, int, const http__address *, const char*);
SOAP_FMAC3 http__address * SOAP_FMAC4 soap_in_http__address(struct soap*, const char*, http__address *, const char*);

#ifndef soap_write_http__address
#define soap_write_http__address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "http:address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 http__address * SOAP_FMAC4 soap_get_http__address(struct soap*, http__address *, const char*, const char*);

#ifndef soap_read_http__address
#define soap_read_http__address(soap, data) ( soap_begin_recv(soap) || !soap_get_http__address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 http__address * SOAP_FMAC2 soap_instantiate_http__address(struct soap*, int, const char*, const char*, size_t*);

inline http__address * soap_new_http__address(struct soap *soap, int n = -1) { return soap_instantiate_http__address(soap, n, NULL, NULL, NULL); }

inline http__address * soap_new_req_http__address(struct soap *soap) { http__address *_p = soap_instantiate_http__address(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline http__address * soap_new_set_http__address(struct soap *soap, char *location) { http__address *_p = soap_instantiate_http__address(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->http__address::location = location; } return _p; }

inline void soap_delete_http__address(struct soap *soap, http__address *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_http__address(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_dime__message
#define SOAP_TYPE_dime__message (258)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_dime__message(struct soap*, const char*, int, const dime__message *, const char*);
SOAP_FMAC3 dime__message * SOAP_FMAC4 soap_in_dime__message(struct soap*, const char*, dime__message *, const char*);

#ifndef soap_write_dime__message
#define soap_write_dime__message(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "dime:message", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 dime__message * SOAP_FMAC4 soap_get_dime__message(struct soap*, dime__message *, const char*, const char*);

#ifndef soap_read_dime__message
#define soap_read_dime__message(soap, data) ( soap_begin_recv(soap) || !soap_get_dime__message(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 dime__message * SOAP_FMAC2 soap_instantiate_dime__message(struct soap*, int, const char*, const char*, size_t*);

inline dime__message * soap_new_dime__message(struct soap *soap, int n = -1) { return soap_instantiate_dime__message(soap, n, NULL, NULL, NULL); }

inline dime__message * soap_new_req_dime__message(struct soap *soap) { dime__message *_p = soap_instantiate_dime__message(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline dime__message * soap_new_set_dime__message(struct soap *soap, char *layout) { dime__message *_p = soap_instantiate_dime__message(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->dime__message::layout = layout; } return _p; }

inline void soap_delete_dime__message(struct soap *soap, dime__message *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_dime__message(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mime__mimeXml
#define SOAP_TYPE_mime__mimeXml (257)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mime__mimeXml(struct soap*, const char*, int, const mime__mimeXml *, const char*);
SOAP_FMAC3 mime__mimeXml * SOAP_FMAC4 soap_in_mime__mimeXml(struct soap*, const char*, mime__mimeXml *, const char*);

#ifndef soap_write_mime__mimeXml
#define soap_write_mime__mimeXml(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "mime:mimeXml", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 mime__mimeXml * SOAP_FMAC4 soap_get_mime__mimeXml(struct soap*, mime__mimeXml *, const char*, const char*);

#ifndef soap_read_mime__mimeXml
#define soap_read_mime__mimeXml(soap, data) ( soap_begin_recv(soap) || !soap_get_mime__mimeXml(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 mime__mimeXml * SOAP_FMAC2 soap_instantiate_mime__mimeXml(struct soap*, int, const char*, const char*, size_t*);

inline mime__mimeXml * soap_new_mime__mimeXml(struct soap *soap, int n = -1) { return soap_instantiate_mime__mimeXml(soap, n, NULL, NULL, NULL); }

inline mime__mimeXml * soap_new_req_mime__mimeXml(struct soap *soap) { mime__mimeXml *_p = soap_instantiate_mime__mimeXml(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline mime__mimeXml * soap_new_set_mime__mimeXml(struct soap *soap, char *part) { mime__mimeXml *_p = soap_instantiate_mime__mimeXml(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->mime__mimeXml::part = part; } return _p; }

inline void soap_delete_mime__mimeXml(struct soap *soap, mime__mimeXml *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mime__mimeXml(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mime__multipartRelated
#define SOAP_TYPE_mime__multipartRelated (254)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mime__multipartRelated(struct soap*, const char*, int, const mime__multipartRelated *, const char*);
SOAP_FMAC3 mime__multipartRelated * SOAP_FMAC4 soap_in_mime__multipartRelated(struct soap*, const char*, mime__multipartRelated *, const char*);

#ifndef soap_write_mime__multipartRelated
#define soap_write_mime__multipartRelated(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "mime:multipartRelated", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 mime__multipartRelated * SOAP_FMAC4 soap_get_mime__multipartRelated(struct soap*, mime__multipartRelated *, const char*, const char*);

#ifndef soap_read_mime__multipartRelated
#define soap_read_mime__multipartRelated(soap, data) ( soap_begin_recv(soap) || !soap_get_mime__multipartRelated(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 mime__multipartRelated * SOAP_FMAC2 soap_instantiate_mime__multipartRelated(struct soap*, int, const char*, const char*, size_t*);

inline mime__multipartRelated * soap_new_mime__multipartRelated(struct soap *soap, int n = -1) { return soap_instantiate_mime__multipartRelated(soap, n, NULL, NULL, NULL); }

inline mime__multipartRelated * soap_new_req_mime__multipartRelated(struct soap *soap) { mime__multipartRelated *_p = soap_instantiate_mime__multipartRelated(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline mime__multipartRelated * soap_new_set_mime__multipartRelated(struct soap *soap, std::vector<mime__part >& part) { mime__multipartRelated *_p = soap_instantiate_mime__multipartRelated(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->mime__multipartRelated::part = part; } return _p; }

inline void soap_delete_mime__multipartRelated(struct soap *soap, mime__multipartRelated *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mime__multipartRelated(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mime__part
#define SOAP_TYPE_mime__part (249)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mime__part(struct soap*, const char*, int, const mime__part *, const char*);
SOAP_FMAC3 mime__part * SOAP_FMAC4 soap_in_mime__part(struct soap*, const char*, mime__part *, const char*);

#ifndef soap_write_mime__part
#define soap_write_mime__part(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "mime:part", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 mime__part * SOAP_FMAC4 soap_get_mime__part(struct soap*, mime__part *, const char*, const char*);

#ifndef soap_read_mime__part
#define soap_read_mime__part(soap, data) ( soap_begin_recv(soap) || !soap_get_mime__part(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 mime__part * SOAP_FMAC2 soap_instantiate_mime__part(struct soap*, int, const char*, const char*, size_t*);

inline mime__part * soap_new_mime__part(struct soap *soap, int n = -1) { return soap_instantiate_mime__part(soap, n, NULL, NULL, NULL); }

inline mime__part * soap_new_req_mime__part(struct soap *soap) { mime__part *_p = soap_instantiate_mime__part(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline mime__part * soap_new_set_mime__part(struct soap *soap, soap__body *soap__body_, std::vector<soap__header >& soap__header_, std::vector<mime__content >& content) { mime__part *_p = soap_instantiate_mime__part(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->mime__part::soap__body_ = soap__body_; _p->mime__part::soap__header_ = soap__header_; _p->mime__part::content = content; } return _p; }

inline void soap_delete_mime__part(struct soap *soap, mime__part *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mime__part(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_mime__content
#define SOAP_TYPE_mime__content (248)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mime__content(struct soap*, const char*, int, const mime__content *, const char*);
SOAP_FMAC3 mime__content * SOAP_FMAC4 soap_in_mime__content(struct soap*, const char*, mime__content *, const char*);

#ifndef soap_write_mime__content
#define soap_write_mime__content(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "mime:content", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 mime__content * SOAP_FMAC4 soap_get_mime__content(struct soap*, mime__content *, const char*, const char*);

#ifndef soap_read_mime__content
#define soap_read_mime__content(soap, data) ( soap_begin_recv(soap) || !soap_get_mime__content(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 mime__content * SOAP_FMAC2 soap_instantiate_mime__content(struct soap*, int, const char*, const char*, size_t*);

inline mime__content * soap_new_mime__content(struct soap *soap, int n = -1) { return soap_instantiate_mime__content(soap, n, NULL, NULL, NULL); }

inline mime__content * soap_new_req_mime__content(struct soap *soap) { mime__content *_p = soap_instantiate_mime__content(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline mime__content * soap_new_set_mime__content(struct soap *soap, char *part, char *type) { mime__content *_p = soap_instantiate_mime__content(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->mime__content::part = part; _p->mime__content::type = type; } return _p; }

inline void soap_delete_mime__content(struct soap *soap, mime__content *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mime__content(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsoap__header
#define SOAP_TYPE_wsoap__header (244)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsoap__header(struct soap*, const char*, int, const wsoap__header *, const char*);
SOAP_FMAC3 wsoap__header * SOAP_FMAC4 soap_in_wsoap__header(struct soap*, const char*, wsoap__header *, const char*);

#ifndef soap_write_wsoap__header
#define soap_write_wsoap__header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsoap:header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsoap__header * SOAP_FMAC4 soap_get_wsoap__header(struct soap*, wsoap__header *, const char*, const char*);

#ifndef soap_read_wsoap__header
#define soap_read_wsoap__header(soap, data) ( soap_begin_recv(soap) || !soap_get_wsoap__header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsoap__header * SOAP_FMAC2 soap_instantiate_wsoap__header(struct soap*, int, const char*, const char*, size_t*);

inline wsoap__header * soap_new_wsoap__header(struct soap *soap, int n = -1) { return soap_instantiate_wsoap__header(soap, n, NULL, NULL, NULL); }

inline wsoap__header * soap_new_req_wsoap__header(struct soap *soap) { wsoap__header *_p = soap_instantiate_wsoap__header(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsoap__header * soap_new_set_wsoap__header(struct soap *soap, char *element, bool mustUnderstand_, bool required) { wsoap__header *_p = soap_instantiate_wsoap__header(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsoap__header::element = element; _p->wsoap__header::mustUnderstand_ = mustUnderstand_; _p->wsoap__header::required = required; } return _p; }

inline void soap_delete_wsoap__header(struct soap *soap, wsoap__header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsoap__header(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsoap__module
#define SOAP_TYPE_wsoap__module (243)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsoap__module(struct soap*, const char*, int, const wsoap__module *, const char*);
SOAP_FMAC3 wsoap__module * SOAP_FMAC4 soap_in_wsoap__module(struct soap*, const char*, wsoap__module *, const char*);

#ifndef soap_write_wsoap__module
#define soap_write_wsoap__module(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsoap:module", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsoap__module * SOAP_FMAC4 soap_get_wsoap__module(struct soap*, wsoap__module *, const char*, const char*);

#ifndef soap_read_wsoap__module
#define soap_read_wsoap__module(soap, data) ( soap_begin_recv(soap) || !soap_get_wsoap__module(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsoap__module * SOAP_FMAC2 soap_instantiate_wsoap__module(struct soap*, int, const char*, const char*, size_t*);

inline wsoap__module * soap_new_wsoap__module(struct soap *soap, int n = -1) { return soap_instantiate_wsoap__module(soap, n, NULL, NULL, NULL); }

inline wsoap__module * soap_new_req_wsoap__module(struct soap *soap) { wsoap__module *_p = soap_instantiate_wsoap__module(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsoap__module * soap_new_set_wsoap__module(struct soap *soap, char *ref, bool required) { wsoap__module *_p = soap_instantiate_wsoap__module(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsoap__module::ref = ref; _p->wsoap__module::required = required; } return _p; }

inline void soap_delete_wsoap__module(struct soap *soap, wsoap__module *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsoap__module(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_soap__address
#define SOAP_TYPE_soap__address (242)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap__address(struct soap*, const char*, int, const soap__address *, const char*);
SOAP_FMAC3 soap__address * SOAP_FMAC4 soap_in_soap__address(struct soap*, const char*, soap__address *, const char*);

#ifndef soap_write_soap__address
#define soap_write_soap__address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "soap:address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 soap__address * SOAP_FMAC4 soap_get_soap__address(struct soap*, soap__address *, const char*, const char*);

#ifndef soap_read_soap__address
#define soap_read_soap__address(soap, data) ( soap_begin_recv(soap) || !soap_get_soap__address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 soap__address * SOAP_FMAC2 soap_instantiate_soap__address(struct soap*, int, const char*, const char*, size_t*);

inline soap__address * soap_new_soap__address(struct soap *soap, int n = -1) { return soap_instantiate_soap__address(soap, n, NULL, NULL, NULL); }

inline soap__address * soap_new_req_soap__address(struct soap *soap) { soap__address *_p = soap_instantiate_soap__address(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline soap__address * soap_new_set_soap__address(struct soap *soap, char *location) { soap__address *_p = soap_instantiate_soap__address(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->soap__address::location = location; } return _p; }

inline void soap_delete_soap__address(struct soap *soap, soap__address *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_soap__address(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_soap__header
#define SOAP_TYPE_soap__header (235)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap__header(struct soap*, const char*, int, const soap__header *, const char*);
SOAP_FMAC3 soap__header * SOAP_FMAC4 soap_in_soap__header(struct soap*, const char*, soap__header *, const char*);

#ifndef soap_write_soap__header
#define soap_write_soap__header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "soap:header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 soap__header * SOAP_FMAC4 soap_get_soap__header(struct soap*, soap__header *, const char*, const char*);

#ifndef soap_read_soap__header
#define soap_read_soap__header(soap, data) ( soap_begin_recv(soap) || !soap_get_soap__header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 soap__header * SOAP_FMAC2 soap_instantiate_soap__header(struct soap*, int, const char*, const char*, size_t*);

inline soap__header * soap_new_soap__header(struct soap *soap, int n = -1) { return soap_instantiate_soap__header(soap, n, NULL, NULL, NULL); }

inline soap__header * soap_new_req_soap__header(struct soap *soap) { soap__header *_p = soap_instantiate_soap__header(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline soap__header * soap_new_set_soap__header(struct soap *soap, char *message, char *part, enum soap__useChoice use, char *encodingStyle, char *namespace_, std::vector<soap__headerfault >& headerfault) { soap__header *_p = soap_instantiate_soap__header(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->soap__header::message = message; _p->soap__header::part = part; _p->soap__header::use = use; _p->soap__header::encodingStyle = encodingStyle; _p->soap__header::namespace_ = namespace_; _p->soap__header::headerfault = headerfault; } return _p; }

inline void soap_delete_soap__header(struct soap *soap, soap__header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_soap__header(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_soap__headerfault
#define SOAP_TYPE_soap__headerfault (224)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap__headerfault(struct soap*, const char*, int, const soap__headerfault *, const char*);
SOAP_FMAC3 soap__headerfault * SOAP_FMAC4 soap_in_soap__headerfault(struct soap*, const char*, soap__headerfault *, const char*);

#ifndef soap_write_soap__headerfault
#define soap_write_soap__headerfault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "soap:headerfault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 soap__headerfault * SOAP_FMAC4 soap_get_soap__headerfault(struct soap*, soap__headerfault *, const char*, const char*);

#ifndef soap_read_soap__headerfault
#define soap_read_soap__headerfault(soap, data) ( soap_begin_recv(soap) || !soap_get_soap__headerfault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 soap__headerfault * SOAP_FMAC2 soap_instantiate_soap__headerfault(struct soap*, int, const char*, const char*, size_t*);

inline soap__headerfault * soap_new_soap__headerfault(struct soap *soap, int n = -1) { return soap_instantiate_soap__headerfault(soap, n, NULL, NULL, NULL); }

inline soap__headerfault * soap_new_req_soap__headerfault(struct soap *soap) { soap__headerfault *_p = soap_instantiate_soap__headerfault(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline soap__headerfault * soap_new_set_soap__headerfault(struct soap *soap, char *message, char *part, enum soap__useChoice use, char *encodingStyle, char *namespace_) { soap__headerfault *_p = soap_instantiate_soap__headerfault(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->soap__headerfault::message = message; _p->soap__headerfault::part = part; _p->soap__headerfault::use = use; _p->soap__headerfault::encodingStyle = encodingStyle; _p->soap__headerfault::namespace_ = namespace_; } return _p; }

inline void soap_delete_soap__headerfault(struct soap *soap, soap__headerfault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_soap__headerfault(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_soap__fault
#define SOAP_TYPE_soap__fault (223)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap__fault(struct soap*, const char*, int, const soap__fault *, const char*);
SOAP_FMAC3 soap__fault * SOAP_FMAC4 soap_in_soap__fault(struct soap*, const char*, soap__fault *, const char*);

#ifndef soap_write_soap__fault
#define soap_write_soap__fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "soap:fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 soap__fault * SOAP_FMAC4 soap_get_soap__fault(struct soap*, soap__fault *, const char*, const char*);

#ifndef soap_read_soap__fault
#define soap_read_soap__fault(soap, data) ( soap_begin_recv(soap) || !soap_get_soap__fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 soap__fault * SOAP_FMAC2 soap_instantiate_soap__fault(struct soap*, int, const char*, const char*, size_t*);

inline soap__fault * soap_new_soap__fault(struct soap *soap, int n = -1) { return soap_instantiate_soap__fault(soap, n, NULL, NULL, NULL); }

inline soap__fault * soap_new_req_soap__fault(struct soap *soap) { soap__fault *_p = soap_instantiate_soap__fault(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline soap__fault * soap_new_set_soap__fault(struct soap *soap, char *name, char *encodingStyle, enum soap__useChoice use, char *namespace_) { soap__fault *_p = soap_instantiate_soap__fault(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->soap__fault::name = name; _p->soap__fault::encodingStyle = encodingStyle; _p->soap__fault::use = use; _p->soap__fault::namespace_ = namespace_; } return _p; }

inline void soap_delete_soap__fault(struct soap *soap, soap__fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_soap__fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_soap__body
#define SOAP_TYPE_soap__body (222)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap__body(struct soap*, const char*, int, const soap__body *, const char*);
SOAP_FMAC3 soap__body * SOAP_FMAC4 soap_in_soap__body(struct soap*, const char*, soap__body *, const char*);

#ifndef soap_write_soap__body
#define soap_write_soap__body(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "soap:body", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 soap__body * SOAP_FMAC4 soap_get_soap__body(struct soap*, soap__body *, const char*, const char*);

#ifndef soap_read_soap__body
#define soap_read_soap__body(soap, data) ( soap_begin_recv(soap) || !soap_get_soap__body(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 soap__body * SOAP_FMAC2 soap_instantiate_soap__body(struct soap*, int, const char*, const char*, size_t*);

inline soap__body * soap_new_soap__body(struct soap *soap, int n = -1) { return soap_instantiate_soap__body(soap, n, NULL, NULL, NULL); }

inline soap__body * soap_new_req_soap__body(struct soap *soap) { soap__body *_p = soap_instantiate_soap__body(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline soap__body * soap_new_set_soap__body(struct soap *soap, char *encodingStyle, char *parts, enum soap__useChoice use, char *namespace_) { soap__body *_p = soap_instantiate_soap__body(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->soap__body::encodingStyle = encodingStyle; _p->soap__body::parts = parts; _p->soap__body::use = use; _p->soap__body::namespace_ = namespace_; } return _p; }

inline void soap_delete_soap__body(struct soap *soap, soap__body *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_soap__body(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_soap__operation
#define SOAP_TYPE_soap__operation (220)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap__operation(struct soap*, const char*, int, const soap__operation *, const char*);
SOAP_FMAC3 soap__operation * SOAP_FMAC4 soap_in_soap__operation(struct soap*, const char*, soap__operation *, const char*);

#ifndef soap_write_soap__operation
#define soap_write_soap__operation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "soap:operation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 soap__operation * SOAP_FMAC4 soap_get_soap__operation(struct soap*, soap__operation *, const char*, const char*);

#ifndef soap_read_soap__operation
#define soap_read_soap__operation(soap, data) ( soap_begin_recv(soap) || !soap_get_soap__operation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 soap__operation * SOAP_FMAC2 soap_instantiate_soap__operation(struct soap*, int, const char*, const char*, size_t*);

inline soap__operation * soap_new_soap__operation(struct soap *soap, int n = -1) { return soap_instantiate_soap__operation(soap, n, NULL, NULL, NULL); }

inline soap__operation * soap_new_req_soap__operation(struct soap *soap) { soap__operation *_p = soap_instantiate_soap__operation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline soap__operation * soap_new_set_soap__operation(struct soap *soap, char *soapAction, bool soapActionRequired, enum soap__styleChoice *style) { soap__operation *_p = soap_instantiate_soap__operation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->soap__operation::soapAction = soapAction; _p->soap__operation::soapActionRequired = soapActionRequired; _p->soap__operation::style = style; } return _p; }

inline void soap_delete_soap__operation(struct soap *soap, soap__operation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_soap__operation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_soap__binding
#define SOAP_TYPE_soap__binding (218)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap__binding(struct soap*, const char*, int, const soap__binding *, const char*);
SOAP_FMAC3 soap__binding * SOAP_FMAC4 soap_in_soap__binding(struct soap*, const char*, soap__binding *, const char*);

#ifndef soap_write_soap__binding
#define soap_write_soap__binding(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "soap:binding", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 soap__binding * SOAP_FMAC4 soap_get_soap__binding(struct soap*, soap__binding *, const char*, const char*);

#ifndef soap_read_soap__binding
#define soap_read_soap__binding(soap, data) ( soap_begin_recv(soap) || !soap_get_soap__binding(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 soap__binding * SOAP_FMAC2 soap_instantiate_soap__binding(struct soap*, int, const char*, const char*, size_t*);

inline soap__binding * soap_new_soap__binding(struct soap *soap, int n = -1) { return soap_instantiate_soap__binding(soap, n, NULL, NULL, NULL); }

inline soap__binding * soap_new_req_soap__binding(struct soap *soap) { soap__binding *_p = soap_instantiate_soap__binding(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline soap__binding * soap_new_set_soap__binding(struct soap *soap, char *transport, enum soap__styleChoice *style) { soap__binding *_p = soap_instantiate_soap__binding(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->soap__binding::transport = transport; _p->soap__binding::style = style; } return _p; }

inline void soap_delete_soap__binding(struct soap *soap, soap__binding *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_soap__binding(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsdl__part
#define SOAP_TYPE_wsdl__part (216)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__part(struct soap*, const char*, int, const wsdl__part *, const char*);
SOAP_FMAC3 wsdl__part * SOAP_FMAC4 soap_in_wsdl__part(struct soap*, const char*, wsdl__part *, const char*);

#ifndef soap_write_wsdl__part
#define soap_write_wsdl__part(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsdl:part", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__part * SOAP_FMAC4 soap_get_wsdl__part(struct soap*, wsdl__part *, const char*, const char*);

#ifndef soap_read_wsdl__part
#define soap_read_wsdl__part(soap, data) ( soap_begin_recv(soap) || !soap_get_wsdl__part(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsdl__part * SOAP_FMAC2 soap_instantiate_wsdl__part(struct soap*, int, const char*, const char*, size_t*);

inline wsdl__part * soap_new_wsdl__part(struct soap *soap, int n = -1) { return soap_instantiate_wsdl__part(soap, n, NULL, NULL, NULL); }

inline wsdl__part * soap_new_req_wsdl__part(struct soap *soap) { wsdl__part *_p = soap_instantiate_wsdl__part(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsdl__part * soap_new_set_wsdl__part(struct soap *soap, char *name, char *element, char *type, char *documentation) { wsdl__part *_p = soap_instantiate_wsdl__part(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__part::name = name; _p->wsdl__part::element = element; _p->wsdl__part::type = type; _p->wsdl__part::documentation = documentation; } return _p; }

inline void soap_delete_wsdl__part(struct soap *soap, wsdl__part *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__part(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsdl__message
#define SOAP_TYPE_wsdl__message (215)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__message(struct soap*, const char*, int, const wsdl__message *, const char*);
SOAP_FMAC3 wsdl__message * SOAP_FMAC4 soap_in_wsdl__message(struct soap*, const char*, wsdl__message *, const char*);

#ifndef soap_write_wsdl__message
#define soap_write_wsdl__message(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsdl:message", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__message * SOAP_FMAC4 soap_get_wsdl__message(struct soap*, wsdl__message *, const char*, const char*);

#ifndef soap_read_wsdl__message
#define soap_read_wsdl__message(soap, data) ( soap_begin_recv(soap) || !soap_get_wsdl__message(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsdl__message * SOAP_FMAC2 soap_instantiate_wsdl__message(struct soap*, int, const char*, const char*, size_t*);

inline wsdl__message * soap_new_wsdl__message(struct soap *soap, int n = -1) { return soap_instantiate_wsdl__message(soap, n, NULL, NULL, NULL); }

inline wsdl__message * soap_new_req_wsdl__message(struct soap *soap) { wsdl__message *_p = soap_instantiate_wsdl__message(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsdl__message * soap_new_set_wsdl__message(struct soap *soap, char *name, char *documentation, std::vector<wsp__Policy >& wsp__Policy_, std::vector<wsp__PolicyReference >& wsp__PolicyReference_, std::vector<wsdl__part >& part) { wsdl__message *_p = soap_instantiate_wsdl__message(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__message::name = name; _p->wsdl__message::documentation = documentation; _p->wsdl__message::wsp__Policy_ = wsp__Policy_; _p->wsdl__message::wsp__PolicyReference_ = wsp__PolicyReference_; _p->wsdl__message::part = part; } return _p; }

inline void soap_delete_wsdl__message(struct soap *soap, wsdl__message *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__message(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_wsdl__definitions
#define SOAP_TYPE_wsdl__definitions (214)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__definitions(struct soap*, const char*, int, const wsdl__definitions *, const char*);
SOAP_FMAC3 wsdl__definitions * SOAP_FMAC4 soap_in_wsdl__definitions(struct soap*, const char*, wsdl__definitions *, const char*);

#ifndef soap_write_wsdl__definitions
#define soap_write_wsdl__definitions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "wsdl:definitions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__definitions * SOAP_FMAC4 soap_get_wsdl__definitions(struct soap*, wsdl__definitions *, const char*, const char*);

#ifndef soap_read_wsdl__definitions
#define soap_read_wsdl__definitions(soap, data) ( soap_begin_recv(soap) || !soap_get_wsdl__definitions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 wsdl__definitions * SOAP_FMAC2 soap_instantiate_wsdl__definitions(struct soap*, int, const char*, const char*, size_t*);

inline wsdl__definitions * soap_new_wsdl__definitions(struct soap *soap, int n = -1) { return soap_instantiate_wsdl__definitions(soap, n, NULL, NULL, NULL); }

inline wsdl__definitions * soap_new_req_wsdl__definitions(struct soap *soap) { wsdl__definitions *_p = soap_instantiate_wsdl__definitions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline wsdl__definitions * soap_new_set_wsdl__definitions(struct soap *soap, char *name, char *targetNamespace, char *version, std::vector<wsdl__import >& import, char *documentation, char *wsp__UsingPolicy, std::vector<wsp__Policy >& wsp__Policy_, wsdl__types *types, std::vector<wsdl__message >& message, std::vector<wsdl__portType >& portType, std::vector<wsdl__portType >& interface_, std::vector<wsdl__binding >& binding, std::vector<wsdl__service >& service, std::vector<gwsdl__portType >& gwsdl__portType_) { wsdl__definitions *_p = soap_instantiate_wsdl__definitions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->wsdl__definitions::name = name; _p->wsdl__definitions::targetNamespace = targetNamespace; _p->wsdl__definitions::version = version; _p->wsdl__definitions::import = import; _p->wsdl__definitions::documentation = documentation; _p->wsdl__definitions::wsp__UsingPolicy = wsp__UsingPolicy; _p->wsdl__definitions::wsp__Policy_ = wsp__Policy_; _p->wsdl__definitions::types = types; _p->wsdl__definitions::message = message; _p->wsdl__definitions::portType = portType; _p->wsdl__definitions::interface_ = interface_; _p->wsdl__definitions::binding = binding; _p->wsdl__definitions::service = service; _p->wsdl__definitions::gwsdl__portType_ = gwsdl__portType_; } return _p; }

inline void soap_delete_wsdl__definitions(struct soap *soap, wsdl__definitions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsdl__definitions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__redefine
#define SOAP_TYPE_xs__redefine (169)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__redefine(struct soap*, const char*, int, const xs__redefine *, const char*);
SOAP_FMAC3 xs__redefine * SOAP_FMAC4 soap_in_xs__redefine(struct soap*, const char*, xs__redefine *, const char*);

#ifndef soap_write_xs__redefine
#define soap_write_xs__redefine(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:redefine", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__redefine * SOAP_FMAC4 soap_get_xs__redefine(struct soap*, xs__redefine *, const char*, const char*);

#ifndef soap_read_xs__redefine
#define soap_read_xs__redefine(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__redefine(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__redefine * SOAP_FMAC2 soap_instantiate_xs__redefine(struct soap*, int, const char*, const char*, size_t*);

inline xs__redefine * soap_new_xs__redefine(struct soap *soap, int n = -1) { return soap_instantiate_xs__redefine(soap, n, NULL, NULL, NULL); }

inline xs__redefine * soap_new_req_xs__redefine(struct soap *soap) { xs__redefine *_p = soap_instantiate_xs__redefine(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__redefine * soap_new_set_xs__redefine(struct soap *soap, char *schemaLocation, std::vector<xs__group >& group, std::vector<xs__attributeGroup >& attributeGroup, std::vector<xs__simpleType >& simpleType, std::vector<xs__complexType >& complexType) { xs__redefine *_p = soap_instantiate_xs__redefine(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__redefine::schemaLocation = schemaLocation; _p->xs__redefine::group = group; _p->xs__redefine::attributeGroup = attributeGroup; _p->xs__redefine::simpleType = simpleType; _p->xs__redefine::complexType = complexType; } return _p; }

inline void soap_delete_xs__redefine(struct soap *soap, xs__redefine *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__redefine(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__include
#define SOAP_TYPE_xs__include (163)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__include(struct soap*, const char*, int, const xs__include *, const char*);
SOAP_FMAC3 xs__include * SOAP_FMAC4 soap_in_xs__include(struct soap*, const char*, xs__include *, const char*);

#ifndef soap_write_xs__include
#define soap_write_xs__include(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:include", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__include * SOAP_FMAC4 soap_get_xs__include(struct soap*, xs__include *, const char*, const char*);

#ifndef soap_read_xs__include
#define soap_read_xs__include(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__include(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__include * SOAP_FMAC2 soap_instantiate_xs__include(struct soap*, int, const char*, const char*, size_t*);

inline xs__include * soap_new_xs__include(struct soap *soap, int n = -1) { return soap_instantiate_xs__include(soap, n, NULL, NULL, NULL); }

inline xs__include * soap_new_req_xs__include(struct soap *soap) { xs__include *_p = soap_instantiate_xs__include(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__include * soap_new_set_xs__include(struct soap *soap, char *schemaLocation) { xs__include *_p = soap_instantiate_xs__include(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__include::schemaLocation = schemaLocation; } return _p; }

inline void soap_delete_xs__include(struct soap *soap, xs__include *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__include(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__import
#define SOAP_TYPE_xs__import (158)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__import(struct soap*, const char*, int, const xs__import *, const char*);
SOAP_FMAC3 xs__import * SOAP_FMAC4 soap_in_xs__import(struct soap*, const char*, xs__import *, const char*);

#ifndef soap_write_xs__import
#define soap_write_xs__import(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:import", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__import * SOAP_FMAC4 soap_get_xs__import(struct soap*, xs__import *, const char*, const char*);

#ifndef soap_read_xs__import
#define soap_read_xs__import(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__import(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__import * SOAP_FMAC2 soap_instantiate_xs__import(struct soap*, int, const char*, const char*, size_t*);

inline xs__import * soap_new_xs__import(struct soap *soap, int n = -1) { return soap_instantiate_xs__import(soap, n, NULL, NULL, NULL); }

inline xs__import * soap_new_req_xs__import(struct soap *soap) { xs__import *_p = soap_instantiate_xs__import(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__import * soap_new_set_xs__import(struct soap *soap, char *namespace_, char *schemaLocation) { xs__import *_p = soap_instantiate_xs__import(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__import::namespace_ = namespace_; _p->xs__import::schemaLocation = schemaLocation; } return _p; }

inline void soap_delete_xs__import(struct soap *soap, xs__import *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__import(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__complexContent
#define SOAP_TYPE_xs__complexContent (149)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__complexContent(struct soap*, const char*, int, const xs__complexContent *, const char*);
SOAP_FMAC3 xs__complexContent * SOAP_FMAC4 soap_in_xs__complexContent(struct soap*, const char*, xs__complexContent *, const char*);

#ifndef soap_write_xs__complexContent
#define soap_write_xs__complexContent(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:complexContent", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__complexContent * SOAP_FMAC4 soap_get_xs__complexContent(struct soap*, xs__complexContent *, const char*, const char*);

#ifndef soap_read_xs__complexContent
#define soap_read_xs__complexContent(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__complexContent(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__complexContent * SOAP_FMAC2 soap_instantiate_xs__complexContent(struct soap*, int, const char*, const char*, size_t*);

inline xs__complexContent * soap_new_xs__complexContent(struct soap *soap, int n = -1) { return soap_instantiate_xs__complexContent(soap, n, NULL, NULL, NULL); }

inline xs__complexContent * soap_new_req_xs__complexContent(struct soap *soap) { xs__complexContent *_p = soap_instantiate_xs__complexContent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__complexContent * soap_new_set_xs__complexContent(struct soap *soap, bool mixed, xs__extension *extension, xs__restriction *restriction) { xs__complexContent *_p = soap_instantiate_xs__complexContent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__complexContent::mixed = mixed; _p->xs__complexContent::extension = extension; _p->xs__complexContent::restriction = restriction; } return _p; }

inline void soap_delete_xs__complexContent(struct soap *soap, xs__complexContent *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__complexContent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__whiteSpace
#define SOAP_TYPE_xs__whiteSpace (132)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__whiteSpace(struct soap*, const char*, int, const xs__whiteSpace *, const char*);
SOAP_FMAC3 xs__whiteSpace * SOAP_FMAC4 soap_in_xs__whiteSpace(struct soap*, const char*, xs__whiteSpace *, const char*);

#ifndef soap_write_xs__whiteSpace
#define soap_write_xs__whiteSpace(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:whiteSpace", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__whiteSpace * SOAP_FMAC4 soap_get_xs__whiteSpace(struct soap*, xs__whiteSpace *, const char*, const char*);

#ifndef soap_read_xs__whiteSpace
#define soap_read_xs__whiteSpace(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__whiteSpace(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__whiteSpace * SOAP_FMAC2 soap_instantiate_xs__whiteSpace(struct soap*, int, const char*, const char*, size_t*);

inline xs__whiteSpace * soap_new_xs__whiteSpace(struct soap *soap, int n = -1) { return soap_instantiate_xs__whiteSpace(soap, n, NULL, NULL, NULL); }

inline xs__whiteSpace * soap_new_req_xs__whiteSpace(struct soap *soap) { xs__whiteSpace *_p = soap_instantiate_xs__whiteSpace(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__whiteSpace * soap_new_set_xs__whiteSpace(struct soap *soap, char *value) { xs__whiteSpace *_p = soap_instantiate_xs__whiteSpace(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__whiteSpace::value = value; } return _p; }

inline void soap_delete_xs__whiteSpace(struct soap *soap, xs__whiteSpace *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__whiteSpace(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__length
#define SOAP_TYPE_xs__length (131)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__length(struct soap*, const char*, int, const xs__length *, const char*);
SOAP_FMAC3 xs__length * SOAP_FMAC4 soap_in_xs__length(struct soap*, const char*, xs__length *, const char*);

#ifndef soap_write_xs__length
#define soap_write_xs__length(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:length", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__length * SOAP_FMAC4 soap_get_xs__length(struct soap*, xs__length *, const char*, const char*);

#ifndef soap_read_xs__length
#define soap_read_xs__length(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__length(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__length * SOAP_FMAC2 soap_instantiate_xs__length(struct soap*, int, const char*, const char*, size_t*);

inline xs__length * soap_new_xs__length(struct soap *soap, int n = -1) { return soap_instantiate_xs__length(soap, n, NULL, NULL, NULL); }

inline xs__length * soap_new_req_xs__length(struct soap *soap) { xs__length *_p = soap_instantiate_xs__length(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__length * soap_new_set_xs__length(struct soap *soap, char *value, bool fixed, xs__annotation *annotation) { xs__length *_p = soap_instantiate_xs__length(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__length::value = value; _p->xs__length::fixed = fixed; _p->xs__length::annotation = annotation; } return _p; }

inline void soap_delete_xs__length(struct soap *soap, xs__length *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__length(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__simpleContent
#define SOAP_TYPE_xs__simpleContent (114)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__simpleContent(struct soap*, const char*, int, const xs__simpleContent *, const char*);
SOAP_FMAC3 xs__simpleContent * SOAP_FMAC4 soap_in_xs__simpleContent(struct soap*, const char*, xs__simpleContent *, const char*);

#ifndef soap_write_xs__simpleContent
#define soap_write_xs__simpleContent(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:simpleContent", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__simpleContent * SOAP_FMAC4 soap_get_xs__simpleContent(struct soap*, xs__simpleContent *, const char*, const char*);

#ifndef soap_read_xs__simpleContent
#define soap_read_xs__simpleContent(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__simpleContent(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__simpleContent * SOAP_FMAC2 soap_instantiate_xs__simpleContent(struct soap*, int, const char*, const char*, size_t*);

inline xs__simpleContent * soap_new_xs__simpleContent(struct soap *soap, int n = -1) { return soap_instantiate_xs__simpleContent(soap, n, NULL, NULL, NULL); }

inline xs__simpleContent * soap_new_req_xs__simpleContent(struct soap *soap) { xs__simpleContent *_p = soap_instantiate_xs__simpleContent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__simpleContent * soap_new_set_xs__simpleContent(struct soap *soap, xs__extension *extension, xs__restriction *restriction) { xs__simpleContent *_p = soap_instantiate_xs__simpleContent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__simpleContent::extension = extension; _p->xs__simpleContent::restriction = restriction; } return _p; }

inline void soap_delete_xs__simpleContent(struct soap *soap, xs__simpleContent *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__simpleContent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__pattern
#define SOAP_TYPE_xs__pattern (112)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__pattern(struct soap*, const char*, int, const xs__pattern *, const char*);
SOAP_FMAC3 xs__pattern * SOAP_FMAC4 soap_in_xs__pattern(struct soap*, const char*, xs__pattern *, const char*);

#ifndef soap_write_xs__pattern
#define soap_write_xs__pattern(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:pattern", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__pattern * SOAP_FMAC4 soap_get_xs__pattern(struct soap*, xs__pattern *, const char*, const char*);

#ifndef soap_read_xs__pattern
#define soap_read_xs__pattern(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__pattern(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__pattern * SOAP_FMAC2 soap_instantiate_xs__pattern(struct soap*, int, const char*, const char*, size_t*);

inline xs__pattern * soap_new_xs__pattern(struct soap *soap, int n = -1) { return soap_instantiate_xs__pattern(soap, n, NULL, NULL, NULL); }

inline xs__pattern * soap_new_req_xs__pattern(struct soap *soap) { xs__pattern *_p = soap_instantiate_xs__pattern(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__pattern * soap_new_set_xs__pattern(struct soap *soap, char *value) { xs__pattern *_p = soap_instantiate_xs__pattern(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__pattern::value = value; } return _p; }

inline void soap_delete_xs__pattern(struct soap *soap, xs__pattern *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__pattern(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__enumeration
#define SOAP_TYPE_xs__enumeration (110)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__enumeration(struct soap*, const char*, int, const xs__enumeration *, const char*);
SOAP_FMAC3 xs__enumeration * SOAP_FMAC4 soap_in_xs__enumeration(struct soap*, const char*, xs__enumeration *, const char*);

#ifndef soap_write_xs__enumeration
#define soap_write_xs__enumeration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:enumeration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__enumeration * SOAP_FMAC4 soap_get_xs__enumeration(struct soap*, xs__enumeration *, const char*, const char*);

#ifndef soap_read_xs__enumeration
#define soap_read_xs__enumeration(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__enumeration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__enumeration * SOAP_FMAC2 soap_instantiate_xs__enumeration(struct soap*, int, const char*, const char*, size_t*);

inline xs__enumeration * soap_new_xs__enumeration(struct soap *soap, int n = -1) { return soap_instantiate_xs__enumeration(soap, n, NULL, NULL, NULL); }

inline xs__enumeration * soap_new_req_xs__enumeration(struct soap *soap) { xs__enumeration *_p = soap_instantiate_xs__enumeration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__enumeration * soap_new_set_xs__enumeration(struct soap *soap, char *value, char *value_, xs__annotation *annotation) { xs__enumeration *_p = soap_instantiate_xs__enumeration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__enumeration::value = value; _p->xs__enumeration::value_ = value_; _p->xs__enumeration::annotation = annotation; } return _p; }

inline void soap_delete_xs__enumeration(struct soap *soap, xs__enumeration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__enumeration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__attributeGroup
#define SOAP_TYPE_xs__attributeGroup (98)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__attributeGroup(struct soap*, const char*, int, const xs__attributeGroup *, const char*);
SOAP_FMAC3 xs__attributeGroup * SOAP_FMAC4 soap_in_xs__attributeGroup(struct soap*, const char*, xs__attributeGroup *, const char*);

#ifndef soap_write_xs__attributeGroup
#define soap_write_xs__attributeGroup(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:attributeGroup", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__attributeGroup * SOAP_FMAC4 soap_get_xs__attributeGroup(struct soap*, xs__attributeGroup *, const char*, const char*);

#ifndef soap_read_xs__attributeGroup
#define soap_read_xs__attributeGroup(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__attributeGroup(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__attributeGroup * SOAP_FMAC2 soap_instantiate_xs__attributeGroup(struct soap*, int, const char*, const char*, size_t*);

inline xs__attributeGroup * soap_new_xs__attributeGroup(struct soap *soap, int n = -1) { return soap_instantiate_xs__attributeGroup(soap, n, NULL, NULL, NULL); }

inline xs__attributeGroup * soap_new_req_xs__attributeGroup(struct soap *soap) { xs__attributeGroup *_p = soap_instantiate_xs__attributeGroup(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__attributeGroup * soap_new_set_xs__attributeGroup(struct soap *soap, char *name, char *ref, xs__annotation *annotation, std::vector<xs__attribute >& attribute, std::vector<xs__attributeGroup >& attributeGroup, xs__anyAttribute *anyAttribute) { xs__attributeGroup *_p = soap_instantiate_xs__attributeGroup(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__attributeGroup::name = name; _p->xs__attributeGroup::ref = ref; _p->xs__attributeGroup::annotation = annotation; _p->xs__attributeGroup::attribute = attribute; _p->xs__attributeGroup::attributeGroup = attributeGroup; _p->xs__attributeGroup::anyAttribute = anyAttribute; } return _p; }

inline void soap_delete_xs__attributeGroup(struct soap *soap, xs__attributeGroup *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__attributeGroup(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__anyAttribute
#define SOAP_TYPE_xs__anyAttribute (97)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__anyAttribute(struct soap*, const char*, int, const xs__anyAttribute *, const char*);
SOAP_FMAC3 xs__anyAttribute * SOAP_FMAC4 soap_in_xs__anyAttribute(struct soap*, const char*, xs__anyAttribute *, const char*);

#ifndef soap_write_xs__anyAttribute
#define soap_write_xs__anyAttribute(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:anyAttribute", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__anyAttribute * SOAP_FMAC4 soap_get_xs__anyAttribute(struct soap*, xs__anyAttribute *, const char*, const char*);

#ifndef soap_read_xs__anyAttribute
#define soap_read_xs__anyAttribute(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__anyAttribute(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__anyAttribute * SOAP_FMAC2 soap_instantiate_xs__anyAttribute(struct soap*, int, const char*, const char*, size_t*);

inline xs__anyAttribute * soap_new_xs__anyAttribute(struct soap *soap, int n = -1) { return soap_instantiate_xs__anyAttribute(soap, n, NULL, NULL, NULL); }

inline xs__anyAttribute * soap_new_req_xs__anyAttribute(struct soap *soap) { xs__anyAttribute *_p = soap_instantiate_xs__anyAttribute(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__anyAttribute * soap_new_set_xs__anyAttribute(struct soap *soap, char *namespace_, enum xs__processContents processContents) { xs__anyAttribute *_p = soap_instantiate_xs__anyAttribute(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__anyAttribute::namespace_ = namespace_; _p->xs__anyAttribute::processContents = processContents; } return _p; }

inline void soap_delete_xs__anyAttribute(struct soap *soap, xs__anyAttribute *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__anyAttribute(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__contents
#define SOAP_TYPE_xs__contents (78)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__contents(struct soap*, const char*, int, const xs__contents *, const char*);
SOAP_FMAC3 xs__contents * SOAP_FMAC4 soap_in_xs__contents(struct soap*, const char*, xs__contents *, const char*);

#ifndef soap_write_xs__contents
#define soap_write_xs__contents(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:contents", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__contents * SOAP_FMAC4 soap_get_xs__contents(struct soap*, xs__contents *, const char*, const char*);

#ifndef soap_read_xs__contents
#define soap_read_xs__contents(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__contents(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__contents * SOAP_FMAC2 soap_instantiate_xs__contents(struct soap*, int, const char*, const char*, size_t*);

inline xs__contents * soap_new_xs__contents(struct soap *soap, int n = -1) { return soap_instantiate_xs__contents(soap, n, NULL, NULL, NULL); }

inline xs__contents * soap_new_req_xs__contents(struct soap *soap, int __union, union xs__union_content& __content) { xs__contents *_p = soap_instantiate_xs__contents(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__contents::__union = __union; _p->xs__contents::__content = __content; } return _p; }

inline xs__contents * soap_new_set_xs__contents(struct soap *soap, int __union, union xs__union_content& __content) { xs__contents *_p = soap_instantiate_xs__contents(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__contents::__union = __union; _p->xs__contents::__content = __content; } return _p; }

inline void soap_delete_xs__contents(struct soap *soap, xs__contents *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__contents(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__any
#define SOAP_TYPE_xs__any (76)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__any(struct soap*, const char*, int, const xs__any *, const char*);
SOAP_FMAC3 xs__any * SOAP_FMAC4 soap_in_xs__any(struct soap*, const char*, xs__any *, const char*);

#ifndef soap_write_xs__any
#define soap_write_xs__any(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:any", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__any * SOAP_FMAC4 soap_get_xs__any(struct soap*, xs__any *, const char*, const char*);

#ifndef soap_read_xs__any
#define soap_read_xs__any(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__any(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__any * SOAP_FMAC2 soap_instantiate_xs__any(struct soap*, int, const char*, const char*, size_t*);

inline xs__any * soap_new_xs__any(struct soap *soap, int n = -1) { return soap_instantiate_xs__any(soap, n, NULL, NULL, NULL); }

inline xs__any * soap_new_req_xs__any(struct soap *soap) { xs__any *_p = soap_instantiate_xs__any(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__any * soap_new_set_xs__any(struct soap *soap, char *namespace_, enum xs__processContents processContents, char *minOccurs, char *maxOccurs, std::vector<xs__element >& element) { xs__any *_p = soap_instantiate_xs__any(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__any::namespace_ = namespace_; _p->xs__any::processContents = processContents; _p->xs__any::minOccurs = minOccurs; _p->xs__any::maxOccurs = maxOccurs; _p->xs__any::element = element; } return _p; }

inline void soap_delete_xs__any(struct soap *soap, xs__any *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__any(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__all
#define SOAP_TYPE_xs__all (71)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__all(struct soap*, const char*, int, const xs__all *, const char*);
SOAP_FMAC3 xs__all * SOAP_FMAC4 soap_in_xs__all(struct soap*, const char*, xs__all *, const char*);

#ifndef soap_write_xs__all
#define soap_write_xs__all(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:all", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__all * SOAP_FMAC4 soap_get_xs__all(struct soap*, xs__all *, const char*, const char*);

#ifndef soap_read_xs__all
#define soap_read_xs__all(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__all(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__all * SOAP_FMAC2 soap_instantiate_xs__all(struct soap*, int, const char*, const char*, size_t*);

inline xs__all * soap_new_xs__all(struct soap *soap, int n = -1) { return soap_instantiate_xs__all(soap, n, NULL, NULL, NULL); }

inline xs__all * soap_new_req_xs__all(struct soap *soap) { xs__all *_p = soap_instantiate_xs__all(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__all * soap_new_set_xs__all(struct soap *soap, std::vector<xs__element >& element) { xs__all *_p = soap_instantiate_xs__all(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__all::element = element; } return _p; }

inline void soap_delete_xs__all(struct soap *soap, xs__all *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__all(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__attribute
#define SOAP_TYPE_xs__attribute (60)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__attribute(struct soap*, const char*, int, const xs__attribute *, const char*);
SOAP_FMAC3 xs__attribute * SOAP_FMAC4 soap_in_xs__attribute(struct soap*, const char*, xs__attribute *, const char*);

#ifndef soap_write_xs__attribute
#define soap_write_xs__attribute(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:attribute", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__attribute * SOAP_FMAC4 soap_get_xs__attribute(struct soap*, xs__attribute *, const char*, const char*);

#ifndef soap_read_xs__attribute
#define soap_read_xs__attribute(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__attribute(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__attribute * SOAP_FMAC2 soap_instantiate_xs__attribute(struct soap*, int, const char*, const char*, size_t*);

inline xs__attribute * soap_new_xs__attribute(struct soap *soap, int n = -1) { return soap_instantiate_xs__attribute(soap, n, NULL, NULL, NULL); }

inline xs__attribute * soap_new_req_xs__attribute(struct soap *soap) { xs__attribute *_p = soap_instantiate_xs__attribute(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__attribute * soap_new_set_xs__attribute(struct soap *soap, char *name, char *ref, char *type, enum xs__attribute_use use, char *default_, char *default__, char *fixed, char *fixed_, enum xs__formChoice *form, char *wsdl__arrayType, xs__annotation *annotation, xs__simpleType *simpleType) { xs__attribute *_p = soap_instantiate_xs__attribute(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__attribute::name = name; _p->xs__attribute::ref = ref; _p->xs__attribute::type = type; _p->xs__attribute::use = use; _p->xs__attribute::default_ = default_; _p->xs__attribute::default__ = default__; _p->xs__attribute::fixed = fixed; _p->xs__attribute::fixed_ = fixed_; _p->xs__attribute::form = form; _p->xs__attribute::wsdl__arrayType = wsdl__arrayType; _p->xs__attribute::annotation = annotation; _p->xs__attribute::simpleType = simpleType; } return _p; }

inline void soap_delete_xs__attribute(struct soap *soap, xs__attribute *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__attribute(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__element
#define SOAP_TYPE_xs__element (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__element(struct soap*, const char*, int, const xs__element *, const char*);
SOAP_FMAC3 xs__element * SOAP_FMAC4 soap_in_xs__element(struct soap*, const char*, xs__element *, const char*);

#ifndef soap_write_xs__element
#define soap_write_xs__element(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:element", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__element * SOAP_FMAC4 soap_get_xs__element(struct soap*, xs__element *, const char*, const char*);

#ifndef soap_read_xs__element
#define soap_read_xs__element(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__element(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__element * SOAP_FMAC2 soap_instantiate_xs__element(struct soap*, int, const char*, const char*, size_t*);

inline xs__element * soap_new_xs__element(struct soap *soap, int n = -1) { return soap_instantiate_xs__element(soap, n, NULL, NULL, NULL); }

inline xs__element * soap_new_req_xs__element(struct soap *soap) { xs__element *_p = soap_instantiate_xs__element(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__element * soap_new_set_xs__element(struct soap *soap, char *name, char *ref, char *type, char *default_, char *default__, char *fixed, char *fixed_, enum xs__formChoice *form, bool nillable, bool abstract, char *substitutionGroup, char *minOccurs, char *maxOccurs, char *xmime__expectedContentTypes, xs__annotation *annotation, xs__simpleType *simpleType, xs__complexType *complexType, char *unique) { xs__element *_p = soap_instantiate_xs__element(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__element::name = name; _p->xs__element::ref = ref; _p->xs__element::type = type; _p->xs__element::default_ = default_; _p->xs__element::default__ = default__; _p->xs__element::fixed = fixed; _p->xs__element::fixed_ = fixed_; _p->xs__element::form = form; _p->xs__element::nillable = nillable; _p->xs__element::abstract = abstract; _p->xs__element::substitutionGroup = substitutionGroup; _p->xs__element::minOccurs = minOccurs; _p->xs__element::maxOccurs = maxOccurs; _p->xs__element::xmime__expectedContentTypes = xmime__expectedContentTypes; _p->xs__element::annotation = annotation; _p->xs__element::simpleType = simpleType; _p->xs__element::complexType = complexType; _p->xs__element::unique = unique; } return _p; }

inline void soap_delete_xs__element(struct soap *soap, xs__element *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__element(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__annotation
#define SOAP_TYPE_xs__annotation (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__annotation(struct soap*, const char*, int, const xs__annotation *, const char*);
SOAP_FMAC3 xs__annotation * SOAP_FMAC4 soap_in_xs__annotation(struct soap*, const char*, xs__annotation *, const char*);

#ifndef soap_write_xs__annotation
#define soap_write_xs__annotation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:annotation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__annotation * SOAP_FMAC4 soap_get_xs__annotation(struct soap*, xs__annotation *, const char*, const char*);

#ifndef soap_read_xs__annotation
#define soap_read_xs__annotation(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__annotation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__annotation * SOAP_FMAC2 soap_instantiate_xs__annotation(struct soap*, int, const char*, const char*, size_t*);

inline xs__annotation * soap_new_xs__annotation(struct soap *soap, int n = -1) { return soap_instantiate_xs__annotation(soap, n, NULL, NULL, NULL); }

inline xs__annotation * soap_new_req_xs__annotation(struct soap *soap) { xs__annotation *_p = soap_instantiate_xs__annotation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__annotation * soap_new_set_xs__annotation(struct soap *soap, char *documentation) { xs__annotation *_p = soap_instantiate_xs__annotation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__annotation::documentation = documentation; } return _p; }

inline void soap_delete_xs__annotation(struct soap *soap, xs__annotation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__annotation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__union
#define SOAP_TYPE_xs__union (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__union(struct soap*, const char*, int, const xs__union *, const char*);
SOAP_FMAC3 xs__union * SOAP_FMAC4 soap_in_xs__union(struct soap*, const char*, xs__union *, const char*);

#ifndef soap_write_xs__union
#define soap_write_xs__union(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:union", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__union * SOAP_FMAC4 soap_get_xs__union(struct soap*, xs__union *, const char*, const char*);

#ifndef soap_read_xs__union
#define soap_read_xs__union(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__union(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__union * SOAP_FMAC2 soap_instantiate_xs__union(struct soap*, int, const char*, const char*, size_t*);

inline xs__union * soap_new_xs__union(struct soap *soap, int n = -1) { return soap_instantiate_xs__union(soap, n, NULL, NULL, NULL); }

inline xs__union * soap_new_req_xs__union(struct soap *soap) { xs__union *_p = soap_instantiate_xs__union(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__union * soap_new_set_xs__union(struct soap *soap, char *memberTypes, std::vector<xs__simpleType >& simpleType) { xs__union *_p = soap_instantiate_xs__union(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__union::memberTypes = memberTypes; _p->xs__union::simpleType = simpleType; } return _p; }

inline void soap_delete_xs__union(struct soap *soap, xs__union *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__union(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__list
#define SOAP_TYPE_xs__list (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__list(struct soap*, const char*, int, const xs__list *, const char*);
SOAP_FMAC3 xs__list * SOAP_FMAC4 soap_in_xs__list(struct soap*, const char*, xs__list *, const char*);

#ifndef soap_write_xs__list
#define soap_write_xs__list(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:list", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__list * SOAP_FMAC4 soap_get_xs__list(struct soap*, xs__list *, const char*, const char*);

#ifndef soap_read_xs__list
#define soap_read_xs__list(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__list(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__list * SOAP_FMAC2 soap_instantiate_xs__list(struct soap*, int, const char*, const char*, size_t*);

inline xs__list * soap_new_xs__list(struct soap *soap, int n = -1) { return soap_instantiate_xs__list(soap, n, NULL, NULL, NULL); }

inline xs__list * soap_new_req_xs__list(struct soap *soap) { xs__list *_p = soap_instantiate_xs__list(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__list * soap_new_set_xs__list(struct soap *soap, char *itemType, xs__restriction *restriction, std::vector<xs__simpleType >& simpleType) { xs__list *_p = soap_instantiate_xs__list(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__list::itemType = itemType; _p->xs__list::restriction = restriction; _p->xs__list::simpleType = simpleType; } return _p; }

inline void soap_delete_xs__list(struct soap *soap, xs__list *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__list(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__group
#define SOAP_TYPE_xs__group (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__group(struct soap*, const char*, int, const xs__group *, const char*);
SOAP_FMAC3 xs__group * SOAP_FMAC4 soap_in_xs__group(struct soap*, const char*, xs__group *, const char*);

#ifndef soap_write_xs__group
#define soap_write_xs__group(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:group", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__group * SOAP_FMAC4 soap_get_xs__group(struct soap*, xs__group *, const char*, const char*);

#ifndef soap_read_xs__group
#define soap_read_xs__group(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__group(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__group * SOAP_FMAC2 soap_instantiate_xs__group(struct soap*, int, const char*, const char*, size_t*);

inline xs__group * soap_new_xs__group(struct soap *soap, int n = -1) { return soap_instantiate_xs__group(soap, n, NULL, NULL, NULL); }

inline xs__group * soap_new_req_xs__group(struct soap *soap) { xs__group *_p = soap_instantiate_xs__group(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__group * soap_new_set_xs__group(struct soap *soap, char *name, char *ref, char *minOccurs, char *maxOccurs, xs__annotation *annotation, xs__all *all, xs__seqchoice *choice, xs__seqchoice *sequence) { xs__group *_p = soap_instantiate_xs__group(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__group::name = name; _p->xs__group::ref = ref; _p->xs__group::minOccurs = minOccurs; _p->xs__group::maxOccurs = maxOccurs; _p->xs__group::annotation = annotation; _p->xs__group::all = all; _p->xs__group::choice = choice; _p->xs__group::sequence = sequence; } return _p; }

inline void soap_delete_xs__group(struct soap *soap, xs__group *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__group(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__seqchoice
#define SOAP_TYPE_xs__seqchoice (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__seqchoice(struct soap*, const char*, int, const xs__seqchoice *, const char*);
SOAP_FMAC3 xs__seqchoice * SOAP_FMAC4 soap_in_xs__seqchoice(struct soap*, const char*, xs__seqchoice *, const char*);

#ifndef soap_write_xs__seqchoice
#define soap_write_xs__seqchoice(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:seqchoice", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__seqchoice * SOAP_FMAC4 soap_get_xs__seqchoice(struct soap*, xs__seqchoice *, const char*, const char*);

#ifndef soap_read_xs__seqchoice
#define soap_read_xs__seqchoice(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__seqchoice(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__seqchoice * SOAP_FMAC2 soap_instantiate_xs__seqchoice(struct soap*, int, const char*, const char*, size_t*);

inline xs__seqchoice * soap_new_xs__seqchoice(struct soap *soap, int n = -1) { return soap_instantiate_xs__seqchoice(soap, n, NULL, NULL, NULL); }

inline xs__seqchoice * soap_new_req_xs__seqchoice(struct soap *soap) { xs__seqchoice *_p = soap_instantiate_xs__seqchoice(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__seqchoice * soap_new_set_xs__seqchoice(struct soap *soap, char *minOccurs, char *maxOccurs, xs__annotation *annotation, std::vector<xs__contents >& __contents) { xs__seqchoice *_p = soap_instantiate_xs__seqchoice(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__seqchoice::minOccurs = minOccurs; _p->xs__seqchoice::maxOccurs = maxOccurs; _p->xs__seqchoice::annotation = annotation; _p->xs__seqchoice::__contents = __contents; } return _p; }

inline void soap_delete_xs__seqchoice(struct soap *soap, xs__seqchoice *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__seqchoice(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__restriction
#define SOAP_TYPE_xs__restriction (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__restriction(struct soap*, const char*, int, const xs__restriction *, const char*);
SOAP_FMAC3 xs__restriction * SOAP_FMAC4 soap_in_xs__restriction(struct soap*, const char*, xs__restriction *, const char*);

#ifndef soap_write_xs__restriction
#define soap_write_xs__restriction(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:restriction", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__restriction * SOAP_FMAC4 soap_get_xs__restriction(struct soap*, xs__restriction *, const char*, const char*);

#ifndef soap_read_xs__restriction
#define soap_read_xs__restriction(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__restriction(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__restriction * SOAP_FMAC2 soap_instantiate_xs__restriction(struct soap*, int, const char*, const char*, size_t*);

inline xs__restriction * soap_new_xs__restriction(struct soap *soap, int n = -1) { return soap_instantiate_xs__restriction(soap, n, NULL, NULL, NULL); }

inline xs__restriction * soap_new_req_xs__restriction(struct soap *soap) { xs__restriction *_p = soap_instantiate_xs__restriction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__restriction * soap_new_set_xs__restriction(struct soap *soap, char *base, xs__simpleType *simpleType, xs__attributeGroup *attributeGroup, xs__group *group, xs__all *all, xs__seqchoice *choice, xs__seqchoice *sequence, std::vector<xs__attribute >& attribute, xs__anyAttribute *anyAttribute, std::vector<xs__enumeration >& enumeration, std::vector<xs__pattern >& pattern, xs__whiteSpace *whiteSpace, xs__length *length, xs__length *minLength, xs__length *maxLength, xs__length *precision, xs__length *scale, xs__length *totalDigits, xs__length *fractionDigits, xs__length *minInclusive, xs__length *maxInclusive, xs__length *minExclusive, xs__length *maxExclusive, xs__annotation *annotation) { xs__restriction *_p = soap_instantiate_xs__restriction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__restriction::base = base; _p->xs__restriction::simpleType = simpleType; _p->xs__restriction::attributeGroup = attributeGroup; _p->xs__restriction::group = group; _p->xs__restriction::all = all; _p->xs__restriction::choice = choice; _p->xs__restriction::sequence = sequence; _p->xs__restriction::attribute = attribute; _p->xs__restriction::anyAttribute = anyAttribute; _p->xs__restriction::enumeration = enumeration; _p->xs__restriction::pattern = pattern; _p->xs__restriction::whiteSpace = whiteSpace; _p->xs__restriction::length = length; _p->xs__restriction::minLength = minLength; _p->xs__restriction::maxLength = maxLength; _p->xs__restriction::precision = precision; _p->xs__restriction::scale = scale; _p->xs__restriction::totalDigits = totalDigits; _p->xs__restriction::fractionDigits = fractionDigits; _p->xs__restriction::minInclusive = minInclusive; _p->xs__restriction::maxInclusive = maxInclusive; _p->xs__restriction::minExclusive = minExclusive; _p->xs__restriction::maxExclusive = maxExclusive; _p->xs__restriction::annotation = annotation; } return _p; }

inline void soap_delete_xs__restriction(struct soap *soap, xs__restriction *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__restriction(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__extension
#define SOAP_TYPE_xs__extension (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__extension(struct soap*, const char*, int, const xs__extension *, const char*);
SOAP_FMAC3 xs__extension * SOAP_FMAC4 soap_in_xs__extension(struct soap*, const char*, xs__extension *, const char*);

#ifndef soap_write_xs__extension
#define soap_write_xs__extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__extension * SOAP_FMAC4 soap_get_xs__extension(struct soap*, xs__extension *, const char*, const char*);

#ifndef soap_read_xs__extension
#define soap_read_xs__extension(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__extension * SOAP_FMAC2 soap_instantiate_xs__extension(struct soap*, int, const char*, const char*, size_t*);

inline xs__extension * soap_new_xs__extension(struct soap *soap, int n = -1) { return soap_instantiate_xs__extension(soap, n, NULL, NULL, NULL); }

inline xs__extension * soap_new_req_xs__extension(struct soap *soap) { xs__extension *_p = soap_instantiate_xs__extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__extension * soap_new_set_xs__extension(struct soap *soap, char *base, xs__group *group, xs__all *all, xs__seqchoice *choice, xs__seqchoice *sequence, std::vector<xs__attribute >& attribute, std::vector<xs__attributeGroup >& attributeGroup, xs__anyAttribute *anyAttribute) { xs__extension *_p = soap_instantiate_xs__extension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__extension::base = base; _p->xs__extension::group = group; _p->xs__extension::all = all; _p->xs__extension::choice = choice; _p->xs__extension::sequence = sequence; _p->xs__extension::attribute = attribute; _p->xs__extension::attributeGroup = attributeGroup; _p->xs__extension::anyAttribute = anyAttribute; } return _p; }

inline void soap_delete_xs__extension(struct soap *soap, xs__extension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__extension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__complexType
#define SOAP_TYPE_xs__complexType (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__complexType(struct soap*, const char*, int, const xs__complexType *, const char*);
SOAP_FMAC3 xs__complexType * SOAP_FMAC4 soap_in_xs__complexType(struct soap*, const char*, xs__complexType *, const char*);

#ifndef soap_write_xs__complexType
#define soap_write_xs__complexType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:complexType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__complexType * SOAP_FMAC4 soap_get_xs__complexType(struct soap*, xs__complexType *, const char*, const char*);

#ifndef soap_read_xs__complexType
#define soap_read_xs__complexType(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__complexType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__complexType * SOAP_FMAC2 soap_instantiate_xs__complexType(struct soap*, int, const char*, const char*, size_t*);

inline xs__complexType * soap_new_xs__complexType(struct soap *soap, int n = -1) { return soap_instantiate_xs__complexType(soap, n, NULL, NULL, NULL); }

inline xs__complexType * soap_new_req_xs__complexType(struct soap *soap) { xs__complexType *_p = soap_instantiate_xs__complexType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__complexType * soap_new_set_xs__complexType(struct soap *soap, char *name, bool abstract, bool mixed, xs__annotation *annotation, xs__simpleContent *simpleContent, xs__complexContent *complexContent, xs__all *all, xs__seqchoice *choice, xs__seqchoice *sequence, xs__any *any, std::vector<xs__attribute >& attribute, std::vector<xs__attributeGroup >& attributeGroup, xs__anyAttribute *anyAttribute) { xs__complexType *_p = soap_instantiate_xs__complexType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__complexType::name = name; _p->xs__complexType::abstract = abstract; _p->xs__complexType::mixed = mixed; _p->xs__complexType::annotation = annotation; _p->xs__complexType::simpleContent = simpleContent; _p->xs__complexType::complexContent = complexContent; _p->xs__complexType::all = all; _p->xs__complexType::choice = choice; _p->xs__complexType::sequence = sequence; _p->xs__complexType::any = any; _p->xs__complexType::attribute = attribute; _p->xs__complexType::attributeGroup = attributeGroup; _p->xs__complexType::anyAttribute = anyAttribute; } return _p; }

inline void soap_delete_xs__complexType(struct soap *soap, xs__complexType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__complexType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__simpleType
#define SOAP_TYPE_xs__simpleType (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__simpleType(struct soap*, const char*, int, const xs__simpleType *, const char*);
SOAP_FMAC3 xs__simpleType * SOAP_FMAC4 soap_in_xs__simpleType(struct soap*, const char*, xs__simpleType *, const char*);

#ifndef soap_write_xs__simpleType
#define soap_write_xs__simpleType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:simpleType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__simpleType * SOAP_FMAC4 soap_get_xs__simpleType(struct soap*, xs__simpleType *, const char*, const char*);

#ifndef soap_read_xs__simpleType
#define soap_read_xs__simpleType(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__simpleType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__simpleType * SOAP_FMAC2 soap_instantiate_xs__simpleType(struct soap*, int, const char*, const char*, size_t*);

inline xs__simpleType * soap_new_xs__simpleType(struct soap *soap, int n = -1) { return soap_instantiate_xs__simpleType(soap, n, NULL, NULL, NULL); }

inline xs__simpleType * soap_new_req_xs__simpleType(struct soap *soap) { xs__simpleType *_p = soap_instantiate_xs__simpleType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__simpleType * soap_new_set_xs__simpleType(struct soap *soap, char *name, xs__annotation *annotation, xs__restriction *restriction, xs__list *list, xs__union *union_) { xs__simpleType *_p = soap_instantiate_xs__simpleType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__simpleType::name = name; _p->xs__simpleType::annotation = annotation; _p->xs__simpleType::restriction = restriction; _p->xs__simpleType::list = list; _p->xs__simpleType::union_ = union_; } return _p; }

inline void soap_delete_xs__simpleType(struct soap *soap, xs__simpleType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__simpleType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xs__schema
#define SOAP_TYPE_xs__schema (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__schema(struct soap*, const char*, int, const xs__schema *, const char*);
SOAP_FMAC3 xs__schema * SOAP_FMAC4 soap_in_xs__schema(struct soap*, const char*, xs__schema *, const char*);

#ifndef soap_write_xs__schema
#define soap_write_xs__schema(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xs:schema", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__schema * SOAP_FMAC4 soap_get_xs__schema(struct soap*, xs__schema *, const char*, const char*);

#ifndef soap_read_xs__schema
#define soap_read_xs__schema(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__schema(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xs__schema * SOAP_FMAC2 soap_instantiate_xs__schema(struct soap*, int, const char*, const char*, size_t*);

inline xs__schema * soap_new_xs__schema(struct soap *soap, int n = -1) { return soap_instantiate_xs__schema(soap, n, NULL, NULL, NULL); }

inline xs__schema * soap_new_req_xs__schema(struct soap *soap) { xs__schema *_p = soap_instantiate_xs__schema(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xs__schema * soap_new_set_xs__schema(struct soap *soap, char *targetNamespace, char *version, enum xs__formChoice attributeFormDefault, enum xs__formChoice elementFormDefault, xs__annotation *annotation, std::vector<xs__include >& include, std::vector<xs__redefine >& redefine, std::vector<xs__import >& import, std::vector<xs__attribute >& attribute, std::vector<xs__element >& element, std::vector<xs__group >& group, std::vector<xs__attributeGroup >& attributeGroup, std::vector<xs__simpleType >& simpleType, std::vector<xs__complexType >& complexType) { xs__schema *_p = soap_instantiate_xs__schema(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xs__schema::targetNamespace = targetNamespace; _p->xs__schema::version = version; _p->xs__schema::attributeFormDefault = attributeFormDefault; _p->xs__schema::elementFormDefault = elementFormDefault; _p->xs__schema::annotation = annotation; _p->xs__schema::include = include; _p->xs__schema::redefine = redefine; _p->xs__schema::import = import; _p->xs__schema::attribute = attribute; _p->xs__schema::element = element; _p->xs__schema::group = group; _p->xs__schema::attributeGroup = attributeGroup; _p->xs__schema::simpleType = simpleType; _p->xs__schema::complexType = complexType; } return _p; }

inline void soap_delete_xs__schema(struct soap *soap, xs__schema *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xs__schema(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (451)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (450)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (449)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (447)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (446)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_wsdl__union_ioput
#define SOAP_TYPE_wsdl__union_ioput (354)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsdl__union_ioput(struct soap*, int, const union wsdl__union_ioput *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsdl__union_ioput(struct soap*, int, const union wsdl__union_ioput *);
SOAP_FMAC3 union wsdl__union_ioput * SOAP_FMAC4 soap_in_wsdl__union_ioput(struct soap*, int*, union wsdl__union_ioput *);

#ifndef SOAP_TYPE_xs__union_content
#define SOAP_TYPE_xs__union_content (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xs__union_content(struct soap*, int, const union xs__union_content *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__union_content(struct soap*, int, const union xs__union_content *);
SOAP_FMAC3 union xs__union_content * SOAP_FMAC4 soap_in_xs__union_content(struct soap*, int*, union xs__union_content *);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (453)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (452)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (448)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTowsdl__types
#define SOAP_TYPE_PointerTowsdl__types (413)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsdl__types(struct soap*, wsdl__types *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsdl__types(struct soap*, const char *, int, wsdl__types *const*, const char *);
SOAP_FMAC3 wsdl__types ** SOAP_FMAC4 soap_in_PointerTowsdl__types(struct soap*, const char*, wsdl__types **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsdl__types(struct soap*, wsdl__types *const*, const char*, const char*);

#ifndef soap_write_PointerTowsdl__types
#define soap_write_PointerTowsdl__types(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsdl__types(soap, data),0) || soap_put_PointerTowsdl__types(soap, data, "wsdl:types", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__types ** SOAP_FMAC4 soap_get_PointerTowsdl__types(struct soap*, wsdl__types **, const char*, const char*);

#ifndef soap_read_PointerTowsdl__types
#define soap_read_PointerTowsdl__types(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsdl__types(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsdl__binding
#define SOAP_TYPE_PointerTowsdl__binding (403)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsdl__binding(struct soap*, wsdl__binding *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsdl__binding(struct soap*, const char *, int, wsdl__binding *const*, const char *);
SOAP_FMAC3 wsdl__binding ** SOAP_FMAC4 soap_in_PointerTowsdl__binding(struct soap*, const char*, wsdl__binding **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsdl__binding(struct soap*, wsdl__binding *const*, const char*, const char*);

#ifndef soap_write_PointerTowsdl__binding
#define soap_write_PointerTowsdl__binding(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsdl__binding(soap, data),0) || soap_put_PointerTowsdl__binding(soap, data, "wsdl:binding", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__binding ** SOAP_FMAC4 soap_get_PointerTowsdl__binding(struct soap*, wsdl__binding **, const char*, const char*);

#ifndef soap_read_PointerTowsdl__binding
#define soap_read_PointerTowsdl__binding(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsdl__binding(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTohttp__address
#define SOAP_TYPE_PointerTohttp__address (402)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTohttp__address(struct soap*, http__address *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTohttp__address(struct soap*, const char *, int, http__address *const*, const char *);
SOAP_FMAC3 http__address ** SOAP_FMAC4 soap_in_PointerTohttp__address(struct soap*, const char*, http__address **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTohttp__address(struct soap*, http__address *const*, const char*, const char*);

#ifndef soap_write_PointerTohttp__address
#define soap_write_PointerTohttp__address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTohttp__address(soap, data),0) || soap_put_PointerTohttp__address(soap, data, "http:address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 http__address ** SOAP_FMAC4 soap_get_PointerTohttp__address(struct soap*, http__address **, const char*, const char*);

#ifndef soap_read_PointerTohttp__address
#define soap_read_PointerTohttp__address(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTohttp__address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTosoap__address
#define SOAP_TYPE_PointerTosoap__address (401)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosoap__address(struct soap*, soap__address *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosoap__address(struct soap*, const char *, int, soap__address *const*, const char *);
SOAP_FMAC3 soap__address ** SOAP_FMAC4 soap_in_PointerTosoap__address(struct soap*, const char*, soap__address **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosoap__address(struct soap*, soap__address *const*, const char*, const char*);

#ifndef soap_write_PointerTosoap__address
#define soap_write_PointerTosoap__address(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTosoap__address(soap, data),0) || soap_put_PointerTosoap__address(soap, data, "soap:address", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 soap__address ** SOAP_FMAC4 soap_get_PointerTosoap__address(struct soap*, soap__address **, const char*, const char*);

#ifndef soap_read_PointerTosoap__address
#define soap_read_PointerTosoap__address(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTosoap__address(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsdl__portType
#define SOAP_TYPE_PointerTowsdl__portType (395)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsdl__portType(struct soap*, wsdl__portType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsdl__portType(struct soap*, const char *, int, wsdl__portType *const*, const char *);
SOAP_FMAC3 wsdl__portType ** SOAP_FMAC4 soap_in_PointerTowsdl__portType(struct soap*, const char*, wsdl__portType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsdl__portType(struct soap*, wsdl__portType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsdl__portType
#define soap_write_PointerTowsdl__portType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsdl__portType(soap, data),0) || soap_put_PointerTowsdl__portType(soap, data, "wsdl:portType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__portType ** SOAP_FMAC4 soap_get_PointerTowsdl__portType(struct soap*, wsdl__portType **, const char*, const char*);

#ifndef soap_read_PointerTowsdl__portType
#define soap_read_PointerTowsdl__portType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsdl__portType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTohttp__binding
#define SOAP_TYPE_PointerTohttp__binding (393)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTohttp__binding(struct soap*, http__binding *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTohttp__binding(struct soap*, const char *, int, http__binding *const*, const char *);
SOAP_FMAC3 http__binding ** SOAP_FMAC4 soap_in_PointerTohttp__binding(struct soap*, const char*, http__binding **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTohttp__binding(struct soap*, http__binding *const*, const char*, const char*);

#ifndef soap_write_PointerTohttp__binding
#define soap_write_PointerTohttp__binding(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTohttp__binding(soap, data),0) || soap_put_PointerTohttp__binding(soap, data, "http:binding", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 http__binding ** SOAP_FMAC4 soap_get_PointerTohttp__binding(struct soap*, http__binding **, const char*, const char*);

#ifndef soap_read_PointerTohttp__binding
#define soap_read_PointerTohttp__binding(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTohttp__binding(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTosoap__binding
#define SOAP_TYPE_PointerTosoap__binding (392)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosoap__binding(struct soap*, soap__binding *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosoap__binding(struct soap*, const char *, int, soap__binding *const*, const char *);
SOAP_FMAC3 soap__binding ** SOAP_FMAC4 soap_in_PointerTosoap__binding(struct soap*, const char*, soap__binding **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosoap__binding(struct soap*, soap__binding *const*, const char*, const char*);

#ifndef soap_write_PointerTosoap__binding
#define soap_write_PointerTosoap__binding(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTosoap__binding(soap, data),0) || soap_put_PointerTosoap__binding(soap, data, "soap:binding", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 soap__binding ** SOAP_FMAC4 soap_get_PointerTosoap__binding(struct soap*, soap__binding **, const char*, const char*);

#ifndef soap_read_PointerTosoap__binding
#define soap_read_PointerTosoap__binding(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTosoap__binding(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsdl__ext_ioput
#define SOAP_TYPE_PointerTowsdl__ext_ioput (384)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsdl__ext_ioput(struct soap*, wsdl__ext_ioput *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsdl__ext_ioput(struct soap*, const char *, int, wsdl__ext_ioput *const*, const char *);
SOAP_FMAC3 wsdl__ext_ioput ** SOAP_FMAC4 soap_in_PointerTowsdl__ext_ioput(struct soap*, const char*, wsdl__ext_ioput **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsdl__ext_ioput(struct soap*, wsdl__ext_ioput *const*, const char*, const char*);

#ifndef soap_write_PointerTowsdl__ext_ioput
#define soap_write_PointerTowsdl__ext_ioput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsdl__ext_ioput(soap, data),0) || soap_put_PointerTowsdl__ext_ioput(soap, data, "wsdl:ext-ioput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__ext_ioput ** SOAP_FMAC4 soap_get_PointerTowsdl__ext_ioput(struct soap*, wsdl__ext_ioput **, const char*, const char*);

#ifndef soap_read_PointerTowsdl__ext_ioput
#define soap_read_PointerTowsdl__ext_ioput(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsdl__ext_ioput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTohttp__operation
#define SOAP_TYPE_PointerTohttp__operation (383)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTohttp__operation(struct soap*, http__operation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTohttp__operation(struct soap*, const char *, int, http__operation *const*, const char *);
SOAP_FMAC3 http__operation ** SOAP_FMAC4 soap_in_PointerTohttp__operation(struct soap*, const char*, http__operation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTohttp__operation(struct soap*, http__operation *const*, const char*, const char*);

#ifndef soap_write_PointerTohttp__operation
#define soap_write_PointerTohttp__operation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTohttp__operation(soap, data),0) || soap_put_PointerTohttp__operation(soap, data, "http:operation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 http__operation ** SOAP_FMAC4 soap_get_PointerTohttp__operation(struct soap*, http__operation **, const char*, const char*);

#ifndef soap_read_PointerTohttp__operation
#define soap_read_PointerTohttp__operation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTohttp__operation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTosoap__operation
#define SOAP_TYPE_PointerTosoap__operation (382)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosoap__operation(struct soap*, soap__operation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosoap__operation(struct soap*, const char *, int, soap__operation *const*, const char *);
SOAP_FMAC3 soap__operation ** SOAP_FMAC4 soap_in_PointerTosoap__operation(struct soap*, const char*, soap__operation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosoap__operation(struct soap*, soap__operation *const*, const char*, const char*);

#ifndef soap_write_PointerTosoap__operation
#define soap_write_PointerTosoap__operation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTosoap__operation(soap, data),0) || soap_put_PointerTosoap__operation(soap, data, "soap:operation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 soap__operation ** SOAP_FMAC4 soap_get_PointerTosoap__operation(struct soap*, soap__operation **, const char*, const char*);

#ifndef soap_read_PointerTosoap__operation
#define soap_read_PointerTosoap__operation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTosoap__operation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsdl__fault
#define SOAP_TYPE_PointerTowsdl__fault (374)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsdl__fault(struct soap*, wsdl__fault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsdl__fault(struct soap*, const char *, int, wsdl__fault *const*, const char *);
SOAP_FMAC3 wsdl__fault ** SOAP_FMAC4 soap_in_PointerTowsdl__fault(struct soap*, const char*, wsdl__fault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsdl__fault(struct soap*, wsdl__fault *const*, const char*, const char*);

#ifndef soap_write_PointerTowsdl__fault
#define soap_write_PointerTowsdl__fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsdl__fault(soap, data),0) || soap_put_PointerTowsdl__fault(soap, data, "wsdl:fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__fault ** SOAP_FMAC4 soap_get_PointerTowsdl__fault(struct soap*, wsdl__fault **, const char*, const char*);

#ifndef soap_read_PointerTowsdl__fault
#define soap_read_PointerTowsdl__fault(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsdl__fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTosoap__fault
#define SOAP_TYPE_PointerTosoap__fault (373)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosoap__fault(struct soap*, soap__fault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosoap__fault(struct soap*, const char *, int, soap__fault *const*, const char *);
SOAP_FMAC3 soap__fault ** SOAP_FMAC4 soap_in_PointerTosoap__fault(struct soap*, const char*, soap__fault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosoap__fault(struct soap*, soap__fault *const*, const char*, const char*);

#ifndef soap_write_PointerTosoap__fault
#define soap_write_PointerTosoap__fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTosoap__fault(soap, data),0) || soap_put_PointerTosoap__fault(soap, data, "soap:fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 soap__fault ** SOAP_FMAC4 soap_get_PointerTosoap__fault(struct soap*, soap__fault **, const char*, const char*);

#ifndef soap_read_PointerTosoap__fault
#define soap_read_PointerTosoap__fault(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTosoap__fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTomime__mimeXml
#define SOAP_TYPE_PointerTomime__mimeXml (367)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomime__mimeXml(struct soap*, mime__mimeXml *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomime__mimeXml(struct soap*, const char *, int, mime__mimeXml *const*, const char *);
SOAP_FMAC3 mime__mimeXml ** SOAP_FMAC4 soap_in_PointerTomime__mimeXml(struct soap*, const char*, mime__mimeXml **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomime__mimeXml(struct soap*, mime__mimeXml *const*, const char*, const char*);

#ifndef soap_write_PointerTomime__mimeXml
#define soap_write_PointerTomime__mimeXml(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTomime__mimeXml(soap, data),0) || soap_put_PointerTomime__mimeXml(soap, data, "mime:mimeXml", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 mime__mimeXml ** SOAP_FMAC4 soap_get_PointerTomime__mimeXml(struct soap*, mime__mimeXml **, const char*, const char*);

#ifndef soap_read_PointerTomime__mimeXml
#define soap_read_PointerTomime__mimeXml(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTomime__mimeXml(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTomime__content
#define SOAP_TYPE_PointerTomime__content (366)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomime__content(struct soap*, mime__content *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomime__content(struct soap*, const char *, int, mime__content *const*, const char *);
SOAP_FMAC3 mime__content ** SOAP_FMAC4 soap_in_PointerTomime__content(struct soap*, const char*, mime__content **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomime__content(struct soap*, mime__content *const*, const char*, const char*);

#ifndef soap_write_PointerTomime__content
#define soap_write_PointerTomime__content(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTomime__content(soap, data),0) || soap_put_PointerTomime__content(soap, data, "mime:content", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 mime__content ** SOAP_FMAC4 soap_get_PointerTomime__content(struct soap*, mime__content **, const char*, const char*);

#ifndef soap_read_PointerTomime__content
#define soap_read_PointerTomime__content(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTomime__content(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTomime__multipartRelated
#define SOAP_TYPE_PointerTomime__multipartRelated (365)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomime__multipartRelated(struct soap*, mime__multipartRelated *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomime__multipartRelated(struct soap*, const char *, int, mime__multipartRelated *const*, const char *);
SOAP_FMAC3 mime__multipartRelated ** SOAP_FMAC4 soap_in_PointerTomime__multipartRelated(struct soap*, const char*, mime__multipartRelated **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomime__multipartRelated(struct soap*, mime__multipartRelated *const*, const char*, const char*);

#ifndef soap_write_PointerTomime__multipartRelated
#define soap_write_PointerTomime__multipartRelated(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTomime__multipartRelated(soap, data),0) || soap_put_PointerTomime__multipartRelated(soap, data, "mime:multipartRelated", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 mime__multipartRelated ** SOAP_FMAC4 soap_get_PointerTomime__multipartRelated(struct soap*, mime__multipartRelated **, const char*, const char*);

#ifndef soap_read_PointerTomime__multipartRelated
#define soap_read_PointerTomime__multipartRelated(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTomime__multipartRelated(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTodime__message
#define SOAP_TYPE_PointerTodime__message (364)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodime__message(struct soap*, dime__message *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodime__message(struct soap*, const char *, int, dime__message *const*, const char *);
SOAP_FMAC3 dime__message ** SOAP_FMAC4 soap_in_PointerTodime__message(struct soap*, const char*, dime__message **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodime__message(struct soap*, dime__message *const*, const char*, const char*);

#ifndef soap_write_PointerTodime__message
#define soap_write_PointerTodime__message(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTodime__message(soap, data),0) || soap_put_PointerTodime__message(soap, data, "dime:message", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 dime__message ** SOAP_FMAC4 soap_get_PointerTodime__message(struct soap*, dime__message **, const char*, const char*);

#ifndef soap_read_PointerTodime__message
#define soap_read_PointerTodime__message(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTodime__message(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsdl__ioput
#define SOAP_TYPE_PointerTowsdl__ioput (353)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsdl__ioput(struct soap*, wsdl__ioput *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsdl__ioput(struct soap*, const char *, int, wsdl__ioput *const*, const char *);
SOAP_FMAC3 wsdl__ioput ** SOAP_FMAC4 soap_in_PointerTowsdl__ioput(struct soap*, const char*, wsdl__ioput **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsdl__ioput(struct soap*, wsdl__ioput *const*, const char*, const char*);

#ifndef soap_write_PointerTowsdl__ioput
#define soap_write_PointerTowsdl__ioput(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsdl__ioput(soap, data),0) || soap_put_PointerTowsdl__ioput(soap, data, "wsdl:ioput", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__ioput ** SOAP_FMAC4 soap_get_PointerTowsdl__ioput(struct soap*, wsdl__ioput **, const char*, const char*);

#ifndef soap_read_PointerTowsdl__ioput
#define soap_read_PointerTowsdl__ioput(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsdl__ioput(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsdl__definitions
#define SOAP_TYPE_PointerTowsdl__definitions (316)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsdl__definitions(struct soap*, wsdl__definitions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsdl__definitions(struct soap*, const char *, int, wsdl__definitions *const*, const char *);
SOAP_FMAC3 wsdl__definitions ** SOAP_FMAC4 soap_in_PointerTowsdl__definitions(struct soap*, const char*, wsdl__definitions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsdl__definitions(struct soap*, wsdl__definitions *const*, const char*, const char*);

#ifndef soap_write_PointerTowsdl__definitions
#define soap_write_PointerTowsdl__definitions(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsdl__definitions(soap, data),0) || soap_put_PointerTowsdl__definitions(soap, data, "wsdl:definitions", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__definitions ** SOAP_FMAC4 soap_get_PointerTowsdl__definitions(struct soap*, wsdl__definitions **, const char*, const char*);

#ifndef soap_read_PointerTowsdl__definitions
#define soap_read_PointerTowsdl__definitions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsdl__definitions(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsp__AppliesTo
#define SOAP_TYPE_PointerTowsp__AppliesTo (313)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsp__AppliesTo(struct soap*, wsp__AppliesTo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsp__AppliesTo(struct soap*, const char *, int, wsp__AppliesTo *const*, const char *);
SOAP_FMAC3 wsp__AppliesTo ** SOAP_FMAC4 soap_in_PointerTowsp__AppliesTo(struct soap*, const char*, wsp__AppliesTo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsp__AppliesTo(struct soap*, wsp__AppliesTo *const*, const char*, const char*);

#ifndef soap_write_PointerTowsp__AppliesTo
#define soap_write_PointerTowsp__AppliesTo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsp__AppliesTo(soap, data),0) || soap_put_PointerTowsp__AppliesTo(soap, data, "wsp:AppliesTo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsp__AppliesTo ** SOAP_FMAC4 soap_get_PointerTowsp__AppliesTo(struct soap*, wsp__AppliesTo **, const char*, const char*);

#ifndef soap_read_PointerTowsp__AppliesTo
#define soap_read_PointerTowsp__AppliesTo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsp__AppliesTo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsrmp__RMAssertion
#define SOAP_TYPE_PointerTowsrmp__RMAssertion (304)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrmp__RMAssertion(struct soap*, wsrmp__RMAssertion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrmp__RMAssertion(struct soap*, const char *, int, wsrmp__RMAssertion *const*, const char *);
SOAP_FMAC3 wsrmp__RMAssertion ** SOAP_FMAC4 soap_in_PointerTowsrmp__RMAssertion(struct soap*, const char*, wsrmp__RMAssertion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrmp__RMAssertion(struct soap*, wsrmp__RMAssertion *const*, const char*, const char*);

#ifndef soap_write_PointerTowsrmp__RMAssertion
#define soap_write_PointerTowsrmp__RMAssertion(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsrmp__RMAssertion(soap, data),0) || soap_put_PointerTowsrmp__RMAssertion(soap, data, "wsrmp:RMAssertion", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsrmp__RMAssertion ** SOAP_FMAC4 soap_get_PointerTowsrmp__RMAssertion(struct soap*, wsrmp__RMAssertion **, const char*, const char*);

#ifndef soap_read_PointerTowsrmp__RMAssertion
#define soap_read_PointerTowsrmp__RMAssertion(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsrmp__RMAssertion(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsp__Assertion
#define SOAP_TYPE_PointerTowsp__Assertion (303)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsp__Assertion(struct soap*, wsp__Assertion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsp__Assertion(struct soap*, const char *, int, wsp__Assertion *const*, const char *);
SOAP_FMAC3 wsp__Assertion ** SOAP_FMAC4 soap_in_PointerTowsp__Assertion(struct soap*, const char*, wsp__Assertion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsp__Assertion(struct soap*, wsp__Assertion *const*, const char*, const char*);

#ifndef soap_write_PointerTowsp__Assertion
#define soap_write_PointerTowsp__Assertion(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsp__Assertion(soap, data),0) || soap_put_PointerTowsp__Assertion(soap, data, "wsp:Assertion", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsp__Assertion ** SOAP_FMAC4 soap_get_PointerTowsp__Assertion(struct soap*, wsp__Assertion **, const char*, const char*);

#ifndef soap_read_PointerTowsp__Assertion
#define soap_read_PointerTowsp__Assertion(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsp__Assertion(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTosp__Token
#define SOAP_TYPE_PointerTosp__Token (302)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosp__Token(struct soap*, sp__Token *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosp__Token(struct soap*, const char *, int, sp__Token *const*, const char *);
SOAP_FMAC3 sp__Token ** SOAP_FMAC4 soap_in_PointerTosp__Token(struct soap*, const char*, sp__Token **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosp__Token(struct soap*, sp__Token *const*, const char*, const char*);

#ifndef soap_write_PointerTosp__Token
#define soap_write_PointerTosp__Token(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTosp__Token(soap, data),0) || soap_put_PointerTosp__Token(soap, data, "sp:Token", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 sp__Token ** SOAP_FMAC4 soap_get_PointerTosp__Token(struct soap*, sp__Token **, const char*, const char*);

#ifndef soap_read_PointerTosp__Token
#define soap_read_PointerTosp__Token(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTosp__Token(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTosp__Elements
#define SOAP_TYPE_PointerTosp__Elements (301)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosp__Elements(struct soap*, sp__Elements *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosp__Elements(struct soap*, const char *, int, sp__Elements *const*, const char *);
SOAP_FMAC3 sp__Elements ** SOAP_FMAC4 soap_in_PointerTosp__Elements(struct soap*, const char*, sp__Elements **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosp__Elements(struct soap*, sp__Elements *const*, const char*, const char*);

#ifndef soap_write_PointerTosp__Elements
#define soap_write_PointerTosp__Elements(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTosp__Elements(soap, data),0) || soap_put_PointerTosp__Elements(soap, data, "sp:Elements", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 sp__Elements ** SOAP_FMAC4 soap_get_PointerTosp__Elements(struct soap*, sp__Elements **, const char*, const char*);

#ifndef soap_read_PointerTosp__Elements
#define soap_read_PointerTosp__Elements(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTosp__Elements(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsp__PolicyReference
#define SOAP_TYPE_PointerTowsp__PolicyReference (298)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsp__PolicyReference(struct soap*, wsp__PolicyReference *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsp__PolicyReference(struct soap*, const char *, int, wsp__PolicyReference *const*, const char *);
SOAP_FMAC3 wsp__PolicyReference ** SOAP_FMAC4 soap_in_PointerTowsp__PolicyReference(struct soap*, const char*, wsp__PolicyReference **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsp__PolicyReference(struct soap*, wsp__PolicyReference *const*, const char*, const char*);

#ifndef soap_write_PointerTowsp__PolicyReference
#define soap_write_PointerTowsp__PolicyReference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsp__PolicyReference(soap, data),0) || soap_put_PointerTowsp__PolicyReference(soap, data, "wsp:PolicyReference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsp__PolicyReference ** SOAP_FMAC4 soap_get_PointerTowsp__PolicyReference(struct soap*, wsp__PolicyReference **, const char*, const char*);

#ifndef soap_read_PointerTowsp__PolicyReference
#define soap_read_PointerTowsp__PolicyReference(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsp__PolicyReference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsrmp__Timeout
#define SOAP_TYPE_PointerTowsrmp__Timeout (297)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsrmp__Timeout(struct soap*, wsrmp__Timeout *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsrmp__Timeout(struct soap*, const char *, int, wsrmp__Timeout *const*, const char *);
SOAP_FMAC3 wsrmp__Timeout ** SOAP_FMAC4 soap_in_PointerTowsrmp__Timeout(struct soap*, const char*, wsrmp__Timeout **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsrmp__Timeout(struct soap*, wsrmp__Timeout *const*, const char*, const char*);

#ifndef soap_write_PointerTowsrmp__Timeout
#define soap_write_PointerTowsrmp__Timeout(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsrmp__Timeout(soap, data),0) || soap_put_PointerTowsrmp__Timeout(soap, data, "wsrmp:Timeout", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsrmp__Timeout ** SOAP_FMAC4 soap_get_PointerTowsrmp__Timeout(struct soap*, wsrmp__Timeout **, const char*, const char*);

#ifndef soap_read_PointerTowsrmp__Timeout
#define soap_read_PointerTowsrmp__Timeout(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsrmp__Timeout(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowst__Claims
#define SOAP_TYPE_PointerTowst__Claims (294)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowst__Claims(struct soap*, wst__Claims *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowst__Claims(struct soap*, const char *, int, wst__Claims *const*, const char *);
SOAP_FMAC3 wst__Claims ** SOAP_FMAC4 soap_in_PointerTowst__Claims(struct soap*, const char*, wst__Claims **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowst__Claims(struct soap*, wst__Claims *const*, const char*, const char*);

#ifndef soap_write_PointerTowst__Claims
#define soap_write_PointerTowst__Claims(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowst__Claims(soap, data),0) || soap_put_PointerTowst__Claims(soap, data, "wst:Claims", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wst__Claims ** SOAP_FMAC4 soap_get_PointerTowst__Claims(struct soap*, wst__Claims **, const char*, const char*);

#ifndef soap_read_PointerTowst__Claims
#define soap_read_PointerTowst__Claims(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowst__Claims(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsa__EndpointReferenceType
#define SOAP_TYPE_PointerTowsa__EndpointReferenceType (293)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa__EndpointReferenceType(struct soap*, wsa__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa__EndpointReferenceType(struct soap*, const char *, int, wsa__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 wsa__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTowsa__EndpointReferenceType(struct soap*, const char*, wsa__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa__EndpointReferenceType(struct soap*, wsa__EndpointReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerTowsa__EndpointReferenceType
#define soap_write_PointerTowsa__EndpointReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsa__EndpointReferenceType(soap, data),0) || soap_put_PointerTowsa__EndpointReferenceType(soap, data, "wsa:EndpointReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsa__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTowsa__EndpointReferenceType(struct soap*, wsa__EndpointReferenceType **, const char*, const char*);

#ifndef soap_read_PointerTowsa__EndpointReferenceType
#define soap_read_PointerTowsa__EndpointReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsa__EndpointReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsp__Content
#define SOAP_TYPE_PointerTowsp__Content (285)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsp__Content(struct soap*, wsp__Content *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsp__Content(struct soap*, const char *, int, wsp__Content *const*, const char *);
SOAP_FMAC3 wsp__Content ** SOAP_FMAC4 soap_in_PointerTowsp__Content(struct soap*, const char*, wsp__Content **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsp__Content(struct soap*, wsp__Content *const*, const char*, const char*);

#ifndef soap_write_PointerTowsp__Content
#define soap_write_PointerTowsp__Content(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsp__Content(soap, data),0) || soap_put_PointerTowsp__Content(soap, data, "wsp:Content", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsp__Content ** SOAP_FMAC4 soap_get_PointerTowsp__Content(struct soap*, wsp__Content **, const char*, const char*);

#ifndef soap_read_PointerTowsp__Content
#define soap_read_PointerTowsp__Content(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsp__Content(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsp__Policy
#define SOAP_TYPE_PointerTowsp__Policy (279)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsp__Policy(struct soap*, wsp__Policy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsp__Policy(struct soap*, const char *, int, wsp__Policy *const*, const char *);
SOAP_FMAC3 wsp__Policy ** SOAP_FMAC4 soap_in_PointerTowsp__Policy(struct soap*, const char*, wsp__Policy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsp__Policy(struct soap*, wsp__Policy *const*, const char*, const char*);

#ifndef soap_write_PointerTowsp__Policy
#define soap_write_PointerTowsp__Policy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsp__Policy(soap, data),0) || soap_put_PointerTowsp__Policy(soap, data, "wsp:Policy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsp__Policy ** SOAP_FMAC4 soap_get_PointerTowsp__Policy(struct soap*, wsp__Policy **, const char*, const char*);

#ifndef soap_read_PointerTowsp__Policy
#define soap_read_PointerTowsp__Policy(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsp__Policy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTosd__staticServiceDataValues
#define SOAP_TYPE_PointerTosd__staticServiceDataValues (272)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosd__staticServiceDataValues(struct soap*, sd__staticServiceDataValues *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosd__staticServiceDataValues(struct soap*, const char *, int, sd__staticServiceDataValues *const*, const char *);
SOAP_FMAC3 sd__staticServiceDataValues ** SOAP_FMAC4 soap_in_PointerTosd__staticServiceDataValues(struct soap*, const char*, sd__staticServiceDataValues **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosd__staticServiceDataValues(struct soap*, sd__staticServiceDataValues *const*, const char*, const char*);

#ifndef soap_write_PointerTosd__staticServiceDataValues
#define soap_write_PointerTosd__staticServiceDataValues(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTosd__staticServiceDataValues(soap, data),0) || soap_put_PointerTosd__staticServiceDataValues(soap, data, "sd:staticServiceDataValues", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 sd__staticServiceDataValues ** SOAP_FMAC4 soap_get_PointerTosd__staticServiceDataValues(struct soap*, sd__staticServiceDataValues **, const char*, const char*);

#ifndef soap_read_PointerTosd__staticServiceDataValues
#define soap_read_PointerTosd__staticServiceDataValues(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTosd__staticServiceDataValues(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsdl__operation
#define SOAP_TYPE_PointerTowsdl__operation (269)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsdl__operation(struct soap*, wsdl__operation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsdl__operation(struct soap*, const char *, int, wsdl__operation *const*, const char *);
SOAP_FMAC3 wsdl__operation ** SOAP_FMAC4 soap_in_PointerTowsdl__operation(struct soap*, const char*, wsdl__operation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsdl__operation(struct soap*, wsdl__operation *const*, const char*, const char*);

#ifndef soap_write_PointerTowsdl__operation
#define soap_write_PointerTowsdl__operation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsdl__operation(soap, data),0) || soap_put_PointerTowsdl__operation(soap, data, "wsdl:operation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__operation ** SOAP_FMAC4 soap_get_PointerTowsdl__operation(struct soap*, wsdl__operation **, const char*, const char*);

#ifndef soap_read_PointerTowsdl__operation
#define soap_read_PointerTowsdl__operation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsdl__operation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTosoap__body
#define SOAP_TYPE_PointerTosoap__body (250)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosoap__body(struct soap*, soap__body *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosoap__body(struct soap*, const char *, int, soap__body *const*, const char *);
SOAP_FMAC3 soap__body ** SOAP_FMAC4 soap_in_PointerTosoap__body(struct soap*, const char*, soap__body **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosoap__body(struct soap*, soap__body *const*, const char*, const char*);

#ifndef soap_write_PointerTosoap__body
#define soap_write_PointerTosoap__body(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTosoap__body(soap, data),0) || soap_put_PointerTosoap__body(soap, data, "soap:body", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 soap__body ** SOAP_FMAC4 soap_get_PointerTosoap__body(struct soap*, soap__body **, const char*, const char*);

#ifndef soap_read_PointerTosoap__body
#define soap_read_PointerTosoap__body(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTosoap__body(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsdl__part
#define SOAP_TYPE_PointerTowsdl__part (226)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsdl__part(struct soap*, wsdl__part *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsdl__part(struct soap*, const char *, int, wsdl__part *const*, const char *);
SOAP_FMAC3 wsdl__part ** SOAP_FMAC4 soap_in_PointerTowsdl__part(struct soap*, const char*, wsdl__part **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsdl__part(struct soap*, wsdl__part *const*, const char*, const char*);

#ifndef soap_write_PointerTowsdl__part
#define soap_write_PointerTowsdl__part(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsdl__part(soap, data),0) || soap_put_PointerTowsdl__part(soap, data, "wsdl:part", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__part ** SOAP_FMAC4 soap_get_PointerTowsdl__part(struct soap*, wsdl__part **, const char*, const char*);

#ifndef soap_read_PointerTowsdl__part
#define soap_read_PointerTowsdl__part(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsdl__part(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTowsdl__message
#define SOAP_TYPE_PointerTowsdl__message (225)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsdl__message(struct soap*, wsdl__message *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsdl__message(struct soap*, const char *, int, wsdl__message *const*, const char *);
SOAP_FMAC3 wsdl__message ** SOAP_FMAC4 soap_in_PointerTowsdl__message(struct soap*, const char*, wsdl__message **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsdl__message(struct soap*, wsdl__message *const*, const char*, const char*);

#ifndef soap_write_PointerTowsdl__message
#define soap_write_PointerTowsdl__message(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTowsdl__message(soap, data),0) || soap_put_PointerTowsdl__message(soap, data, "wsdl:message", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 wsdl__message ** SOAP_FMAC4 soap_get_PointerTowsdl__message(struct soap*, wsdl__message **, const char*, const char*);

#ifndef soap_read_PointerTowsdl__message
#define soap_read_PointerTowsdl__message(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTowsdl__message(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTosoap__styleChoice
#define SOAP_TYPE_PointerTosoap__styleChoice (219)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTosoap__styleChoice(struct soap*, enum soap__styleChoice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTosoap__styleChoice(struct soap*, const char *, int, enum soap__styleChoice *const*, const char *);
SOAP_FMAC3 enum soap__styleChoice ** SOAP_FMAC4 soap_in_PointerTosoap__styleChoice(struct soap*, const char*, enum soap__styleChoice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTosoap__styleChoice(struct soap*, enum soap__styleChoice *const*, const char*, const char*);

#ifndef soap_write_PointerTosoap__styleChoice
#define soap_write_PointerTosoap__styleChoice(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTosoap__styleChoice(soap, data),0) || soap_put_PointerTosoap__styleChoice(soap, data, "soap:styleChoice", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum soap__styleChoice ** SOAP_FMAC4 soap_get_PointerTosoap__styleChoice(struct soap*, enum soap__styleChoice **, const char*, const char*);

#ifndef soap_read_PointerTosoap__styleChoice
#define soap_read_PointerTosoap__styleChoice(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTosoap__styleChoice(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__complexContent
#define SOAP_TYPE_PointerToxs__complexContent (152)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__complexContent(struct soap*, xs__complexContent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__complexContent(struct soap*, const char *, int, xs__complexContent *const*, const char *);
SOAP_FMAC3 xs__complexContent ** SOAP_FMAC4 soap_in_PointerToxs__complexContent(struct soap*, const char*, xs__complexContent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__complexContent(struct soap*, xs__complexContent *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__complexContent
#define soap_write_PointerToxs__complexContent(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__complexContent(soap, data),0) || soap_put_PointerToxs__complexContent(soap, data, "xs:complexContent", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__complexContent ** SOAP_FMAC4 soap_get_PointerToxs__complexContent(struct soap*, xs__complexContent **, const char*, const char*);

#ifndef soap_read_PointerToxs__complexContent
#define soap_read_PointerToxs__complexContent(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__complexContent(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__simpleContent
#define SOAP_TYPE_PointerToxs__simpleContent (151)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__simpleContent(struct soap*, xs__simpleContent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__simpleContent(struct soap*, const char *, int, xs__simpleContent *const*, const char *);
SOAP_FMAC3 xs__simpleContent ** SOAP_FMAC4 soap_in_PointerToxs__simpleContent(struct soap*, const char*, xs__simpleContent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__simpleContent(struct soap*, xs__simpleContent *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__simpleContent
#define soap_write_PointerToxs__simpleContent(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__simpleContent(soap, data),0) || soap_put_PointerToxs__simpleContent(soap, data, "xs:simpleContent", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__simpleContent ** SOAP_FMAC4 soap_get_PointerToxs__simpleContent(struct soap*, xs__simpleContent **, const char*, const char*);

#ifndef soap_read_PointerToxs__simpleContent
#define soap_read_PointerToxs__simpleContent(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__simpleContent(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__length
#define SOAP_TYPE_PointerToxs__length (136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__length(struct soap*, xs__length *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__length(struct soap*, const char *, int, xs__length *const*, const char *);
SOAP_FMAC3 xs__length ** SOAP_FMAC4 soap_in_PointerToxs__length(struct soap*, const char*, xs__length **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__length(struct soap*, xs__length *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__length
#define soap_write_PointerToxs__length(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__length(soap, data),0) || soap_put_PointerToxs__length(soap, data, "xs:length", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__length ** SOAP_FMAC4 soap_get_PointerToxs__length(struct soap*, xs__length **, const char*, const char*);

#ifndef soap_read_PointerToxs__length
#define soap_read_PointerToxs__length(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__length(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__whiteSpace
#define SOAP_TYPE_PointerToxs__whiteSpace (135)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__whiteSpace(struct soap*, xs__whiteSpace *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__whiteSpace(struct soap*, const char *, int, xs__whiteSpace *const*, const char *);
SOAP_FMAC3 xs__whiteSpace ** SOAP_FMAC4 soap_in_PointerToxs__whiteSpace(struct soap*, const char*, xs__whiteSpace **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__whiteSpace(struct soap*, xs__whiteSpace *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__whiteSpace
#define soap_write_PointerToxs__whiteSpace(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__whiteSpace(soap, data),0) || soap_put_PointerToxs__whiteSpace(soap, data, "xs:whiteSpace", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__whiteSpace ** SOAP_FMAC4 soap_get_PointerToxs__whiteSpace(struct soap*, xs__whiteSpace **, const char*, const char*);

#ifndef soap_read_PointerToxs__whiteSpace
#define soap_read_PointerToxs__whiteSpace(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__whiteSpace(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__union
#define SOAP_TYPE_PointerToxs__union (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__union(struct soap*, xs__union *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__union(struct soap*, const char *, int, xs__union *const*, const char *);
SOAP_FMAC3 xs__union ** SOAP_FMAC4 soap_in_PointerToxs__union(struct soap*, const char*, xs__union **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__union(struct soap*, xs__union *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__union
#define soap_write_PointerToxs__union(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__union(soap, data),0) || soap_put_PointerToxs__union(soap, data, "xs:union", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__union ** SOAP_FMAC4 soap_get_PointerToxs__union(struct soap*, xs__union **, const char*, const char*);

#ifndef soap_read_PointerToxs__union
#define soap_read_PointerToxs__union(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__union(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__list
#define SOAP_TYPE_PointerToxs__list (118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__list(struct soap*, xs__list *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__list(struct soap*, const char *, int, xs__list *const*, const char *);
SOAP_FMAC3 xs__list ** SOAP_FMAC4 soap_in_PointerToxs__list(struct soap*, const char*, xs__list **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__list(struct soap*, xs__list *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__list
#define soap_write_PointerToxs__list(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__list(soap, data),0) || soap_put_PointerToxs__list(soap, data, "xs:list", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__list ** SOAP_FMAC4 soap_get_PointerToxs__list(struct soap*, xs__list **, const char*, const char*);

#ifndef soap_read_PointerToxs__list
#define soap_read_PointerToxs__list(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__list(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__restriction
#define SOAP_TYPE_PointerToxs__restriction (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__restriction(struct soap*, xs__restriction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__restriction(struct soap*, const char *, int, xs__restriction *const*, const char *);
SOAP_FMAC3 xs__restriction ** SOAP_FMAC4 soap_in_PointerToxs__restriction(struct soap*, const char*, xs__restriction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__restriction(struct soap*, xs__restriction *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__restriction
#define soap_write_PointerToxs__restriction(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__restriction(soap, data),0) || soap_put_PointerToxs__restriction(soap, data, "xs:restriction", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__restriction ** SOAP_FMAC4 soap_get_PointerToxs__restriction(struct soap*, xs__restriction **, const char*, const char*);

#ifndef soap_read_PointerToxs__restriction
#define soap_read_PointerToxs__restriction(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__restriction(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__extension
#define SOAP_TYPE_PointerToxs__extension (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__extension(struct soap*, xs__extension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__extension(struct soap*, const char *, int, xs__extension *const*, const char *);
SOAP_FMAC3 xs__extension ** SOAP_FMAC4 soap_in_PointerToxs__extension(struct soap*, const char*, xs__extension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__extension(struct soap*, xs__extension *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__extension
#define soap_write_PointerToxs__extension(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__extension(soap, data),0) || soap_put_PointerToxs__extension(soap, data, "xs:extension", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__extension ** SOAP_FMAC4 soap_get_PointerToxs__extension(struct soap*, xs__extension **, const char*, const char*);

#ifndef soap_read_PointerToxs__extension
#define soap_read_PointerToxs__extension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__extension(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__attributeGroup
#define SOAP_TYPE_PointerToxs__attributeGroup (102)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__attributeGroup(struct soap*, xs__attributeGroup *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__attributeGroup(struct soap*, const char *, int, xs__attributeGroup *const*, const char *);
SOAP_FMAC3 xs__attributeGroup ** SOAP_FMAC4 soap_in_PointerToxs__attributeGroup(struct soap*, const char*, xs__attributeGroup **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__attributeGroup(struct soap*, xs__attributeGroup *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__attributeGroup
#define soap_write_PointerToxs__attributeGroup(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__attributeGroup(soap, data),0) || soap_put_PointerToxs__attributeGroup(soap, data, "xs:attributeGroup", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__attributeGroup ** SOAP_FMAC4 soap_get_PointerToxs__attributeGroup(struct soap*, xs__attributeGroup **, const char*, const char*);

#ifndef soap_read_PointerToxs__attributeGroup
#define soap_read_PointerToxs__attributeGroup(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__attributeGroup(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__anyAttribute
#define SOAP_TYPE_PointerToxs__anyAttribute (101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__anyAttribute(struct soap*, xs__anyAttribute *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__anyAttribute(struct soap*, const char *, int, xs__anyAttribute *const*, const char *);
SOAP_FMAC3 xs__anyAttribute ** SOAP_FMAC4 soap_in_PointerToxs__anyAttribute(struct soap*, const char*, xs__anyAttribute **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__anyAttribute(struct soap*, xs__anyAttribute *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__anyAttribute
#define soap_write_PointerToxs__anyAttribute(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__anyAttribute(soap, data),0) || soap_put_PointerToxs__anyAttribute(soap, data, "xs:anyAttribute", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__anyAttribute ** SOAP_FMAC4 soap_get_PointerToxs__anyAttribute(struct soap*, xs__anyAttribute **, const char*, const char*);

#ifndef soap_read_PointerToxs__anyAttribute
#define soap_read_PointerToxs__anyAttribute(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__anyAttribute(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__all
#define SOAP_TYPE_PointerToxs__all (89)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__all(struct soap*, xs__all *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__all(struct soap*, const char *, int, xs__all *const*, const char *);
SOAP_FMAC3 xs__all ** SOAP_FMAC4 soap_in_PointerToxs__all(struct soap*, const char*, xs__all **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__all(struct soap*, xs__all *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__all
#define soap_write_PointerToxs__all(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__all(soap, data),0) || soap_put_PointerToxs__all(soap, data, "xs:all", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__all ** SOAP_FMAC4 soap_get_PointerToxs__all(struct soap*, xs__all **, const char*, const char*);

#ifndef soap_read_PointerToxs__all
#define soap_read_PointerToxs__all(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__all(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__any
#define SOAP_TYPE_PointerToxs__any (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__any(struct soap*, xs__any *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__any(struct soap*, const char *, int, xs__any *const*, const char *);
SOAP_FMAC3 xs__any ** SOAP_FMAC4 soap_in_PointerToxs__any(struct soap*, const char*, xs__any **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__any(struct soap*, xs__any *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__any
#define soap_write_PointerToxs__any(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__any(soap, data),0) || soap_put_PointerToxs__any(soap, data, "xs:any", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__any ** SOAP_FMAC4 soap_get_PointerToxs__any(struct soap*, xs__any **, const char*, const char*);

#ifndef soap_read_PointerToxs__any
#define soap_read_PointerToxs__any(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__any(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__seqchoice
#define SOAP_TYPE_PointerToxs__seqchoice (80)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__seqchoice(struct soap*, xs__seqchoice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__seqchoice(struct soap*, const char *, int, xs__seqchoice *const*, const char *);
SOAP_FMAC3 xs__seqchoice ** SOAP_FMAC4 soap_in_PointerToxs__seqchoice(struct soap*, const char*, xs__seqchoice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__seqchoice(struct soap*, xs__seqchoice *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__seqchoice
#define soap_write_PointerToxs__seqchoice(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__seqchoice(soap, data),0) || soap_put_PointerToxs__seqchoice(soap, data, "xs:seqchoice", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__seqchoice ** SOAP_FMAC4 soap_get_PointerToxs__seqchoice(struct soap*, xs__seqchoice **, const char*, const char*);

#ifndef soap_read_PointerToxs__seqchoice
#define soap_read_PointerToxs__seqchoice(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__seqchoice(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__group
#define SOAP_TYPE_PointerToxs__group (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__group(struct soap*, xs__group *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__group(struct soap*, const char *, int, xs__group *const*, const char *);
SOAP_FMAC3 xs__group ** SOAP_FMAC4 soap_in_PointerToxs__group(struct soap*, const char*, xs__group **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__group(struct soap*, xs__group *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__group
#define soap_write_PointerToxs__group(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__group(soap, data),0) || soap_put_PointerToxs__group(soap, data, "xs:group", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__group ** SOAP_FMAC4 soap_get_PointerToxs__group(struct soap*, xs__group **, const char*, const char*);

#ifndef soap_read_PointerToxs__group
#define soap_read_PointerToxs__group(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__group(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xs__namespaceList
#define SOAP_TYPE_xs__namespaceList (75)
#endif

#define soap_default_xs__namespaceList(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xs__namespaceList(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xs__namespaceList(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xs__namespaceList(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xs__namespaceList(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xs__namespaceList
#define soap_write_xs__namespaceList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xs__namespaceList(soap, data),0) || soap_put_xs__namespaceList(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xs__namespaceList(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xs__namespaceList
#define soap_read_xs__namespaceList(soap, data) ( soap_begin_recv(soap) || !soap_get_xs__namespaceList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__attribute
#define SOAP_TYPE_PointerToxs__attribute (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__attribute(struct soap*, xs__attribute *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__attribute(struct soap*, const char *, int, xs__attribute *const*, const char *);
SOAP_FMAC3 xs__attribute ** SOAP_FMAC4 soap_in_PointerToxs__attribute(struct soap*, const char*, xs__attribute **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__attribute(struct soap*, xs__attribute *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__attribute
#define soap_write_PointerToxs__attribute(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__attribute(soap, data),0) || soap_put_PointerToxs__attribute(soap, data, "xs:attribute", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__attribute ** SOAP_FMAC4 soap_get_PointerToxs__attribute(struct soap*, xs__attribute **, const char*, const char*);

#ifndef soap_read_PointerToxs__attribute
#define soap_read_PointerToxs__attribute(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__attribute(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOfPointerToxs__element
#define SOAP_TYPE_PointerTostd__vectorTemplateOfPointerToxs__element (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOfPointerToxs__element(struct soap*, std::vector<xs__element * >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOfPointerToxs__element(struct soap*, const char *, int, std::vector<xs__element * >*const*, const char *);
SOAP_FMAC3 std::vector<xs__element * >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOfPointerToxs__element(struct soap*, const char*, std::vector<xs__element * >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOfPointerToxs__element(struct soap*, std::vector<xs__element * >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOfPointerToxs__element
#define soap_write_PointerTostd__vectorTemplateOfPointerToxs__element(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOfPointerToxs__element(soap, data),0) || soap_put_PointerTostd__vectorTemplateOfPointerToxs__element(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<xs__element * >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOfPointerToxs__element(struct soap*, std::vector<xs__element * >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOfPointerToxs__element
#define soap_read_PointerTostd__vectorTemplateOfPointerToxs__element(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOfPointerToxs__element(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__element
#define SOAP_TYPE_PointerToxs__element (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__element(struct soap*, xs__element *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__element(struct soap*, const char *, int, xs__element *const*, const char *);
SOAP_FMAC3 xs__element ** SOAP_FMAC4 soap_in_PointerToxs__element(struct soap*, const char*, xs__element **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__element(struct soap*, xs__element *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__element
#define soap_write_PointerToxs__element(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__element(soap, data),0) || soap_put_PointerToxs__element(soap, data, "xs:element", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__element ** SOAP_FMAC4 soap_get_PointerToxs__element(struct soap*, xs__element **, const char*, const char*);

#ifndef soap_read_PointerToxs__element
#define soap_read_PointerToxs__element(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__element(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__schema
#define SOAP_TYPE_PointerToxs__schema (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__schema(struct soap*, xs__schema *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__schema(struct soap*, const char *, int, xs__schema *const*, const char *);
SOAP_FMAC3 xs__schema ** SOAP_FMAC4 soap_in_PointerToxs__schema(struct soap*, const char*, xs__schema **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__schema(struct soap*, xs__schema *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__schema
#define soap_write_PointerToxs__schema(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__schema(soap, data),0) || soap_put_PointerToxs__schema(soap, data, "xs:schema", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__schema ** SOAP_FMAC4 soap_get_PointerToxs__schema(struct soap*, xs__schema **, const char*, const char*);

#ifndef soap_read_PointerToxs__schema
#define soap_read_PointerToxs__schema(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__schema(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__complexType
#define SOAP_TYPE_PointerToxs__complexType (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__complexType(struct soap*, xs__complexType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__complexType(struct soap*, const char *, int, xs__complexType *const*, const char *);
SOAP_FMAC3 xs__complexType ** SOAP_FMAC4 soap_in_PointerToxs__complexType(struct soap*, const char*, xs__complexType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__complexType(struct soap*, xs__complexType *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__complexType
#define soap_write_PointerToxs__complexType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__complexType(soap, data),0) || soap_put_PointerToxs__complexType(soap, data, "xs:complexType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__complexType ** SOAP_FMAC4 soap_get_PointerToxs__complexType(struct soap*, xs__complexType **, const char*, const char*);

#ifndef soap_read_PointerToxs__complexType
#define soap_read_PointerToxs__complexType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__complexType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__simpleType
#define SOAP_TYPE_PointerToxs__simpleType (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__simpleType(struct soap*, xs__simpleType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__simpleType(struct soap*, const char *, int, xs__simpleType *const*, const char *);
SOAP_FMAC3 xs__simpleType ** SOAP_FMAC4 soap_in_PointerToxs__simpleType(struct soap*, const char*, xs__simpleType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__simpleType(struct soap*, xs__simpleType *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__simpleType
#define soap_write_PointerToxs__simpleType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__simpleType(soap, data),0) || soap_put_PointerToxs__simpleType(soap, data, "xs:simpleType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__simpleType ** SOAP_FMAC4 soap_get_PointerToxs__simpleType(struct soap*, xs__simpleType **, const char*, const char*);

#ifndef soap_read_PointerToxs__simpleType
#define soap_read_PointerToxs__simpleType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__simpleType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__annotation
#define SOAP_TYPE_PointerToxs__annotation (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__annotation(struct soap*, xs__annotation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__annotation(struct soap*, const char *, int, xs__annotation *const*, const char *);
SOAP_FMAC3 xs__annotation ** SOAP_FMAC4 soap_in_PointerToxs__annotation(struct soap*, const char*, xs__annotation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__annotation(struct soap*, xs__annotation *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__annotation
#define soap_write_PointerToxs__annotation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__annotation(soap, data),0) || soap_put_PointerToxs__annotation(soap, data, "xs:annotation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xs__annotation ** SOAP_FMAC4 soap_get_PointerToxs__annotation(struct soap*, xs__annotation **, const char*, const char*);

#ifndef soap_read_PointerToxs__annotation
#define soap_read_PointerToxs__annotation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__annotation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxs__formChoice
#define SOAP_TYPE_PointerToxs__formChoice (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxs__formChoice(struct soap*, enum xs__formChoice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxs__formChoice(struct soap*, const char *, int, enum xs__formChoice *const*, const char *);
SOAP_FMAC3 enum xs__formChoice ** SOAP_FMAC4 soap_in_PointerToxs__formChoice(struct soap*, const char*, enum xs__formChoice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxs__formChoice(struct soap*, enum xs__formChoice *const*, const char*, const char*);

#ifndef soap_write_PointerToxs__formChoice
#define soap_write_PointerToxs__formChoice(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxs__formChoice(soap, data),0) || soap_put_PointerToxs__formChoice(soap, data, "xs:formChoice", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum xs__formChoice ** SOAP_FMAC4 soap_get_PointerToxs__formChoice(struct soap*, enum xs__formChoice **, const char*, const char*);

#ifndef soap_read_PointerToxs__formChoice
#define soap_read_PointerToxs__formChoice(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxs__formChoice(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (14)
#endif

#define soap_default_xsd__string(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__string(soap, data),0) || soap_put_xsd__string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (13)
#endif

#define soap_default_xsd__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__QName
#define soap_write_xsd__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__QName(soap, data),0) || soap_put_xsd__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__QName
#define soap_read_xsd__QName(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__NMTOKENS
#define SOAP_TYPE_xsd__NMTOKENS (12)
#endif

#define soap_default_xsd__NMTOKENS(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NMTOKENS(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NMTOKENS(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__NMTOKENS(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NMTOKENS(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__NMTOKENS
#define soap_write_xsd__NMTOKENS(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__NMTOKENS(soap, data),0) || soap_put_xsd__NMTOKENS(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__NMTOKENS(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__NMTOKENS
#define soap_read_xsd__NMTOKENS(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__NMTOKENS(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__NMTOKEN
#define SOAP_TYPE_xsd__NMTOKEN (11)
#endif

#define soap_default_xsd__NMTOKEN(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NMTOKEN(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NMTOKEN(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__NMTOKEN(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NMTOKEN(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__NMTOKEN
#define soap_write_xsd__NMTOKEN(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__NMTOKEN(soap, data),0) || soap_put_xsd__NMTOKEN(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__NMTOKEN(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__NMTOKEN
#define soap_read_xsd__NMTOKEN(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__NMTOKEN(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (10)
#endif

#define soap_default_xsd__NCName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NCName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NCName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__NCName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NCName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__NCName
#define soap_write_xsd__NCName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__NCName(soap, data),0) || soap_put_xsd__NCName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__NCName(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__NCName
#define soap_read_xsd__NCName(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__NCName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__ID
#define SOAP_TYPE_xsd__ID (9)
#endif

#define soap_default_xsd__ID(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__ID(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__ID
#define soap_write_xsd__ID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__ID(soap, data),0) || soap_put_xsd__ID(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__ID(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__ID
#define soap_read_xsd__ID(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__ID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (8)
#endif

#define soap_default_xsd__anyURI(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__anyURI
#define soap_write_xsd__anyURI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__anyURI(soap, data),0) || soap_put_xsd__anyURI(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__anyURI
#define soap_read_xsd__anyURI(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyURI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfgwsdl__portType
#define SOAP_TYPE_std__vectorTemplateOfgwsdl__portType (418)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfgwsdl__portType(struct soap*, std::vector<gwsdl__portType >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfgwsdl__portType(struct soap*, const std::vector<gwsdl__portType >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfgwsdl__portType(struct soap*, const char*, int, const std::vector<gwsdl__portType >*, const char*);
SOAP_FMAC3 std::vector<gwsdl__portType >* SOAP_FMAC4 soap_in_std__vectorTemplateOfgwsdl__portType(struct soap*, const char*, std::vector<gwsdl__portType >*, const char*);
SOAP_FMAC1 std::vector<gwsdl__portType > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfgwsdl__portType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<gwsdl__portType > * soap_new_std__vectorTemplateOfgwsdl__portType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfgwsdl__portType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfgwsdl__portType(struct soap *soap, std::vector<gwsdl__portType >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfgwsdl__portType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsdl__service
#define SOAP_TYPE_std__vectorTemplateOfwsdl__service (417)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsdl__service(struct soap*, std::vector<wsdl__service >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsdl__service(struct soap*, const std::vector<wsdl__service >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsdl__service(struct soap*, const char*, int, const std::vector<wsdl__service >*, const char*);
SOAP_FMAC3 std::vector<wsdl__service >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsdl__service(struct soap*, const char*, std::vector<wsdl__service >*, const char*);
SOAP_FMAC1 std::vector<wsdl__service > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsdl__service(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsdl__service > * soap_new_std__vectorTemplateOfwsdl__service(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsdl__service(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsdl__service(struct soap *soap, std::vector<wsdl__service >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsdl__service(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsdl__binding
#define SOAP_TYPE_std__vectorTemplateOfwsdl__binding (416)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsdl__binding(struct soap*, std::vector<wsdl__binding >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsdl__binding(struct soap*, const std::vector<wsdl__binding >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsdl__binding(struct soap*, const char*, int, const std::vector<wsdl__binding >*, const char*);
SOAP_FMAC3 std::vector<wsdl__binding >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsdl__binding(struct soap*, const char*, std::vector<wsdl__binding >*, const char*);
SOAP_FMAC1 std::vector<wsdl__binding > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsdl__binding(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsdl__binding > * soap_new_std__vectorTemplateOfwsdl__binding(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsdl__binding(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsdl__binding(struct soap *soap, std::vector<wsdl__binding >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsdl__binding(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsdl__portType
#define SOAP_TYPE_std__vectorTemplateOfwsdl__portType (415)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsdl__portType(struct soap*, std::vector<wsdl__portType >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsdl__portType(struct soap*, const std::vector<wsdl__portType >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsdl__portType(struct soap*, const char*, int, const std::vector<wsdl__portType >*, const char*);
SOAP_FMAC3 std::vector<wsdl__portType >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsdl__portType(struct soap*, const char*, std::vector<wsdl__portType >*, const char*);
SOAP_FMAC1 std::vector<wsdl__portType > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsdl__portType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsdl__portType > * soap_new_std__vectorTemplateOfwsdl__portType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsdl__portType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsdl__portType(struct soap *soap, std::vector<wsdl__portType >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsdl__portType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsdl__message
#define SOAP_TYPE_std__vectorTemplateOfwsdl__message (414)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsdl__message(struct soap*, std::vector<wsdl__message >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsdl__message(struct soap*, const std::vector<wsdl__message >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsdl__message(struct soap*, const char*, int, const std::vector<wsdl__message >*, const char*);
SOAP_FMAC3 std::vector<wsdl__message >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsdl__message(struct soap*, const char*, std::vector<wsdl__message >*, const char*);
SOAP_FMAC1 std::vector<wsdl__message > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsdl__message(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsdl__message > * soap_new_std__vectorTemplateOfwsdl__message(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsdl__message(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsdl__message(struct soap *soap, std::vector<wsdl__message >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsdl__message(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsdl__import
#define SOAP_TYPE_std__vectorTemplateOfwsdl__import (412)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsdl__import(struct soap*, std::vector<wsdl__import >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsdl__import(struct soap*, const std::vector<wsdl__import >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsdl__import(struct soap*, const char*, int, const std::vector<wsdl__import >*, const char*);
SOAP_FMAC3 std::vector<wsdl__import >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsdl__import(struct soap*, const char*, std::vector<wsdl__import >*, const char*);
SOAP_FMAC1 std::vector<wsdl__import > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsdl__import(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsdl__import > * soap_new_std__vectorTemplateOfwsdl__import(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsdl__import(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsdl__import(struct soap *soap, std::vector<wsdl__import >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsdl__import(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsdl__port
#define SOAP_TYPE_std__vectorTemplateOfwsdl__port (410)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsdl__port(struct soap*, std::vector<wsdl__port >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsdl__port(struct soap*, const std::vector<wsdl__port >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsdl__port(struct soap*, const char*, int, const std::vector<wsdl__port >*, const char*);
SOAP_FMAC3 std::vector<wsdl__port >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsdl__port(struct soap*, const char*, std::vector<wsdl__port >*, const char*);
SOAP_FMAC1 std::vector<wsdl__port > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsdl__port(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsdl__port > * soap_new_std__vectorTemplateOfwsdl__port(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsdl__port(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsdl__port(struct soap *soap, std::vector<wsdl__port >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsdl__port(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsdl__ext_operation
#define SOAP_TYPE_std__vectorTemplateOfwsdl__ext_operation (394)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsdl__ext_operation(struct soap*, std::vector<wsdl__ext_operation >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsdl__ext_operation(struct soap*, const std::vector<wsdl__ext_operation >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsdl__ext_operation(struct soap*, const char*, int, const std::vector<wsdl__ext_operation >*, const char*);
SOAP_FMAC3 std::vector<wsdl__ext_operation >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsdl__ext_operation(struct soap*, const char*, std::vector<wsdl__ext_operation >*, const char*);
SOAP_FMAC1 std::vector<wsdl__ext_operation > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsdl__ext_operation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsdl__ext_operation > * soap_new_std__vectorTemplateOfwsdl__ext_operation(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsdl__ext_operation(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsdl__ext_operation(struct soap *soap, std::vector<wsdl__ext_operation >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsdl__ext_operation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsdl__ext_fault
#define SOAP_TYPE_std__vectorTemplateOfwsdl__ext_fault (385)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsdl__ext_fault(struct soap*, std::vector<wsdl__ext_fault >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsdl__ext_fault(struct soap*, const std::vector<wsdl__ext_fault >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsdl__ext_fault(struct soap*, const char*, int, const std::vector<wsdl__ext_fault >*, const char*);
SOAP_FMAC3 std::vector<wsdl__ext_fault >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsdl__ext_fault(struct soap*, const char*, std::vector<wsdl__ext_fault >*, const char*);
SOAP_FMAC1 std::vector<wsdl__ext_fault > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsdl__ext_fault(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsdl__ext_fault > * soap_new_std__vectorTemplateOfwsdl__ext_fault(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsdl__ext_fault(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsdl__ext_fault(struct soap *soap, std::vector<wsdl__ext_fault >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsdl__ext_fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwhttp__header
#define SOAP_TYPE_std__vectorTemplateOfwhttp__header (370)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwhttp__header(struct soap*, std::vector<whttp__header >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwhttp__header(struct soap*, const std::vector<whttp__header >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwhttp__header(struct soap*, const char*, int, const std::vector<whttp__header >*, const char*);
SOAP_FMAC3 std::vector<whttp__header >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwhttp__header(struct soap*, const char*, std::vector<whttp__header >*, const char*);
SOAP_FMAC1 std::vector<whttp__header > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwhttp__header(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<whttp__header > * soap_new_std__vectorTemplateOfwhttp__header(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwhttp__header(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwhttp__header(struct soap *soap, std::vector<whttp__header >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwhttp__header(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsoap__header
#define SOAP_TYPE_std__vectorTemplateOfwsoap__header (369)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsoap__header(struct soap*, std::vector<wsoap__header >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsoap__header(struct soap*, const std::vector<wsoap__header >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsoap__header(struct soap*, const char*, int, const std::vector<wsoap__header >*, const char*);
SOAP_FMAC3 std::vector<wsoap__header >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsoap__header(struct soap*, const char*, std::vector<wsoap__header >*, const char*);
SOAP_FMAC1 std::vector<wsoap__header > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsoap__header(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsoap__header > * soap_new_std__vectorTemplateOfwsoap__header(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsoap__header(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsoap__header(struct soap *soap, std::vector<wsoap__header >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsoap__header(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsoap__module
#define SOAP_TYPE_std__vectorTemplateOfwsoap__module (368)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsoap__module(struct soap*, std::vector<wsoap__module >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsoap__module(struct soap*, const std::vector<wsoap__module >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsoap__module(struct soap*, const char*, int, const std::vector<wsoap__module >*, const char*);
SOAP_FMAC3 std::vector<wsoap__module >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsoap__module(struct soap*, const char*, std::vector<wsoap__module >*, const char*);
SOAP_FMAC1 std::vector<wsoap__module > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsoap__module(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsoap__module > * soap_new_std__vectorTemplateOfwsoap__module(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsoap__module(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsoap__module(struct soap *soap, std::vector<wsoap__module >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsoap__module(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsdl__operation
#define SOAP_TYPE_std__vectorTemplateOfwsdl__operation (358)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsdl__operation(struct soap*, std::vector<wsdl__operation >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsdl__operation(struct soap*, const std::vector<wsdl__operation >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsdl__operation(struct soap*, const char*, int, const std::vector<wsdl__operation >*, const char*);
SOAP_FMAC3 std::vector<wsdl__operation >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsdl__operation(struct soap*, const char*, std::vector<wsdl__operation >*, const char*);
SOAP_FMAC1 std::vector<wsdl__operation > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsdl__operation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsdl__operation > * soap_new_std__vectorTemplateOfwsdl__operation(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsdl__operation(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsdl__operation(struct soap *soap, std::vector<wsdl__operation >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsdl__operation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsdl__fault
#define SOAP_TYPE_std__vectorTemplateOfwsdl__fault (355)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsdl__fault(struct soap*, std::vector<wsdl__fault >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsdl__fault(struct soap*, const std::vector<wsdl__fault >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsdl__fault(struct soap*, const char*, int, const std::vector<wsdl__fault >*, const char*);
SOAP_FMAC3 std::vector<wsdl__fault >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsdl__fault(struct soap*, const char*, std::vector<wsdl__fault >*, const char*);
SOAP_FMAC1 std::vector<wsdl__fault > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsdl__fault(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsdl__fault > * soap_new_std__vectorTemplateOfwsdl__fault(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsdl__fault(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsdl__fault(struct soap *soap, std::vector<wsdl__fault >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsdl__fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsdl__part
#define SOAP_TYPE_std__vectorTemplateOfwsdl__part (337)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsdl__part(struct soap*, std::vector<wsdl__part >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsdl__part(struct soap*, const std::vector<wsdl__part >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsdl__part(struct soap*, const char*, int, const std::vector<wsdl__part >*, const char*);
SOAP_FMAC3 std::vector<wsdl__part >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsdl__part(struct soap*, const char*, std::vector<wsdl__part >*, const char*);
SOAP_FMAC1 std::vector<wsdl__part > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsdl__part(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsdl__part > * soap_new_std__vectorTemplateOfwsdl__part(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsdl__part(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsdl__part(struct soap *soap, std::vector<wsdl__part >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsdl__part(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsp__PolicyReference
#define SOAP_TYPE_std__vectorTemplateOfwsp__PolicyReference (336)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsp__PolicyReference(struct soap*, std::vector<wsp__PolicyReference >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsp__PolicyReference(struct soap*, const std::vector<wsp__PolicyReference >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsp__PolicyReference(struct soap*, const char*, int, const std::vector<wsp__PolicyReference >*, const char*);
SOAP_FMAC3 std::vector<wsp__PolicyReference >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsp__PolicyReference(struct soap*, const char*, std::vector<wsp__PolicyReference >*, const char*);
SOAP_FMAC1 std::vector<wsp__PolicyReference > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsp__PolicyReference(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsp__PolicyReference > * soap_new_std__vectorTemplateOfwsp__PolicyReference(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsp__PolicyReference(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsp__PolicyReference(struct soap *soap, std::vector<wsp__PolicyReference >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsp__PolicyReference(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsp__Policy
#define SOAP_TYPE_std__vectorTemplateOfwsp__Policy (335)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsp__Policy(struct soap*, std::vector<wsp__Policy >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsp__Policy(struct soap*, const std::vector<wsp__Policy >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsp__Policy(struct soap*, const char*, int, const std::vector<wsp__Policy >*, const char*);
SOAP_FMAC3 std::vector<wsp__Policy >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsp__Policy(struct soap*, const char*, std::vector<wsp__Policy >*, const char*);
SOAP_FMAC1 std::vector<wsp__Policy > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsp__Policy(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsp__Policy > * soap_new_std__vectorTemplateOfwsp__Policy(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsp__Policy(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsp__Policy(struct soap *soap, std::vector<wsp__Policy >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsp__Policy(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToxs__schema
#define SOAP_TYPE_std__vectorTemplateOfPointerToxs__schema (324)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToxs__schema(struct soap*, std::vector<xs__schema * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToxs__schema(struct soap*, const std::vector<xs__schema * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToxs__schema(struct soap*, const char*, int, const std::vector<xs__schema * >*, const char*);
SOAP_FMAC3 std::vector<xs__schema * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToxs__schema(struct soap*, const char*, std::vector<xs__schema * >*, const char*);
SOAP_FMAC1 std::vector<xs__schema * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToxs__schema(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<xs__schema * > * soap_new_std__vectorTemplateOfPointerToxs__schema(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerToxs__schema(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerToxs__schema(struct soap *soap, std::vector<xs__schema * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToxs__schema(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfwsp__Attachment
#define SOAP_TYPE_std__vectorTemplateOfwsp__Attachment (314)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfwsp__Attachment(struct soap*, std::vector<wsp__Attachment >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfwsp__Attachment(struct soap*, const std::vector<wsp__Attachment >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfwsp__Attachment(struct soap*, const char*, int, const std::vector<wsp__Attachment >*, const char*);
SOAP_FMAC3 std::vector<wsp__Attachment >* SOAP_FMAC4 soap_in_std__vectorTemplateOfwsp__Attachment(struct soap*, const char*, std::vector<wsp__Attachment >*, const char*);
SOAP_FMAC1 std::vector<wsp__Attachment > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfwsp__Attachment(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsp__Attachment > * soap_new_std__vectorTemplateOfwsp__Attachment(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfwsp__Attachment(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfwsp__Attachment(struct soap *soap, std::vector<wsp__Attachment >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfwsp__Attachment(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML
#define SOAP_TYPE_std__vectorTemplateOf_XML (305)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char * >*, const char*);
SOAP_FMAC3 std::vector<char * >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char * >*, const char*);
SOAP_FMAC1 std::vector<char * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char * > * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_XML(struct soap *soap, std::vector<char * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_XML(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfsp__Parts
#define SOAP_TYPE_std__vectorTemplateOfsp__Parts (300)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfsp__Parts(struct soap*, std::vector<sp__Parts >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfsp__Parts(struct soap*, const std::vector<sp__Parts >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfsp__Parts(struct soap*, const char*, int, const std::vector<sp__Parts >*, const char*);
SOAP_FMAC3 std::vector<sp__Parts >* SOAP_FMAC4 soap_in_std__vectorTemplateOfsp__Parts(struct soap*, const char*, std::vector<sp__Parts >*, const char*);
SOAP_FMAC1 std::vector<sp__Parts > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfsp__Parts(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<sp__Parts > * soap_new_std__vectorTemplateOfsp__Parts(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfsp__Parts(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfsp__Parts(struct soap *soap, std::vector<sp__Parts >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfsp__Parts(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowsp__Content
#define SOAP_TYPE_std__vectorTemplateOfPointerTowsp__Content (299)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowsp__Content(struct soap*, std::vector<wsp__Content * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowsp__Content(struct soap*, const std::vector<wsp__Content * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowsp__Content(struct soap*, const char*, int, const std::vector<wsp__Content * >*, const char*);
SOAP_FMAC3 std::vector<wsp__Content * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowsp__Content(struct soap*, const char*, std::vector<wsp__Content * >*, const char*);
SOAP_FMAC1 std::vector<wsp__Content * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowsp__Content(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsp__Content * > * soap_new_std__vectorTemplateOfPointerTowsp__Content(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTowsp__Content(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTowsp__Content(struct soap *soap, std::vector<wsp__Content * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTowsp__Content(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__string
#define SOAP_TYPE_std__vectorTemplateOfxsd__string (291)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__string(struct soap*, std::vector<char * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__string(struct soap*, const std::vector<char * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__string(struct soap*, const char*, int, const std::vector<char * >*, const char*);
SOAP_FMAC3 std::vector<char * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__string(struct soap*, const char*, std::vector<char * >*, const char*);
SOAP_FMAC1 std::vector<char * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char * > * soap_new_std__vectorTemplateOfxsd__string(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__string(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxsd__string(struct soap *soap, std::vector<char * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfsp__Header
#define SOAP_TYPE_std__vectorTemplateOfsp__Header (289)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfsp__Header(struct soap*, std::vector<sp__Header >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfsp__Header(struct soap*, const std::vector<sp__Header >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfsp__Header(struct soap*, const char*, int, const std::vector<sp__Header >*, const char*);
SOAP_FMAC3 std::vector<sp__Header >* SOAP_FMAC4 soap_in_std__vectorTemplateOfsp__Header(struct soap*, const char*, std::vector<sp__Header >*, const char*);
SOAP_FMAC1 std::vector<sp__Header > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfsp__Header(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<sp__Header > * soap_new_std__vectorTemplateOfsp__Header(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfsp__Header(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfsp__Header(struct soap *soap, std::vector<sp__Header >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfsp__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfsd__serviceData
#define SOAP_TYPE_std__vectorTemplateOfsd__serviceData (271)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfsd__serviceData(struct soap*, std::vector<sd__serviceData >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfsd__serviceData(struct soap*, const std::vector<sd__serviceData >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfsd__serviceData(struct soap*, const char*, int, const std::vector<sd__serviceData >*, const char*);
SOAP_FMAC3 std::vector<sd__serviceData >* SOAP_FMAC4 soap_in_std__vectorTemplateOfsd__serviceData(struct soap*, const char*, std::vector<sd__serviceData >*, const char*);
SOAP_FMAC1 std::vector<sd__serviceData > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfsd__serviceData(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<sd__serviceData > * soap_new_std__vectorTemplateOfsd__serviceData(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfsd__serviceData(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfsd__serviceData(struct soap *soap, std::vector<sd__serviceData >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfsd__serviceData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTowsdl__operation
#define SOAP_TYPE_std__vectorTemplateOfPointerTowsdl__operation (270)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTowsdl__operation(struct soap*, std::vector<wsdl__operation * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTowsdl__operation(struct soap*, const std::vector<wsdl__operation * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTowsdl__operation(struct soap*, const char*, int, const std::vector<wsdl__operation * >*, const char*);
SOAP_FMAC3 std::vector<wsdl__operation * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTowsdl__operation(struct soap*, const char*, std::vector<wsdl__operation * >*, const char*);
SOAP_FMAC1 std::vector<wsdl__operation * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTowsdl__operation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<wsdl__operation * > * soap_new_std__vectorTemplateOfPointerTowsdl__operation(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTowsdl__operation(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTowsdl__operation(struct soap *soap, std::vector<wsdl__operation * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTowsdl__operation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfmime__part
#define SOAP_TYPE_std__vectorTemplateOfmime__part (255)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfmime__part(struct soap*, std::vector<mime__part >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfmime__part(struct soap*, const std::vector<mime__part >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfmime__part(struct soap*, const char*, int, const std::vector<mime__part >*, const char*);
SOAP_FMAC3 std::vector<mime__part >* SOAP_FMAC4 soap_in_std__vectorTemplateOfmime__part(struct soap*, const char*, std::vector<mime__part >*, const char*);
SOAP_FMAC1 std::vector<mime__part > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfmime__part(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<mime__part > * soap_new_std__vectorTemplateOfmime__part(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfmime__part(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfmime__part(struct soap *soap, std::vector<mime__part >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfmime__part(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfmime__content
#define SOAP_TYPE_std__vectorTemplateOfmime__content (252)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfmime__content(struct soap*, std::vector<mime__content >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfmime__content(struct soap*, const std::vector<mime__content >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfmime__content(struct soap*, const char*, int, const std::vector<mime__content >*, const char*);
SOAP_FMAC3 std::vector<mime__content >* SOAP_FMAC4 soap_in_std__vectorTemplateOfmime__content(struct soap*, const char*, std::vector<mime__content >*, const char*);
SOAP_FMAC1 std::vector<mime__content > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfmime__content(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<mime__content > * soap_new_std__vectorTemplateOfmime__content(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfmime__content(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfmime__content(struct soap *soap, std::vector<mime__content >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfmime__content(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfsoap__header
#define SOAP_TYPE_std__vectorTemplateOfsoap__header (251)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfsoap__header(struct soap*, std::vector<soap__header >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfsoap__header(struct soap*, const std::vector<soap__header >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfsoap__header(struct soap*, const char*, int, const std::vector<soap__header >*, const char*);
SOAP_FMAC3 std::vector<soap__header >* SOAP_FMAC4 soap_in_std__vectorTemplateOfsoap__header(struct soap*, const char*, std::vector<soap__header >*, const char*);
SOAP_FMAC1 std::vector<soap__header > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfsoap__header(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<soap__header > * soap_new_std__vectorTemplateOfsoap__header(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfsoap__header(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfsoap__header(struct soap *soap, std::vector<soap__header >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfsoap__header(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfsoap__headerfault
#define SOAP_TYPE_std__vectorTemplateOfsoap__headerfault (236)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfsoap__headerfault(struct soap*, std::vector<soap__headerfault >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfsoap__headerfault(struct soap*, const std::vector<soap__headerfault >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfsoap__headerfault(struct soap*, const char*, int, const std::vector<soap__headerfault >*, const char*);
SOAP_FMAC3 std::vector<soap__headerfault >* SOAP_FMAC4 soap_in_std__vectorTemplateOfsoap__headerfault(struct soap*, const char*, std::vector<soap__headerfault >*, const char*);
SOAP_FMAC1 std::vector<soap__headerfault > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfsoap__headerfault(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<soap__headerfault > * soap_new_std__vectorTemplateOfsoap__headerfault(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfsoap__headerfault(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfsoap__headerfault(struct soap *soap, std::vector<soap__headerfault >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfsoap__headerfault(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxs__import
#define SOAP_TYPE_std__vectorTemplateOfxs__import (179)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxs__import(struct soap*, std::vector<xs__import >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxs__import(struct soap*, const std::vector<xs__import >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxs__import(struct soap*, const char*, int, const std::vector<xs__import >*, const char*);
SOAP_FMAC3 std::vector<xs__import >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxs__import(struct soap*, const char*, std::vector<xs__import >*, const char*);
SOAP_FMAC1 std::vector<xs__import > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxs__import(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<xs__import > * soap_new_std__vectorTemplateOfxs__import(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxs__import(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxs__import(struct soap *soap, std::vector<xs__import >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxs__import(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxs__redefine
#define SOAP_TYPE_std__vectorTemplateOfxs__redefine (178)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxs__redefine(struct soap*, std::vector<xs__redefine >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxs__redefine(struct soap*, const std::vector<xs__redefine >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxs__redefine(struct soap*, const char*, int, const std::vector<xs__redefine >*, const char*);
SOAP_FMAC3 std::vector<xs__redefine >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxs__redefine(struct soap*, const char*, std::vector<xs__redefine >*, const char*);
SOAP_FMAC1 std::vector<xs__redefine > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxs__redefine(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<xs__redefine > * soap_new_std__vectorTemplateOfxs__redefine(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxs__redefine(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxs__redefine(struct soap *soap, std::vector<xs__redefine >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxs__redefine(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxs__include
#define SOAP_TYPE_std__vectorTemplateOfxs__include (177)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxs__include(struct soap*, std::vector<xs__include >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxs__include(struct soap*, const std::vector<xs__include >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxs__include(struct soap*, const char*, int, const std::vector<xs__include >*, const char*);
SOAP_FMAC3 std::vector<xs__include >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxs__include(struct soap*, const char*, std::vector<xs__include >*, const char*);
SOAP_FMAC1 std::vector<xs__include > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxs__include(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<xs__include > * soap_new_std__vectorTemplateOfxs__include(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxs__include(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxs__include(struct soap *soap, std::vector<xs__include >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxs__include(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxs__complexType
#define SOAP_TYPE_std__vectorTemplateOfxs__complexType (171)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxs__complexType(struct soap*, std::vector<xs__complexType >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxs__complexType(struct soap*, const std::vector<xs__complexType >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxs__complexType(struct soap*, const char*, int, const std::vector<xs__complexType >*, const char*);
SOAP_FMAC3 std::vector<xs__complexType >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxs__complexType(struct soap*, const char*, std::vector<xs__complexType >*, const char*);
SOAP_FMAC1 std::vector<xs__complexType > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxs__complexType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<xs__complexType > * soap_new_std__vectorTemplateOfxs__complexType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxs__complexType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxs__complexType(struct soap *soap, std::vector<xs__complexType >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxs__complexType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxs__group
#define SOAP_TYPE_std__vectorTemplateOfxs__group (170)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxs__group(struct soap*, std::vector<xs__group >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxs__group(struct soap*, const std::vector<xs__group >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxs__group(struct soap*, const char*, int, const std::vector<xs__group >*, const char*);
SOAP_FMAC3 std::vector<xs__group >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxs__group(struct soap*, const char*, std::vector<xs__group >*, const char*);
SOAP_FMAC1 std::vector<xs__group > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxs__group(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<xs__group > * soap_new_std__vectorTemplateOfxs__group(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxs__group(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxs__group(struct soap *soap, std::vector<xs__group >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxs__group(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxs__simpleType
#define SOAP_TYPE_std__vectorTemplateOfxs__simpleType (143)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxs__simpleType(struct soap*, std::vector<xs__simpleType >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxs__simpleType(struct soap*, const std::vector<xs__simpleType >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxs__simpleType(struct soap*, const char*, int, const std::vector<xs__simpleType >*, const char*);
SOAP_FMAC3 std::vector<xs__simpleType >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxs__simpleType(struct soap*, const char*, std::vector<xs__simpleType >*, const char*);
SOAP_FMAC1 std::vector<xs__simpleType > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxs__simpleType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<xs__simpleType > * soap_new_std__vectorTemplateOfxs__simpleType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxs__simpleType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxs__simpleType(struct soap *soap, std::vector<xs__simpleType >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxs__simpleType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxs__pattern
#define SOAP_TYPE_std__vectorTemplateOfxs__pattern (134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxs__pattern(struct soap*, std::vector<xs__pattern >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxs__pattern(struct soap*, const std::vector<xs__pattern >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxs__pattern(struct soap*, const char*, int, const std::vector<xs__pattern >*, const char*);
SOAP_FMAC3 std::vector<xs__pattern >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxs__pattern(struct soap*, const char*, std::vector<xs__pattern >*, const char*);
SOAP_FMAC1 std::vector<xs__pattern > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxs__pattern(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<xs__pattern > * soap_new_std__vectorTemplateOfxs__pattern(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxs__pattern(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxs__pattern(struct soap *soap, std::vector<xs__pattern >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxs__pattern(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxs__enumeration
#define SOAP_TYPE_std__vectorTemplateOfxs__enumeration (133)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxs__enumeration(struct soap*, std::vector<xs__enumeration >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxs__enumeration(struct soap*, const std::vector<xs__enumeration >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxs__enumeration(struct soap*, const char*, int, const std::vector<xs__enumeration >*, const char*);
SOAP_FMAC3 std::vector<xs__enumeration >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxs__enumeration(struct soap*, const char*, std::vector<xs__enumeration >*, const char*);
SOAP_FMAC1 std::vector<xs__enumeration > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxs__enumeration(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<xs__enumeration > * soap_new_std__vectorTemplateOfxs__enumeration(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxs__enumeration(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxs__enumeration(struct soap *soap, std::vector<xs__enumeration >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxs__enumeration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxs__attributeGroup
#define SOAP_TYPE_std__vectorTemplateOfxs__attributeGroup (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxs__attributeGroup(struct soap*, std::vector<xs__attributeGroup >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxs__attributeGroup(struct soap*, const std::vector<xs__attributeGroup >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxs__attributeGroup(struct soap*, const char*, int, const std::vector<xs__attributeGroup >*, const char*);
SOAP_FMAC3 std::vector<xs__attributeGroup >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxs__attributeGroup(struct soap*, const char*, std::vector<xs__attributeGroup >*, const char*);
SOAP_FMAC1 std::vector<xs__attributeGroup > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxs__attributeGroup(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<xs__attributeGroup > * soap_new_std__vectorTemplateOfxs__attributeGroup(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxs__attributeGroup(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxs__attributeGroup(struct soap *soap, std::vector<xs__attributeGroup >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxs__attributeGroup(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxs__attribute
#define SOAP_TYPE_std__vectorTemplateOfxs__attribute (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxs__attribute(struct soap*, std::vector<xs__attribute >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxs__attribute(struct soap*, const std::vector<xs__attribute >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxs__attribute(struct soap*, const char*, int, const std::vector<xs__attribute >*, const char*);
SOAP_FMAC3 std::vector<xs__attribute >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxs__attribute(struct soap*, const char*, std::vector<xs__attribute >*, const char*);
SOAP_FMAC1 std::vector<xs__attribute > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxs__attribute(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<xs__attribute > * soap_new_std__vectorTemplateOfxs__attribute(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxs__attribute(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxs__attribute(struct soap *soap, std::vector<xs__attribute >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxs__attribute(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxs__contents
#define SOAP_TYPE_std__vectorTemplateOfxs__contents (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxs__contents(struct soap*, std::vector<xs__contents >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxs__contents(struct soap*, const std::vector<xs__contents >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxs__contents(struct soap*, const char*, int, const std::vector<xs__contents >*, const char*);
SOAP_FMAC3 std::vector<xs__contents >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxs__contents(struct soap*, const char*, std::vector<xs__contents >*, const char*);
SOAP_FMAC1 std::vector<xs__contents > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxs__contents(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<xs__contents > * soap_new_std__vectorTemplateOfxs__contents(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxs__contents(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxs__contents(struct soap *soap, std::vector<xs__contents >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxs__contents(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxs__element
#define SOAP_TYPE_std__vectorTemplateOfxs__element (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxs__element(struct soap*, std::vector<xs__element >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxs__element(struct soap*, const std::vector<xs__element >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxs__element(struct soap*, const char*, int, const std::vector<xs__element >*, const char*);
SOAP_FMAC3 std::vector<xs__element >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxs__element(struct soap*, const char*, std::vector<xs__element >*, const char*);
SOAP_FMAC1 std::vector<xs__element > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxs__element(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<xs__element > * soap_new_std__vectorTemplateOfxs__element(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxs__element(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxs__element(struct soap *soap, std::vector<xs__element >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxs__element(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToxs__element
#define SOAP_TYPE_std__vectorTemplateOfPointerToxs__element (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToxs__element(struct soap*, std::vector<xs__element * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToxs__element(struct soap*, const std::vector<xs__element * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToxs__element(struct soap*, const char*, int, const std::vector<xs__element * >*, const char*);
SOAP_FMAC3 std::vector<xs__element * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToxs__element(struct soap*, const char*, std::vector<xs__element * >*, const char*);
SOAP_FMAC1 std::vector<xs__element * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToxs__element(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<xs__element * > * soap_new_std__vectorTemplateOfPointerToxs__element(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerToxs__element(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerToxs__element(struct soap *soap, std::vector<xs__element * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToxs__element(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of wsdlH.h */
