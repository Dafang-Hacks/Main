#ifndef OSD_HPP
#define OSD_HPP

#include <tuple>
#include <utility>

#include <cstdint>

#include "imp/imp_osd.h"
#include "sharedmem.h"

#include <ft2build.h>
#include <freetype/freetype.h>

#include FT_FREETYPE_H
#include FT_GLYPH_H
#include FT_MODULE_H
#include FT_DRIVER_H

constexpr uint32_t make_rgba(uint8_t r, uint8_t g, uint8_t b, uint8_t a) {
    return (r << 24) | (g << 16) | (b << 8) | (a << 0);
}

/*

*/


enum RGBAColor:uint32_t {
    TRANSPARENT = make_rgba(0, 0, 0, 0),

    WHITE = make_rgba(255, 255, 255, 255),
    BLACK = make_rgba(0, 0, 0, 255),
    RED = make_rgba(255, 0, 0, 255),
    GREEN = make_rgba(0, 255, 0, 255),
    BLUE = make_rgba(0, 0, 255, 255),

    CYAN = GREEN | BLUE,
    YELLOW = RED | GREEN,
    MAGENTA = BLUE | RED
};


const uint32_t DETECTION_CIRCLE_SIZE = 32;
const uint32_t DETECTION_CIRCLE_ALPHA[] = {
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 20, 20, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11, 70,142,192,219,233,234,221,197,148, 77, 16,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0, 17,119,215,255,255,255,255,255,255,255,255,255,255,222,131, 24,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0, 82,217,255,255,255,255,255,255,255,255,255,255,255,255,255,255,226, 97,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  2,132,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,150,  7,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  2,155,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,174,  8,  0,  0,  0,  0,
      0,  0,  0,  0,132,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,154,  0,  0,  0,  0,
      0,  0,  0, 82,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,104,  0,  0,  0,
      0,  0, 17,223,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,237, 30,  0,  0,
      0,  0,122,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,147,  0,  0,
      0, 13,221,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,236, 25,  0,
      0, 74,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255, 98,  0,
      0,147,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,171,  0,
      1,196,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,216,  7,
      9,221,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,237, 22,
     20,235,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,247, 37,
     20,235,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,247, 37,
     11,222,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,238, 24,
      1,200,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,219,  8,
      0,154,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,178,  0,
      0, 81,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,106,  0,
      0, 18,228,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,241, 31,  0,
      0,  0,134,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,159,  0,  0,
      0,  0, 24,231,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,243, 39,  0,  0,
      0,  0,  0, 97,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,120,  0,  0,  0,
      0,  0,  0,  0,151,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,172,  4,  0,  0,  0,
      0,  0,  0,  0,  7,174,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,192, 15,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  8,153,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,171, 16,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,104,232,255,255,255,255,255,255,255,255,255,255,255,255,255,255,239,119,  4,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0, 30,143,231,255,255,255,255,255,255,255,255,255,255,237,155, 39,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 24, 93,166,212,235,246,247,236,216,173,101, 30,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 21, 35, 36, 23,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};

class OSD {
    private:
        int _x, _y, _width, _height, _layer;

        IMPRgnHandle region;

        uint32_t *image;

    public:
        OSD(int x, int y, int width, int height, int layer);
        ~OSD();

        int getX();
        int getY();
        int getWidth();
        int getHeight();

        void setBounds(int x, int y, int width, int height);

        void clear();
        void update();

        void show(bool flag);

        void drawBitmap(int x, int y, int width, int height, uint32_t *pixels);
        void setPixel(int x, int y, uint32_t value);
        uint32_t getPixel(int x, int y);
};

std::pair<int, int> get_vertical_font_dimensions(FT_Face &face);

uint32_t mix_rgba_with_grayscale(uint32_t rgba_color, uint8_t value);

void osd_draw_timestamp(OSD &timestamp_osd, FT_Face &face, int baseline_offset, shared_conf &currentConfig);
void osd_draw_detection_circle(OSD &motion_osd, bool isDetecting, shared_conf &currentConfig);

#endif
